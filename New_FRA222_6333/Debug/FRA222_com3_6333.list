
FRA222_com3_6333.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bdc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08007d7c  08007d7c  00017d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e54  08007e54  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  08007e54  08007e54  00017e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e5c  08007e5c  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e5c  08007e5c  00017e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e60  08007e60  00017e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  08007e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  20000168  08007fcc  00020168  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  08007fcc  000204e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .debug_info   000151cc  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002503  00000000  00000000  00035364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  00037868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001180  00000000  00000000  00038a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185e7  00000000  00000000  00039c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015017  00000000  00000000  000521ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e7c0  00000000  00000000  00067216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001059d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005260  00000000  00000000  00105a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000168 	.word	0x20000168
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007d64 	.word	0x08007d64

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000016c 	.word	0x2000016c
 80001dc:	08007d64 	.word	0x08007d64

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058c:	f001 f832 	bl	80015f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000590:	f000 f844 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8000594:	f000 fa20 	bl	80009d8 <MX_DMA_Init>
  MX_GPIO_Init();
 8000598:	f000 fa54 	bl	8000a44 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059c:	f000 f9f2 	bl	8000984 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005a0:	f000 f8a4 	bl	80006ec <MX_ADC1_Init>
  MX_I2C1_Init();
 80005a4:	f000 f8f6 	bl	8000794 <MX_I2C1_Init>
  MX_SPI3_Init();
 80005a8:	f000 f922 	bl	80007f0 <MX_SPI3_Init>
  MX_TIM11_Init();
 80005ac:	f000 f9c6 	bl	800093c <MX_TIM11_Init>
  MX_TIM2_Init();
 80005b0:	f000 f954 	bl	800085c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim11);
 80005b4:	4812      	ldr	r0, [pc, #72]	; (8000600 <main+0x78>)
 80005b6:	f004 feed 	bl	8005394 <HAL_TIM_Base_Start_IT>
	HAL_UART_Transmit(&huart2, (uint8_t*) H0, strlen(H0), 1000);
 80005ba:	4812      	ldr	r0, [pc, #72]	; (8000604 <main+0x7c>)
 80005bc:	f7ff fe10 	bl	80001e0 <strlen>
 80005c0:	4603      	mov	r3, r0
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c8:	490e      	ldr	r1, [pc, #56]	; (8000604 <main+0x7c>)
 80005ca:	480f      	ldr	r0, [pc, #60]	; (8000608 <main+0x80>)
 80005cc:	f005 ffef 	bl	80065ae <HAL_UART_Transmit>
	/*HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &Temp, 1);
	IOExpenderInit();*/
	HAL_TIM_Base_Start(&htim2);
 80005d0:	480e      	ldr	r0, [pc, #56]	; (800060c <main+0x84>)
 80005d2:	f004 fe85 	bl	80052e0 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) &capturedata,
 80005d6:	230a      	movs	r3, #10
 80005d8:	4a0d      	ldr	r2, [pc, #52]	; (8000610 <main+0x88>)
 80005da:	2100      	movs	r1, #0
 80005dc:	480b      	ldr	r0, [pc, #44]	; (800060c <main+0x84>)
 80005de:	f004 ff95 	bl	800550c <HAL_TIM_IC_Start_DMA>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		EEPROMWrite();
 80005e2:	f000 fcad 	bl	8000f40 <EEPROMWrite>
		EEPROMRead(eepromDataReadBack, 3);
 80005e6:	2103      	movs	r1, #3
 80005e8:	480a      	ldr	r0, [pc, #40]	; (8000614 <main+0x8c>)
 80005ea:	f000 fcdf 	bl	8000fac <EEPROMRead>
		HAL_UART_Receive_IT(&huart2, RxDataBuffer, 1);
 80005ee:	2201      	movs	r2, #1
 80005f0:	4909      	ldr	r1, [pc, #36]	; (8000618 <main+0x90>)
 80005f2:	4805      	ldr	r0, [pc, #20]	; (8000608 <main+0x80>)
 80005f4:	f006 f86d 	bl	80066d2 <HAL_UART_Receive_IT>

		buttonReaderCycle();
 80005f8:	f000 fc46 	bl	8000e88 <buttonReaderCycle>
		EEPROMWrite();
 80005fc:	e7f1      	b.n	80005e2 <main+0x5a>
 80005fe:	bf00      	nop
 8000600:	2000039c 	.word	0x2000039c
 8000604:	20000004 	.word	0x20000004
 8000608:	2000048c 	.word	0x2000048c
 800060c:	20000444 	.word	0x20000444
 8000610:	20000184 	.word	0x20000184
 8000614:	20000350 	.word	0x20000350
 8000618:	2000021c 	.word	0x2000021c

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f006 ff64 	bl	80074f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b27      	ldr	r3, [pc, #156]	; (80006e4 <SystemClock_Config+0xc8>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a26      	ldr	r2, [pc, #152]	; (80006e4 <SystemClock_Config+0xc8>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b24      	ldr	r3, [pc, #144]	; (80006e4 <SystemClock_Config+0xc8>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <SystemClock_Config+0xcc>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemClock_Config+0xcc>)
 8000666:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <SystemClock_Config+0xcc>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800068c:	2308      	movs	r3, #8
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000690:	2364      	movs	r3, #100	; 0x64
 8000692:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000698:	2304      	movs	r3, #4
 800069a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	4618      	mov	r0, r3
 80006a2:	f004 f8d1 	bl	8004848 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ac:	f000 fcc2 	bl	8001034 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	2103      	movs	r1, #3
 80006cc:	4618      	mov	r0, r3
 80006ce:	f004 fb33 	bl	8004d38 <HAL_RCC_ClockConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006d8:	f000 fcac 	bl	8001034 <Error_Handler>
  }
}
 80006dc:	bf00      	nop
 80006de:	3750      	adds	r7, #80	; 0x50
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006f2:	463b      	mov	r3, r7
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006fe:	4b21      	ldr	r3, [pc, #132]	; (8000784 <MX_ADC1_Init+0x98>)
 8000700:	4a21      	ldr	r2, [pc, #132]	; (8000788 <MX_ADC1_Init+0x9c>)
 8000702:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000704:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <MX_ADC1_Init+0x98>)
 8000706:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800070a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_ADC1_Init+0x98>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <MX_ADC1_Init+0x98>)
 8000714:	2201      	movs	r2, #1
 8000716:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_ADC1_Init+0x98>)
 800071a:	2201      	movs	r2, #1
 800071c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <MX_ADC1_Init+0x98>)
 8000720:	2200      	movs	r2, #0
 8000722:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000726:	4b17      	ldr	r3, [pc, #92]	; (8000784 <MX_ADC1_Init+0x98>)
 8000728:	2200      	movs	r2, #0
 800072a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800072c:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_ADC1_Init+0x98>)
 800072e:	4a17      	ldr	r2, [pc, #92]	; (800078c <MX_ADC1_Init+0xa0>)
 8000730:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_ADC1_Init+0x98>)
 8000734:	2200      	movs	r2, #0
 8000736:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <MX_ADC1_Init+0x98>)
 800073a:	2201      	movs	r2, #1
 800073c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_ADC1_Init+0x98>)
 8000740:	2201      	movs	r2, #1
 8000742:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_ADC1_Init+0x98>)
 8000748:	2201      	movs	r2, #1
 800074a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800074c:	480d      	ldr	r0, [pc, #52]	; (8000784 <MX_ADC1_Init+0x98>)
 800074e:	f000 ffc3 	bl	80016d8 <HAL_ADC_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000758:	f000 fc6c 	bl	8001034 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_ADC1_Init+0xa4>)
 800075e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000760:	2301      	movs	r3, #1
 8000762:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000764:	2301      	movs	r3, #1
 8000766:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000768:	463b      	mov	r3, r7
 800076a:	4619      	mov	r1, r3
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_ADC1_Init+0x98>)
 800076e:	f000 fff7 	bl	8001760 <HAL_ADC_ConfigChannel>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000778:	f000 fc5c 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000354 	.word	0x20000354
 8000788:	40012000 	.word	0x40012000
 800078c:	0f000001 	.word	0x0f000001
 8000790:	10000012 	.word	0x10000012

08000794 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_I2C1_Init+0x50>)
 800079a:	4a13      	ldr	r2, [pc, #76]	; (80007e8 <MX_I2C1_Init+0x54>)
 800079c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007a0:	4a12      	ldr	r2, [pc, #72]	; (80007ec <MX_I2C1_Init+0x58>)
 80007a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b8:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007d2:	f002 f8b3 	bl	800293c <HAL_I2C_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007dc:	f000 fc2a 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200002a4 	.word	0x200002a4
 80007e8:	40005400 	.word	0x40005400
 80007ec:	00061a80 	.word	0x00061a80

080007f0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007f4:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_SPI3_Init+0x64>)
 80007f6:	4a18      	ldr	r2, [pc, #96]	; (8000858 <MX_SPI3_Init+0x68>)
 80007f8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007fa:	4b16      	ldr	r3, [pc, #88]	; (8000854 <MX_SPI3_Init+0x64>)
 80007fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000800:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_SPI3_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <MX_SPI3_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_SPI3_Init+0x64>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_SPI3_Init+0x64>)
 8000816:	2200      	movs	r2, #0
 8000818:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_SPI3_Init+0x64>)
 800081c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000820:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_SPI3_Init+0x64>)
 8000824:	2218      	movs	r2, #24
 8000826:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <MX_SPI3_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_SPI3_Init+0x64>)
 8000830:	2200      	movs	r2, #0
 8000832:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <MX_SPI3_Init+0x64>)
 8000836:	2200      	movs	r2, #0
 8000838:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_SPI3_Init+0x64>)
 800083c:	220a      	movs	r2, #10
 800083e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000840:	4804      	ldr	r0, [pc, #16]	; (8000854 <MX_SPI3_Init+0x64>)
 8000842:	f004 fc75 	bl	8005130 <HAL_SPI_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800084c:	f000 fbf2 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	200002f8 	.word	0x200002f8
 8000858:	40003c00 	.word	0x40003c00

0800085c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000862:	f107 0318 	add.w	r3, r7, #24
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000870:	f107 0310 	add.w	r3, r7, #16
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800087a:	463b      	mov	r3, r7
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000886:	4b2c      	ldr	r3, [pc, #176]	; (8000938 <MX_TIM2_Init+0xdc>)
 8000888:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800088c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 800088e:	4b2a      	ldr	r3, [pc, #168]	; (8000938 <MX_TIM2_Init+0xdc>)
 8000890:	2263      	movs	r2, #99	; 0x63
 8000892:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000894:	4b28      	ldr	r3, [pc, #160]	; (8000938 <MX_TIM2_Init+0xdc>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800089a:	4b27      	ldr	r3, [pc, #156]	; (8000938 <MX_TIM2_Init+0xdc>)
 800089c:	f04f 32ff 	mov.w	r2, #4294967295
 80008a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a2:	4b25      	ldr	r3, [pc, #148]	; (8000938 <MX_TIM2_Init+0xdc>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a8:	4b23      	ldr	r3, [pc, #140]	; (8000938 <MX_TIM2_Init+0xdc>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008ae:	4822      	ldr	r0, [pc, #136]	; (8000938 <MX_TIM2_Init+0xdc>)
 80008b0:	f004 fcc7 	bl	8005242 <HAL_TIM_Base_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80008ba:	f000 fbbb 	bl	8001034 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008c4:	f107 0318 	add.w	r3, r7, #24
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_TIM2_Init+0xdc>)
 80008cc:	f005 f95e 	bl	8005b8c <HAL_TIM_ConfigClockSource>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80008d6:	f000 fbad 	bl	8001034 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80008da:	4817      	ldr	r0, [pc, #92]	; (8000938 <MX_TIM2_Init+0xdc>)
 80008dc:	f004 fdbc 	bl	8005458 <HAL_TIM_IC_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80008e6:	f000 fba5 	bl	8001034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008f2:	f107 0310 	add.w	r3, r7, #16
 80008f6:	4619      	mov	r1, r3
 80008f8:	480f      	ldr	r0, [pc, #60]	; (8000938 <MX_TIM2_Init+0xdc>)
 80008fa:	f005 fd89 	bl	8006410 <HAL_TIMEx_MasterConfigSynchronization>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000904:	f000 fb96 	bl	8001034 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000908:	2300      	movs	r3, #0
 800090a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800090c:	2301      	movs	r3, #1
 800090e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000918:	463b      	mov	r3, r7
 800091a:	2200      	movs	r2, #0
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_TIM2_Init+0xdc>)
 8000920:	f005 f898 	bl	8005a54 <HAL_TIM_IC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800092a:	f000 fb83 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3728      	adds	r7, #40	; 0x28
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000444 	.word	0x20000444

0800093c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000940:	4b0e      	ldr	r3, [pc, #56]	; (800097c <MX_TIM11_Init+0x40>)
 8000942:	4a0f      	ldr	r2, [pc, #60]	; (8000980 <MX_TIM11_Init+0x44>)
 8000944:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <MX_TIM11_Init+0x40>)
 8000948:	2263      	movs	r2, #99	; 0x63
 800094a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094c:	4b0b      	ldr	r3, [pc, #44]	; (800097c <MX_TIM11_Init+0x40>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000952:	4b0a      	ldr	r3, [pc, #40]	; (800097c <MX_TIM11_Init+0x40>)
 8000954:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000958:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <MX_TIM11_Init+0x40>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_TIM11_Init+0x40>)
 8000962:	2200      	movs	r2, #0
 8000964:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_TIM11_Init+0x40>)
 8000968:	f004 fc6b 	bl	8005242 <HAL_TIM_Base_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000972:	f000 fb5f 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	2000039c 	.word	0x2000039c
 8000980:	40014800 	.word	0x40014800

08000984 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_USART2_UART_Init+0x4c>)
 800098a:	4a12      	ldr	r2, [pc, #72]	; (80009d4 <MX_USART2_UART_Init+0x50>)
 800098c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <MX_USART2_UART_Init+0x4c>)
 8000990:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000994:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_USART2_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_USART2_UART_Init+0x4c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <MX_USART2_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_USART2_UART_Init+0x4c>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <MX_USART2_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_USART2_UART_Init+0x4c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_USART2_UART_Init+0x4c>)
 80009bc:	f005 fdaa 	bl	8006514 <HAL_UART_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009c6:	f000 fb35 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	2000048c 	.word	0x2000048c
 80009d4:	40004400 	.word	0x40004400

080009d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <MX_DMA_Init+0x68>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a16      	ldr	r2, [pc, #88]	; (8000a40 <MX_DMA_Init+0x68>)
 80009e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <MX_DMA_Init+0x68>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <MX_DMA_Init+0x68>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a0f      	ldr	r2, [pc, #60]	; (8000a40 <MX_DMA_Init+0x68>)
 8000a04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <MX_DMA_Init+0x68>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2100      	movs	r1, #0
 8000a1a:	2010      	movs	r0, #16
 8000a1c:	f001 f9a9 	bl	8001d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a20:	2010      	movs	r0, #16
 8000a22:	f001 f9c2 	bl	8001daa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2038      	movs	r0, #56	; 0x38
 8000a2c:	f001 f9a1 	bl	8001d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a30:	2038      	movs	r0, #56	; 0x38
 8000a32:	f001 f9ba 	bl	8001daa <HAL_NVIC_EnableIRQ>

}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800

08000a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	4b3e      	ldr	r3, [pc, #248]	; (8000b58 <MX_GPIO_Init+0x114>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a3d      	ldr	r2, [pc, #244]	; (8000b58 <MX_GPIO_Init+0x114>)
 8000a64:	f043 0304 	orr.w	r3, r3, #4
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b3b      	ldr	r3, [pc, #236]	; (8000b58 <MX_GPIO_Init+0x114>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0304 	and.w	r3, r3, #4
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	4b37      	ldr	r3, [pc, #220]	; (8000b58 <MX_GPIO_Init+0x114>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a36      	ldr	r2, [pc, #216]	; (8000b58 <MX_GPIO_Init+0x114>)
 8000a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b34      	ldr	r3, [pc, #208]	; (8000b58 <MX_GPIO_Init+0x114>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	4b30      	ldr	r3, [pc, #192]	; (8000b58 <MX_GPIO_Init+0x114>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a2f      	ldr	r2, [pc, #188]	; (8000b58 <MX_GPIO_Init+0x114>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b2d      	ldr	r3, [pc, #180]	; (8000b58 <MX_GPIO_Init+0x114>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4b29      	ldr	r3, [pc, #164]	; (8000b58 <MX_GPIO_Init+0x114>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a28      	ldr	r2, [pc, #160]	; (8000b58 <MX_GPIO_Init+0x114>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <MX_GPIO_Init+0x114>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2120      	movs	r1, #32
 8000ace:	4823      	ldr	r0, [pc, #140]	; (8000b5c <MX_GPIO_Init+0x118>)
 8000ad0:	f001 ff1a 	bl	8002908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ada:	4821      	ldr	r0, [pc, #132]	; (8000b60 <MX_GPIO_Init+0x11c>)
 8000adc:	f001 ff14 	bl	8002908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ae0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ae6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4619      	mov	r1, r3
 8000af6:	481b      	ldr	r0, [pc, #108]	; (8000b64 <MX_GPIO_Init+0x120>)
 8000af8:	f001 fd82 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000afc:	2302      	movs	r3, #2
 8000afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4813      	ldr	r0, [pc, #76]	; (8000b5c <MX_GPIO_Init+0x118>)
 8000b10:	f001 fd76 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b14:	2320      	movs	r3, #32
 8000b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4619      	mov	r1, r3
 8000b2a:	480c      	ldr	r0, [pc, #48]	; (8000b5c <MX_GPIO_Init+0x118>)
 8000b2c:	f001 fd68 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 8000b30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	2301      	movs	r3, #1
 8000b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	4805      	ldr	r0, [pc, #20]	; (8000b60 <MX_GPIO_Init+0x11c>)
 8000b4a:	f001 fd59 	bl	8002600 <HAL_GPIO_Init>

}
 8000b4e:	bf00      	nop
 8000b50:	3728      	adds	r7, #40	; 0x28
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020000 	.word	0x40020000
 8000b60:	40020400 	.word	0x40020400
 8000b64:	40020800 	.word	0x40020800

08000b68 <UI_UART>:

/* USER CODE BEGIN 4 */

void UI_UART() {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	static uint8_t n_state = 0;
	switch (n_state) {
 8000b6c:	4bac      	ldr	r3, [pc, #688]	; (8000e20 <UI_UART+0x2b8>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b04      	cmp	r3, #4
 8000b72:	f200 817c 	bhi.w	8000e6e <UI_UART+0x306>
 8000b76:	a201      	add	r2, pc, #4	; (adr r2, 8000b7c <UI_UART+0x14>)
 8000b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7c:	08000b91 	.word	0x08000b91
 8000b80:	08000bcf 	.word	0x08000bcf
 8000b84:	08000c99 	.word	0x08000c99
 8000b88:	08000d63 	.word	0x08000d63
 8000b8c:	08000e0d 	.word	0x08000e0d
	case 0:
		HAL_UART_Transmit(&huart2, (uint8_t*) H1, strlen(H1), 10);
 8000b90:	48a4      	ldr	r0, [pc, #656]	; (8000e24 <UI_UART+0x2bc>)
 8000b92:	f7ff fb25 	bl	80001e0 <strlen>
 8000b96:	4603      	mov	r3, r0
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	230a      	movs	r3, #10
 8000b9c:	49a1      	ldr	r1, [pc, #644]	; (8000e24 <UI_UART+0x2bc>)
 8000b9e:	48a2      	ldr	r0, [pc, #648]	; (8000e28 <UI_UART+0x2c0>)
 8000ba0:	f005 fd05 	bl	80065ae <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "now station_goal:[%d]\r\n", station_goal);
 8000ba4:	4ba1      	ldr	r3, [pc, #644]	; (8000e2c <UI_UART+0x2c4>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	49a1      	ldr	r1, [pc, #644]	; (8000e30 <UI_UART+0x2c8>)
 8000bac:	48a1      	ldr	r0, [pc, #644]	; (8000e34 <UI_UART+0x2cc>)
 8000bae:	f006 fcab 	bl	8007508 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) TxDataBuffer, strlen(TxDataBuffer),
 8000bb2:	48a0      	ldr	r0, [pc, #640]	; (8000e34 <UI_UART+0x2cc>)
 8000bb4:	f7ff fb14 	bl	80001e0 <strlen>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc0:	499c      	ldr	r1, [pc, #624]	; (8000e34 <UI_UART+0x2cc>)
 8000bc2:	4899      	ldr	r0, [pc, #612]	; (8000e28 <UI_UART+0x2c0>)
 8000bc4:	f005 fcf3 	bl	80065ae <HAL_UART_Transmit>
				1000);
		n_state = 1;
 8000bc8:	4b95      	ldr	r3, [pc, #596]	; (8000e20 <UI_UART+0x2b8>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	701a      	strb	r2, [r3, #0]
	case 1:
		switch (RxDataBuffer[0]) {
 8000bce:	4b9a      	ldr	r3, [pc, #616]	; (8000e38 <UI_UART+0x2d0>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b77      	cmp	r3, #119	; 0x77
 8000bd4:	d007      	beq.n	8000be6 <UI_UART+0x7e>
 8000bd6:	2b77      	cmp	r3, #119	; 0x77
 8000bd8:	f300 8120 	bgt.w	8000e1c <UI_UART+0x2b4>
 8000bdc:	2b65      	cmp	r3, #101	; 0x65
 8000bde:	d03a      	beq.n	8000c56 <UI_UART+0xee>
 8000be0:	2b73      	cmp	r3, #115	; 0x73
 8000be2:	d01c      	beq.n	8000c1e <UI_UART+0xb6>
			HAL_UART_Transmit(&huart2, (uint8_t*) TxDataBuffer,
					strlen(TxDataBuffer), 1000);
			n_state = 2;
			break;
		}
		break;
 8000be4:	e11a      	b.n	8000e1c <UI_UART+0x2b4>
			station_goal += 1;
 8000be6:	4b91      	ldr	r3, [pc, #580]	; (8000e2c <UI_UART+0x2c4>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	3301      	adds	r3, #1
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	4b8f      	ldr	r3, [pc, #572]	; (8000e2c <UI_UART+0x2c4>)
 8000bf0:	701a      	strb	r2, [r3, #0]
			sprintf(TxDataBuffer, "station_goal:[%d]\r\n", station_goal);
 8000bf2:	4b8e      	ldr	r3, [pc, #568]	; (8000e2c <UI_UART+0x2c4>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	4990      	ldr	r1, [pc, #576]	; (8000e3c <UI_UART+0x2d4>)
 8000bfa:	488e      	ldr	r0, [pc, #568]	; (8000e34 <UI_UART+0x2cc>)
 8000bfc:	f006 fc84 	bl	8007508 <siprintf>
					strlen(TxDataBuffer), 1000);
 8000c00:	488c      	ldr	r0, [pc, #560]	; (8000e34 <UI_UART+0x2cc>)
 8000c02:	f7ff faed 	bl	80001e0 <strlen>
 8000c06:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) TxDataBuffer,
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0e:	4989      	ldr	r1, [pc, #548]	; (8000e34 <UI_UART+0x2cc>)
 8000c10:	4885      	ldr	r0, [pc, #532]	; (8000e28 <UI_UART+0x2c0>)
 8000c12:	f005 fccc 	bl	80065ae <HAL_UART_Transmit>
			RxDataBuffer[0] = 0;
 8000c16:	4b88      	ldr	r3, [pc, #544]	; (8000e38 <UI_UART+0x2d0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
			break;
 8000c1c:	e03b      	b.n	8000c96 <UI_UART+0x12e>
			station_goal -= 1;
 8000c1e:	4b83      	ldr	r3, [pc, #524]	; (8000e2c <UI_UART+0x2c4>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4b81      	ldr	r3, [pc, #516]	; (8000e2c <UI_UART+0x2c4>)
 8000c28:	701a      	strb	r2, [r3, #0]
			sprintf(TxDataBuffer, "station_goal:[%d]\r\n", station_goal);
 8000c2a:	4b80      	ldr	r3, [pc, #512]	; (8000e2c <UI_UART+0x2c4>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	4982      	ldr	r1, [pc, #520]	; (8000e3c <UI_UART+0x2d4>)
 8000c32:	4880      	ldr	r0, [pc, #512]	; (8000e34 <UI_UART+0x2cc>)
 8000c34:	f006 fc68 	bl	8007508 <siprintf>
					strlen(TxDataBuffer), 1000);
 8000c38:	487e      	ldr	r0, [pc, #504]	; (8000e34 <UI_UART+0x2cc>)
 8000c3a:	f7ff fad1 	bl	80001e0 <strlen>
 8000c3e:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) TxDataBuffer,
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c46:	497b      	ldr	r1, [pc, #492]	; (8000e34 <UI_UART+0x2cc>)
 8000c48:	4877      	ldr	r0, [pc, #476]	; (8000e28 <UI_UART+0x2c0>)
 8000c4a:	f005 fcb0 	bl	80065ae <HAL_UART_Transmit>
			RxDataBuffer[0] = 0;
 8000c4e:	4b7a      	ldr	r3, [pc, #488]	; (8000e38 <UI_UART+0x2d0>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
			break;
 8000c54:	e01f      	b.n	8000c96 <UI_UART+0x12e>
			HAL_UART_Transmit(&huart2, (uint8_t*) H2, strlen(H2), 10);
 8000c56:	487a      	ldr	r0, [pc, #488]	; (8000e40 <UI_UART+0x2d8>)
 8000c58:	f7ff fac2 	bl	80001e0 <strlen>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	230a      	movs	r3, #10
 8000c62:	4977      	ldr	r1, [pc, #476]	; (8000e40 <UI_UART+0x2d8>)
 8000c64:	4870      	ldr	r0, [pc, #448]	; (8000e28 <UI_UART+0x2c0>)
 8000c66:	f005 fca2 	bl	80065ae <HAL_UART_Transmit>
			sprintf(TxDataBuffer, "now time_wait:[%d]\r\n", time_wait);
 8000c6a:	4b76      	ldr	r3, [pc, #472]	; (8000e44 <UI_UART+0x2dc>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	4975      	ldr	r1, [pc, #468]	; (8000e48 <UI_UART+0x2e0>)
 8000c72:	4870      	ldr	r0, [pc, #448]	; (8000e34 <UI_UART+0x2cc>)
 8000c74:	f006 fc48 	bl	8007508 <siprintf>
					strlen(TxDataBuffer), 1000);
 8000c78:	486e      	ldr	r0, [pc, #440]	; (8000e34 <UI_UART+0x2cc>)
 8000c7a:	f7ff fab1 	bl	80001e0 <strlen>
 8000c7e:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) TxDataBuffer,
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c86:	496b      	ldr	r1, [pc, #428]	; (8000e34 <UI_UART+0x2cc>)
 8000c88:	4867      	ldr	r0, [pc, #412]	; (8000e28 <UI_UART+0x2c0>)
 8000c8a:	f005 fc90 	bl	80065ae <HAL_UART_Transmit>
			n_state = 2;
 8000c8e:	4b64      	ldr	r3, [pc, #400]	; (8000e20 <UI_UART+0x2b8>)
 8000c90:	2202      	movs	r2, #2
 8000c92:	701a      	strb	r2, [r3, #0]
			break;
 8000c94:	bf00      	nop
		break;
 8000c96:	e0c1      	b.n	8000e1c <UI_UART+0x2b4>
	case 2:
		switch (RxDataBuffer[0]) {
 8000c98:	4b67      	ldr	r3, [pc, #412]	; (8000e38 <UI_UART+0x2d0>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b77      	cmp	r3, #119	; 0x77
 8000c9e:	d007      	beq.n	8000cb0 <UI_UART+0x148>
 8000ca0:	2b77      	cmp	r3, #119	; 0x77
 8000ca2:	f300 80e1 	bgt.w	8000e68 <UI_UART+0x300>
 8000ca6:	2b65      	cmp	r3, #101	; 0x65
 8000ca8:	d03a      	beq.n	8000d20 <UI_UART+0x1b8>
 8000caa:	2b73      	cmp	r3, #115	; 0x73
 8000cac:	d01c      	beq.n	8000ce8 <UI_UART+0x180>
			HAL_UART_Transmit(&huart2, (uint8_t*) TxDataBuffer,
					strlen(TxDataBuffer), 1000);
			n_state = 3;
			break;
		}
		break;
 8000cae:	e0db      	b.n	8000e68 <UI_UART+0x300>
			time_wait += 1;
 8000cb0:	4b64      	ldr	r3, [pc, #400]	; (8000e44 <UI_UART+0x2dc>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	4b62      	ldr	r3, [pc, #392]	; (8000e44 <UI_UART+0x2dc>)
 8000cba:	701a      	strb	r2, [r3, #0]
			sprintf(TxDataBuffer, "time_wait:[%d]\r\n", time_wait);
 8000cbc:	4b61      	ldr	r3, [pc, #388]	; (8000e44 <UI_UART+0x2dc>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4962      	ldr	r1, [pc, #392]	; (8000e4c <UI_UART+0x2e4>)
 8000cc4:	485b      	ldr	r0, [pc, #364]	; (8000e34 <UI_UART+0x2cc>)
 8000cc6:	f006 fc1f 	bl	8007508 <siprintf>
					strlen(TxDataBuffer), 1000);
 8000cca:	485a      	ldr	r0, [pc, #360]	; (8000e34 <UI_UART+0x2cc>)
 8000ccc:	f7ff fa88 	bl	80001e0 <strlen>
 8000cd0:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) TxDataBuffer,
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd8:	4956      	ldr	r1, [pc, #344]	; (8000e34 <UI_UART+0x2cc>)
 8000cda:	4853      	ldr	r0, [pc, #332]	; (8000e28 <UI_UART+0x2c0>)
 8000cdc:	f005 fc67 	bl	80065ae <HAL_UART_Transmit>
			RxDataBuffer[0] = 0;
 8000ce0:	4b55      	ldr	r3, [pc, #340]	; (8000e38 <UI_UART+0x2d0>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
			break;
 8000ce6:	e03b      	b.n	8000d60 <UI_UART+0x1f8>
			time_wait -= 1;
 8000ce8:	4b56      	ldr	r3, [pc, #344]	; (8000e44 <UI_UART+0x2dc>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	3b01      	subs	r3, #1
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	4b54      	ldr	r3, [pc, #336]	; (8000e44 <UI_UART+0x2dc>)
 8000cf2:	701a      	strb	r2, [r3, #0]
			sprintf(TxDataBuffer, "time_wait:[%d]\r\n", time_wait);
 8000cf4:	4b53      	ldr	r3, [pc, #332]	; (8000e44 <UI_UART+0x2dc>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4954      	ldr	r1, [pc, #336]	; (8000e4c <UI_UART+0x2e4>)
 8000cfc:	484d      	ldr	r0, [pc, #308]	; (8000e34 <UI_UART+0x2cc>)
 8000cfe:	f006 fc03 	bl	8007508 <siprintf>
					strlen(TxDataBuffer), 1000);
 8000d02:	484c      	ldr	r0, [pc, #304]	; (8000e34 <UI_UART+0x2cc>)
 8000d04:	f7ff fa6c 	bl	80001e0 <strlen>
 8000d08:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) TxDataBuffer,
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d10:	4948      	ldr	r1, [pc, #288]	; (8000e34 <UI_UART+0x2cc>)
 8000d12:	4845      	ldr	r0, [pc, #276]	; (8000e28 <UI_UART+0x2c0>)
 8000d14:	f005 fc4b 	bl	80065ae <HAL_UART_Transmit>
			RxDataBuffer[0] = 0;
 8000d18:	4b47      	ldr	r3, [pc, #284]	; (8000e38 <UI_UART+0x2d0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
			break;
 8000d1e:	e01f      	b.n	8000d60 <UI_UART+0x1f8>
			HAL_UART_Transmit(&huart2, (uint8_t*) H3, strlen(H3), 10);
 8000d20:	484b      	ldr	r0, [pc, #300]	; (8000e50 <UI_UART+0x2e8>)
 8000d22:	f7ff fa5d 	bl	80001e0 <strlen>
 8000d26:	4603      	mov	r3, r0
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	230a      	movs	r3, #10
 8000d2c:	4948      	ldr	r1, [pc, #288]	; (8000e50 <UI_UART+0x2e8>)
 8000d2e:	483e      	ldr	r0, [pc, #248]	; (8000e28 <UI_UART+0x2c0>)
 8000d30:	f005 fc3d 	bl	80065ae <HAL_UART_Transmit>
			sprintf(TxDataBuffer, "now time_work:[%d]\r\n", time_work);
 8000d34:	4b47      	ldr	r3, [pc, #284]	; (8000e54 <UI_UART+0x2ec>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4947      	ldr	r1, [pc, #284]	; (8000e58 <UI_UART+0x2f0>)
 8000d3c:	483d      	ldr	r0, [pc, #244]	; (8000e34 <UI_UART+0x2cc>)
 8000d3e:	f006 fbe3 	bl	8007508 <siprintf>
					strlen(TxDataBuffer), 1000);
 8000d42:	483c      	ldr	r0, [pc, #240]	; (8000e34 <UI_UART+0x2cc>)
 8000d44:	f7ff fa4c 	bl	80001e0 <strlen>
 8000d48:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) TxDataBuffer,
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d50:	4938      	ldr	r1, [pc, #224]	; (8000e34 <UI_UART+0x2cc>)
 8000d52:	4835      	ldr	r0, [pc, #212]	; (8000e28 <UI_UART+0x2c0>)
 8000d54:	f005 fc2b 	bl	80065ae <HAL_UART_Transmit>
			n_state = 3;
 8000d58:	4b31      	ldr	r3, [pc, #196]	; (8000e20 <UI_UART+0x2b8>)
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	701a      	strb	r2, [r3, #0]
			break;
 8000d5e:	bf00      	nop
		break;
 8000d60:	e082      	b.n	8000e68 <UI_UART+0x300>
	case 3:
		switch (RxDataBuffer[0]) {
 8000d62:	4b35      	ldr	r3, [pc, #212]	; (8000e38 <UI_UART+0x2d0>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b77      	cmp	r3, #119	; 0x77
 8000d68:	d006      	beq.n	8000d78 <UI_UART+0x210>
 8000d6a:	2b77      	cmp	r3, #119	; 0x77
 8000d6c:	dc7e      	bgt.n	8000e6c <UI_UART+0x304>
 8000d6e:	2b65      	cmp	r3, #101	; 0x65
 8000d70:	d03a      	beq.n	8000de8 <UI_UART+0x280>
 8000d72:	2b73      	cmp	r3, #115	; 0x73
 8000d74:	d01c      	beq.n	8000db0 <UI_UART+0x248>
			HAL_UART_Transmit(&huart2, (uint8_t*) H4, strlen(H4), 10);
			eepromWriteFlag = 1;
			n_state = 0;
			break;
		}
		break;
 8000d76:	e079      	b.n	8000e6c <UI_UART+0x304>
			time_work += 1;
 8000d78:	4b36      	ldr	r3, [pc, #216]	; (8000e54 <UI_UART+0x2ec>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	4b34      	ldr	r3, [pc, #208]	; (8000e54 <UI_UART+0x2ec>)
 8000d82:	701a      	strb	r2, [r3, #0]
			sprintf(TxDataBuffer, "time_work:[%d]\r\n", time_work);
 8000d84:	4b33      	ldr	r3, [pc, #204]	; (8000e54 <UI_UART+0x2ec>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4934      	ldr	r1, [pc, #208]	; (8000e5c <UI_UART+0x2f4>)
 8000d8c:	4829      	ldr	r0, [pc, #164]	; (8000e34 <UI_UART+0x2cc>)
 8000d8e:	f006 fbbb 	bl	8007508 <siprintf>
					strlen(TxDataBuffer), 1000);
 8000d92:	4828      	ldr	r0, [pc, #160]	; (8000e34 <UI_UART+0x2cc>)
 8000d94:	f7ff fa24 	bl	80001e0 <strlen>
 8000d98:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) TxDataBuffer,
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da0:	4924      	ldr	r1, [pc, #144]	; (8000e34 <UI_UART+0x2cc>)
 8000da2:	4821      	ldr	r0, [pc, #132]	; (8000e28 <UI_UART+0x2c0>)
 8000da4:	f005 fc03 	bl	80065ae <HAL_UART_Transmit>
			RxDataBuffer[0] = 0;
 8000da8:	4b23      	ldr	r3, [pc, #140]	; (8000e38 <UI_UART+0x2d0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
			break;
 8000dae:	e02c      	b.n	8000e0a <UI_UART+0x2a2>
			time_work -= 1;
 8000db0:	4b28      	ldr	r3, [pc, #160]	; (8000e54 <UI_UART+0x2ec>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	3b01      	subs	r3, #1
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	4b26      	ldr	r3, [pc, #152]	; (8000e54 <UI_UART+0x2ec>)
 8000dba:	701a      	strb	r2, [r3, #0]
			sprintf(TxDataBuffer, "time_work:[%d]\r\n", time_work);
 8000dbc:	4b25      	ldr	r3, [pc, #148]	; (8000e54 <UI_UART+0x2ec>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4926      	ldr	r1, [pc, #152]	; (8000e5c <UI_UART+0x2f4>)
 8000dc4:	481b      	ldr	r0, [pc, #108]	; (8000e34 <UI_UART+0x2cc>)
 8000dc6:	f006 fb9f 	bl	8007508 <siprintf>
					strlen(TxDataBuffer), 1000);
 8000dca:	481a      	ldr	r0, [pc, #104]	; (8000e34 <UI_UART+0x2cc>)
 8000dcc:	f7ff fa08 	bl	80001e0 <strlen>
 8000dd0:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) TxDataBuffer,
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd8:	4916      	ldr	r1, [pc, #88]	; (8000e34 <UI_UART+0x2cc>)
 8000dda:	4813      	ldr	r0, [pc, #76]	; (8000e28 <UI_UART+0x2c0>)
 8000ddc:	f005 fbe7 	bl	80065ae <HAL_UART_Transmit>
			RxDataBuffer[0] = 0;
 8000de0:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <UI_UART+0x2d0>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
			break;
 8000de6:	e010      	b.n	8000e0a <UI_UART+0x2a2>
			HAL_UART_Transmit(&huart2, (uint8_t*) H4, strlen(H4), 10);
 8000de8:	481d      	ldr	r0, [pc, #116]	; (8000e60 <UI_UART+0x2f8>)
 8000dea:	f7ff f9f9 	bl	80001e0 <strlen>
 8000dee:	4603      	mov	r3, r0
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	230a      	movs	r3, #10
 8000df4:	491a      	ldr	r1, [pc, #104]	; (8000e60 <UI_UART+0x2f8>)
 8000df6:	480c      	ldr	r0, [pc, #48]	; (8000e28 <UI_UART+0x2c0>)
 8000df8:	f005 fbd9 	bl	80065ae <HAL_UART_Transmit>
			eepromWriteFlag = 1;
 8000dfc:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <UI_UART+0x2fc>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	701a      	strb	r2, [r3, #0]
			n_state = 0;
 8000e02:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <UI_UART+0x2b8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	701a      	strb	r2, [r3, #0]
			break;
 8000e08:	bf00      	nop
		break;
 8000e0a:	e02f      	b.n	8000e6c <UI_UART+0x304>
		 }
		 }
		 else if(micros() - time_wait > time_wait){

		 }*/
		switch (RxDataBuffer[0]) {
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <UI_UART+0x2d0>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b71      	cmp	r3, #113	; 0x71
 8000e12:	d12c      	bne.n	8000e6e <UI_UART+0x306>
		case 'q':
			n_state = 0;
 8000e14:	4b02      	ldr	r3, [pc, #8]	; (8000e20 <UI_UART+0x2b8>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000e1a:	e028      	b.n	8000e6e <UI_UART+0x306>
		break;
 8000e1c:	bf00      	nop
 8000e1e:	e026      	b.n	8000e6e <UI_UART+0x306>
 8000e20:	20000230 	.word	0x20000230
 8000e24:	2000005c 	.word	0x2000005c
 8000e28:	2000048c 	.word	0x2000048c
 8000e2c:	20000002 	.word	0x20000002
 8000e30:	08007d7c 	.word	0x08007d7c
 8000e34:	200001fc 	.word	0x200001fc
 8000e38:	2000021c 	.word	0x2000021c
 8000e3c:	08007d94 	.word	0x08007d94
 8000e40:	20000074 	.word	0x20000074
 8000e44:	20000000 	.word	0x20000000
 8000e48:	08007da8 	.word	0x08007da8
 8000e4c:	08007dc0 	.word	0x08007dc0
 8000e50:	2000009c 	.word	0x2000009c
 8000e54:	20000001 	.word	0x20000001
 8000e58:	08007dd4 	.word	0x08007dd4
 8000e5c:	08007dec 	.word	0x08007dec
 8000e60:	200000c8 	.word	0x200000c8
 8000e64:	2000021f 	.word	0x2000021f
		break;
 8000e68:	bf00      	nop
 8000e6a:	e000      	b.n	8000e6e <UI_UART+0x306>
		break;
 8000e6c:	bf00      	nop
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop

08000e74 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	UI_UART();
 8000e7c:	f7ff fe74 	bl	8000b68 <UI_UART>
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <buttonReaderCycle>:

void buttonReaderCycle() {
 8000e88:	b490      	push	{r4, r7}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
	uint32_t CapPos =CAPTURENUM -  __HAL_DMA_GET_COUNTER(htim2.hdma[TIM_DMA_ID_CC1]);
 8000e8e:	4b27      	ldr	r3, [pc, #156]	; (8000f2c <buttonReaderCycle+0xa4>)
 8000e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f1c3 030a 	rsb	r3, r3, #10
 8000e9a:	603b      	str	r3, [r7, #0]
	uint32_t sum = 0 ;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	607b      	str	r3, [r7, #4]

	for(register int i=2 ;i < CAPTURENUM-1;i++)
 8000ea0:	2402      	movs	r4, #2
 8000ea2:	e030      	b.n	8000f06 <buttonReaderCycle+0x7e>
	{
		DiffTime[i]  = capturedata[(CapPos+1+i)%CAPTURENUM]-capturedata[(CapPos+i)%CAPTURENUM];
 8000ea4:	4622      	mov	r2, r4
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	1c59      	adds	r1, r3, #1
 8000eac:	4b20      	ldr	r3, [pc, #128]	; (8000f30 <buttonReaderCycle+0xa8>)
 8000eae:	fba3 2301 	umull	r2, r3, r3, r1
 8000eb2:	08da      	lsrs	r2, r3, #3
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4413      	add	r3, r2
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	1aca      	subs	r2, r1, r3
 8000ebe:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <buttonReaderCycle+0xac>)
 8000ec0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000ec4:	4622      	mov	r2, r4
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	18d1      	adds	r1, r2, r3
 8000eca:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <buttonReaderCycle+0xa8>)
 8000ecc:	fba3 2301 	umull	r2, r3, r3, r1
 8000ed0:	08da      	lsrs	r2, r3, #3
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	1aca      	subs	r2, r1, r3
 8000edc:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <buttonReaderCycle+0xac>)
 8000ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee2:	1ac3      	subs	r3, r0, r3
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	f04f 0300 	mov.w	r3, #0
 8000eea:	4813      	ldr	r0, [pc, #76]	; (8000f38 <buttonReaderCycle+0xb0>)
 8000eec:	00e1      	lsls	r1, r4, #3
 8000eee:	4401      	add	r1, r0
 8000ef0:	e9c1 2300 	strd	r2, r3, [r1]
		//Sum all  Diff
		sum += DiffTime[i];
 8000ef4:	4a10      	ldr	r2, [pc, #64]	; (8000f38 <buttonReaderCycle+0xb0>)
 8000ef6:	00e3      	lsls	r3, r4, #3
 8000ef8:	4413      	add	r3, r2
 8000efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	607b      	str	r3, [r7, #4]
	for(register int i=2 ;i < CAPTURENUM-1;i++)
 8000f04:	3401      	adds	r4, #1
 8000f06:	2c08      	cmp	r4, #8
 8000f08:	ddcc      	ble.n	8000ea4 <buttonReaderCycle+0x1c>
	}


	MeanTime =sum / (float)(CAPTURENUM-3);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	ee07 3a90 	vmov	s15, r3
 8000f10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f14:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
 8000f18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f1c:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <buttonReaderCycle+0xb4>)
 8000f1e:	edc3 7a00 	vstr	s15, [r3]
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc90      	pop	{r4, r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	20000444 	.word	0x20000444
 8000f30:	cccccccd 	.word	0xcccccccd
 8000f34:	20000184 	.word	0x20000184
 8000f38:	200001b0 	.word	0x200001b0
 8000f3c:	200001f8 	.word	0x200001f8

08000f40 <EEPROMWrite>:

void EEPROMWrite() {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af02      	add	r7, sp, #8
	if (eepromWriteFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8000f46:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <EEPROMWrite+0x54>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d01e      	beq.n	8000f8c <EEPROMWrite+0x4c>
 8000f4e:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <EEPROMWrite+0x58>)
 8000f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b20      	cmp	r3, #32
 8000f58:	d118      	bne.n	8000f8c <EEPROMWrite+0x4c>

		static uint8_t data[3] = { 0 };
		data[0] = station_goal;
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <EEPROMWrite+0x5c>)
 8000f5c:	781a      	ldrb	r2, [r3, #0]
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <EEPROMWrite+0x60>)
 8000f60:	701a      	strb	r2, [r3, #0]
		data[1] = time_wait;
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <EEPROMWrite+0x64>)
 8000f64:	781a      	ldrb	r2, [r3, #0]
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <EEPROMWrite+0x60>)
 8000f68:	705a      	strb	r2, [r3, #1]
		data[2] = time_work;
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <EEPROMWrite+0x68>)
 8000f6c:	781a      	ldrb	r2, [r3, #0]
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <EEPROMWrite+0x60>)
 8000f70:	709a      	strb	r2, [r3, #2]

		HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, 0x1A, I2C_MEMADD_SIZE_16BIT,
 8000f72:	2303      	movs	r3, #3
 8000f74:	9301      	str	r3, [sp, #4]
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <EEPROMWrite+0x60>)
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2310      	movs	r3, #16
 8000f7c:	221a      	movs	r2, #26
 8000f7e:	21a0      	movs	r1, #160	; 0xa0
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <EEPROMWrite+0x58>)
 8000f82:	f001 fe1f 	bl	8002bc4 <HAL_I2C_Mem_Write_IT>
				data, 3);

		eepromWriteFlag = 0;
 8000f86:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <EEPROMWrite+0x54>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
	}
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	2000021f 	.word	0x2000021f
 8000f98:	200002a4 	.word	0x200002a4
 8000f9c:	20000002 	.word	0x20000002
 8000fa0:	20000234 	.word	0x20000234
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	20000001 	.word	0x20000001

08000fac <EEPROMRead>:

void EEPROMRead(uint8_t *Rdata, uint16_t len) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	807b      	strh	r3, [r7, #2]
	if (eepromReadFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <EEPROMRead+0x44>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d012      	beq.n	8000fe6 <EEPROMRead+0x3a>
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <EEPROMRead+0x48>)
 8000fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	2b20      	cmp	r3, #32
 8000fca:	d10c      	bne.n	8000fe6 <EEPROMRead+0x3a>

		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, 0x1a, I2C_MEMADD_SIZE_16BIT,
 8000fcc:	887b      	ldrh	r3, [r7, #2]
 8000fce:	9301      	str	r3, [sp, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2310      	movs	r3, #16
 8000fd6:	221a      	movs	r2, #26
 8000fd8:	21a0      	movs	r1, #160	; 0xa0
 8000fda:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <EEPROMRead+0x48>)
 8000fdc:	f001 fea4 	bl	8002d28 <HAL_I2C_Mem_Read_IT>
				Rdata, len);

		eepromReadFlag = 0;
 8000fe0:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <EEPROMRead+0x44>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
	}
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000220 	.word	0x20000220
 8000ff4:	200002a4 	.word	0x200002a4

08000ff8 <HAL_TIM_PeriodElapsedCallback>:
 HAL_SPI_Mem_Write_IT(&hspi3, IOEXPD_ADDR, 0x15, I2C_MEMADD_SIZE_8BIT,
 &data, 1);
 IOExpdreWriteFlag = 0;
 }
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ff8:	b4b0      	push	{r4, r5, r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a0a      	ldr	r2, [pc, #40]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d10c      	bne.n	8001022 <HAL_TIM_PeriodElapsedCallback+0x2a>
		_micro += 65535;
 8001008:	4b09      	ldr	r3, [pc, #36]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800100a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001012:	f04f 0100 	mov.w	r1, #0
 8001016:	1814      	adds	r4, r2, r0
 8001018:	eb43 0501 	adc.w	r5, r3, r1
 800101c:	4b04      	ldr	r3, [pc, #16]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800101e:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	bcb0      	pop	{r4, r5, r7}
 800102a:	4770      	bx	lr
 800102c:	2000039c 	.word	0x2000039c
 8001030:	20000228 	.word	0x20000228

08001034 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001038:	b672      	cpsid	i
}
 800103a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800103c:	e7fe      	b.n	800103c <Error_Handler+0x8>
	...

08001040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <HAL_MspInit+0x4c>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	4a0f      	ldr	r2, [pc, #60]	; (800108c <HAL_MspInit+0x4c>)
 8001050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001054:	6453      	str	r3, [r2, #68]	; 0x44
 8001056:	4b0d      	ldr	r3, [pc, #52]	; (800108c <HAL_MspInit+0x4c>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	603b      	str	r3, [r7, #0]
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <HAL_MspInit+0x4c>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	4a08      	ldr	r2, [pc, #32]	; (800108c <HAL_MspInit+0x4c>)
 800106c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001070:	6413      	str	r3, [r2, #64]	; 0x40
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_MspInit+0x4c>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800107e:	2007      	movs	r0, #7
 8001080:	f000 fe6c 	bl	8001d5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40023800 	.word	0x40023800

08001090 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a21      	ldr	r2, [pc, #132]	; (8001124 <HAL_ADC_MspInit+0x94>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d13b      	bne.n	800111a <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b20      	ldr	r3, [pc, #128]	; (8001128 <HAL_ADC_MspInit+0x98>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	4a1f      	ldr	r2, [pc, #124]	; (8001128 <HAL_ADC_MspInit+0x98>)
 80010ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b0:	6453      	str	r3, [r2, #68]	; 0x44
 80010b2:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <HAL_ADC_MspInit+0x98>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80010be:	4b1b      	ldr	r3, [pc, #108]	; (800112c <HAL_ADC_MspInit+0x9c>)
 80010c0:	4a1b      	ldr	r2, [pc, #108]	; (8001130 <HAL_ADC_MspInit+0xa0>)
 80010c2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80010c4:	4b19      	ldr	r3, [pc, #100]	; (800112c <HAL_ADC_MspInit+0x9c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010ca:	4b18      	ldr	r3, [pc, #96]	; (800112c <HAL_ADC_MspInit+0x9c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d0:	4b16      	ldr	r3, [pc, #88]	; (800112c <HAL_ADC_MspInit+0x9c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <HAL_ADC_MspInit+0x9c>)
 80010d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010dc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <HAL_ADC_MspInit+0x9c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <HAL_ADC_MspInit+0x9c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <HAL_ADC_MspInit+0x9c>)
 80010ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010f0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <HAL_ADC_MspInit+0x9c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <HAL_ADC_MspInit+0x9c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010fe:	480b      	ldr	r0, [pc, #44]	; (800112c <HAL_ADC_MspInit+0x9c>)
 8001100:	f000 fe6e 	bl	8001de0 <HAL_DMA_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 800110a:	f7ff ff93 	bl	8001034 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a06      	ldr	r2, [pc, #24]	; (800112c <HAL_ADC_MspInit+0x9c>)
 8001112:	639a      	str	r2, [r3, #56]	; 0x38
 8001114:	4a05      	ldr	r2, [pc, #20]	; (800112c <HAL_ADC_MspInit+0x9c>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40012000 	.word	0x40012000
 8001128:	40023800 	.word	0x40023800
 800112c:	200003e4 	.word	0x200003e4
 8001130:	40026410 	.word	0x40026410

08001134 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a21      	ldr	r2, [pc, #132]	; (80011d8 <HAL_I2C_MspInit+0xa4>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d13c      	bne.n	80011d0 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	4b20      	ldr	r3, [pc, #128]	; (80011dc <HAL_I2C_MspInit+0xa8>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a1f      	ldr	r2, [pc, #124]	; (80011dc <HAL_I2C_MspInit+0xa8>)
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <HAL_I2C_MspInit+0xa8>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001172:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001178:	2312      	movs	r3, #18
 800117a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001180:	2303      	movs	r3, #3
 8001182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001184:	2304      	movs	r3, #4
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4619      	mov	r1, r3
 800118e:	4814      	ldr	r0, [pc, #80]	; (80011e0 <HAL_I2C_MspInit+0xac>)
 8001190:	f001 fa36 	bl	8002600 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	4b10      	ldr	r3, [pc, #64]	; (80011dc <HAL_I2C_MspInit+0xa8>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	4a0f      	ldr	r2, [pc, #60]	; (80011dc <HAL_I2C_MspInit+0xa8>)
 800119e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011a2:	6413      	str	r3, [r2, #64]	; 0x40
 80011a4:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <HAL_I2C_MspInit+0xa8>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2100      	movs	r1, #0
 80011b4:	201f      	movs	r0, #31
 80011b6:	f000 fddc 	bl	8001d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80011ba:	201f      	movs	r0, #31
 80011bc:	f000 fdf5 	bl	8001daa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2100      	movs	r1, #0
 80011c4:	2020      	movs	r0, #32
 80011c6:	f000 fdd4 	bl	8001d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80011ca:	2020      	movs	r0, #32
 80011cc:	f000 fded 	bl	8001daa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011d0:	bf00      	nop
 80011d2:	3728      	adds	r7, #40	; 0x28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40005400 	.word	0x40005400
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40020400 	.word	0x40020400

080011e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	; 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a19      	ldr	r2, [pc, #100]	; (8001268 <HAL_SPI_MspInit+0x84>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d12b      	bne.n	800125e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <HAL_SPI_MspInit+0x88>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	4a17      	ldr	r2, [pc, #92]	; (800126c <HAL_SPI_MspInit+0x88>)
 8001210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001214:	6413      	str	r3, [r2, #64]	; 0x40
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <HAL_SPI_MspInit+0x88>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <HAL_SPI_MspInit+0x88>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a10      	ldr	r2, [pc, #64]	; (800126c <HAL_SPI_MspInit+0x88>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <HAL_SPI_MspInit+0x88>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800123e:	2338      	movs	r3, #56	; 0x38
 8001240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001242:	2302      	movs	r3, #2
 8001244:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124a:	2303      	movs	r3, #3
 800124c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800124e:	2306      	movs	r3, #6
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	4619      	mov	r1, r3
 8001258:	4805      	ldr	r0, [pc, #20]	; (8001270 <HAL_SPI_MspInit+0x8c>)
 800125a:	f001 f9d1 	bl	8002600 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800125e:	bf00      	nop
 8001260:	3728      	adds	r7, #40	; 0x28
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40003c00 	.word	0x40003c00
 800126c:	40023800 	.word	0x40023800
 8001270:	40020400 	.word	0x40020400

08001274 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001294:	d15d      	bne.n	8001352 <HAL_TIM_Base_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	4b3d      	ldr	r3, [pc, #244]	; (8001390 <HAL_TIM_Base_MspInit+0x11c>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	4a3c      	ldr	r2, [pc, #240]	; (8001390 <HAL_TIM_Base_MspInit+0x11c>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6413      	str	r3, [r2, #64]	; 0x40
 80012a6:	4b3a      	ldr	r3, [pc, #232]	; (8001390 <HAL_TIM_Base_MspInit+0x11c>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	4b36      	ldr	r3, [pc, #216]	; (8001390 <HAL_TIM_Base_MspInit+0x11c>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a35      	ldr	r2, [pc, #212]	; (8001390 <HAL_TIM_Base_MspInit+0x11c>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b33      	ldr	r3, [pc, #204]	; (8001390 <HAL_TIM_Base_MspInit+0x11c>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012ce:	2301      	movs	r3, #1
 80012d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	2300      	movs	r3, #0
 80012dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012de:	2301      	movs	r3, #1
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4619      	mov	r1, r3
 80012e8:	482a      	ldr	r0, [pc, #168]	; (8001394 <HAL_TIM_Base_MspInit+0x120>)
 80012ea:	f001 f989 	bl	8002600 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 80012ee:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <HAL_TIM_Base_MspInit+0x124>)
 80012f0:	4a2a      	ldr	r2, [pc, #168]	; (800139c <HAL_TIM_Base_MspInit+0x128>)
 80012f2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 80012f4:	4b28      	ldr	r3, [pc, #160]	; (8001398 <HAL_TIM_Base_MspInit+0x124>)
 80012f6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80012fa:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012fc:	4b26      	ldr	r3, [pc, #152]	; (8001398 <HAL_TIM_Base_MspInit+0x124>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001302:	4b25      	ldr	r3, [pc, #148]	; (8001398 <HAL_TIM_Base_MspInit+0x124>)
 8001304:	2200      	movs	r2, #0
 8001306:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001308:	4b23      	ldr	r3, [pc, #140]	; (8001398 <HAL_TIM_Base_MspInit+0x124>)
 800130a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800130e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001310:	4b21      	ldr	r3, [pc, #132]	; (8001398 <HAL_TIM_Base_MspInit+0x124>)
 8001312:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001316:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001318:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <HAL_TIM_Base_MspInit+0x124>)
 800131a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800131e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001320:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <HAL_TIM_Base_MspInit+0x124>)
 8001322:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001326:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001328:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <HAL_TIM_Base_MspInit+0x124>)
 800132a:	2200      	movs	r2, #0
 800132c:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800132e:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <HAL_TIM_Base_MspInit+0x124>)
 8001330:	2200      	movs	r2, #0
 8001332:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001334:	4818      	ldr	r0, [pc, #96]	; (8001398 <HAL_TIM_Base_MspInit+0x124>)
 8001336:	f000 fd53 	bl	8001de0 <HAL_DMA_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 8001340:	f7ff fe78 	bl	8001034 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a14      	ldr	r2, [pc, #80]	; (8001398 <HAL_TIM_Base_MspInit+0x124>)
 8001348:	625a      	str	r2, [r3, #36]	; 0x24
 800134a:	4a13      	ldr	r2, [pc, #76]	; (8001398 <HAL_TIM_Base_MspInit+0x124>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001350:	e01a      	b.n	8001388 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM11)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <HAL_TIM_Base_MspInit+0x12c>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d115      	bne.n	8001388 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800135c:	2300      	movs	r3, #0
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <HAL_TIM_Base_MspInit+0x11c>)
 8001362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001364:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <HAL_TIM_Base_MspInit+0x11c>)
 8001366:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800136a:	6453      	str	r3, [r2, #68]	; 0x44
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <HAL_TIM_Base_MspInit+0x11c>)
 800136e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001370:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001378:	2200      	movs	r2, #0
 800137a:	2100      	movs	r1, #0
 800137c:	201a      	movs	r0, #26
 800137e:	f000 fcf8 	bl	8001d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001382:	201a      	movs	r0, #26
 8001384:	f000 fd11 	bl	8001daa <HAL_NVIC_EnableIRQ>
}
 8001388:	bf00      	nop
 800138a:	3728      	adds	r7, #40	; 0x28
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40023800 	.word	0x40023800
 8001394:	40020000 	.word	0x40020000
 8001398:	20000244 	.word	0x20000244
 800139c:	40026088 	.word	0x40026088
 80013a0:	40014800 	.word	0x40014800

080013a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a1d      	ldr	r2, [pc, #116]	; (8001438 <HAL_UART_MspInit+0x94>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d133      	bne.n	800142e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	4b1c      	ldr	r3, [pc, #112]	; (800143c <HAL_UART_MspInit+0x98>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	4a1b      	ldr	r2, [pc, #108]	; (800143c <HAL_UART_MspInit+0x98>)
 80013d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d4:	6413      	str	r3, [r2, #64]	; 0x40
 80013d6:	4b19      	ldr	r3, [pc, #100]	; (800143c <HAL_UART_MspInit+0x98>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <HAL_UART_MspInit+0x98>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a14      	ldr	r2, [pc, #80]	; (800143c <HAL_UART_MspInit+0x98>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_UART_MspInit+0x98>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013fe:	230c      	movs	r3, #12
 8001400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	2302      	movs	r3, #2
 8001404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140a:	2303      	movs	r3, #3
 800140c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800140e:	2307      	movs	r3, #7
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4619      	mov	r1, r3
 8001418:	4809      	ldr	r0, [pc, #36]	; (8001440 <HAL_UART_MspInit+0x9c>)
 800141a:	f001 f8f1 	bl	8002600 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2100      	movs	r1, #0
 8001422:	2026      	movs	r0, #38	; 0x26
 8001424:	f000 fca5 	bl	8001d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001428:	2026      	movs	r0, #38	; 0x26
 800142a:	f000 fcbe 	bl	8001daa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800142e:	bf00      	nop
 8001430:	3728      	adds	r7, #40	; 0x28
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40004400 	.word	0x40004400
 800143c:	40023800 	.word	0x40023800
 8001440:	40020000 	.word	0x40020000

08001444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <NMI_Handler+0x4>

0800144a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144e:	e7fe      	b.n	800144e <HardFault_Handler+0x4>

08001450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <MemManage_Handler+0x4>

08001456 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145a:	e7fe      	b.n	800145a <BusFault_Handler+0x4>

0800145c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <UsageFault_Handler+0x4>

08001462 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001490:	f000 f902 	bl	8001698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}

08001498 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 800149c:	4802      	ldr	r0, [pc, #8]	; (80014a8 <DMA1_Stream5_IRQHandler+0x10>)
 800149e:	f000 fe37 	bl	8002110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000244 	.word	0x20000244

080014ac <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80014b0:	4802      	ldr	r0, [pc, #8]	; (80014bc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80014b2:	f004 f9c7 	bl	8005844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	2000039c 	.word	0x2000039c

080014c0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80014c4:	4802      	ldr	r0, [pc, #8]	; (80014d0 <I2C1_EV_IRQHandler+0x10>)
 80014c6:	f001 fced 	bl	8002ea4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200002a4 	.word	0x200002a4

080014d4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <I2C1_ER_IRQHandler+0x10>)
 80014da:	f001 fe54 	bl	8003186 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200002a4 	.word	0x200002a4

080014e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <USART2_IRQHandler+0x10>)
 80014ee:	f005 f921 	bl	8006734 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	2000048c 	.word	0x2000048c

080014fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001500:	4802      	ldr	r0, [pc, #8]	; (800150c <DMA2_Stream0_IRQHandler+0x10>)
 8001502:	f000 fe05 	bl	8002110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200003e4 	.word	0x200003e4

08001510 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001518:	4a14      	ldr	r2, [pc, #80]	; (800156c <_sbrk+0x5c>)
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <_sbrk+0x60>)
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001524:	4b13      	ldr	r3, [pc, #76]	; (8001574 <_sbrk+0x64>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d102      	bne.n	8001532 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <_sbrk+0x64>)
 800152e:	4a12      	ldr	r2, [pc, #72]	; (8001578 <_sbrk+0x68>)
 8001530:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <_sbrk+0x64>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	429a      	cmp	r2, r3
 800153e:	d207      	bcs.n	8001550 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001540:	f005 ffb0 	bl	80074a4 <__errno>
 8001544:	4603      	mov	r3, r0
 8001546:	220c      	movs	r2, #12
 8001548:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800154a:	f04f 33ff 	mov.w	r3, #4294967295
 800154e:	e009      	b.n	8001564 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <_sbrk+0x64>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001556:	4b07      	ldr	r3, [pc, #28]	; (8001574 <_sbrk+0x64>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	4a05      	ldr	r2, [pc, #20]	; (8001574 <_sbrk+0x64>)
 8001560:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001562:	68fb      	ldr	r3, [r7, #12]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20020000 	.word	0x20020000
 8001570:	00000400 	.word	0x00000400
 8001574:	20000238 	.word	0x20000238
 8001578:	200004e8 	.word	0x200004e8

0800157c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <SystemInit+0x20>)
 8001582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001586:	4a05      	ldr	r2, [pc, #20]	; (800159c <SystemInit+0x20>)
 8001588:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800158c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015a4:	480d      	ldr	r0, [pc, #52]	; (80015dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015a6:	490e      	ldr	r1, [pc, #56]	; (80015e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015a8:	4a0e      	ldr	r2, [pc, #56]	; (80015e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ac:	e002      	b.n	80015b4 <LoopCopyDataInit>

080015ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015b2:	3304      	adds	r3, #4

080015b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b8:	d3f9      	bcc.n	80015ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ba:	4a0b      	ldr	r2, [pc, #44]	; (80015e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015bc:	4c0b      	ldr	r4, [pc, #44]	; (80015ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80015be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c0:	e001      	b.n	80015c6 <LoopFillZerobss>

080015c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c4:	3204      	adds	r2, #4

080015c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c8:	d3fb      	bcc.n	80015c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015ca:	f7ff ffd7 	bl	800157c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ce:	f005 ff6f 	bl	80074b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015d2:	f7fe ffd9 	bl	8000588 <main>
  bx  lr    
 80015d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e0:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 80015e4:	08007e64 	.word	0x08007e64
  ldr r2, =_sbss
 80015e8:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 80015ec:	200004e4 	.word	0x200004e4

080015f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015f0:	e7fe      	b.n	80015f0 <ADC_IRQHandler>
	...

080015f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015f8:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <HAL_Init+0x40>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a0d      	ldr	r2, [pc, #52]	; (8001634 <HAL_Init+0x40>)
 80015fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001602:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001604:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <HAL_Init+0x40>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <HAL_Init+0x40>)
 800160a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800160e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <HAL_Init+0x40>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a07      	ldr	r2, [pc, #28]	; (8001634 <HAL_Init+0x40>)
 8001616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800161a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800161c:	2003      	movs	r0, #3
 800161e:	f000 fb9d 	bl	8001d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001622:	2000      	movs	r0, #0
 8001624:	f000 f808 	bl	8001638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001628:	f7ff fd0a 	bl	8001040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40023c00 	.word	0x40023c00

08001638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <HAL_InitTick+0x54>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b12      	ldr	r3, [pc, #72]	; (8001690 <HAL_InitTick+0x58>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	4619      	mov	r1, r3
 800164a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800164e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001652:	fbb2 f3f3 	udiv	r3, r2, r3
 8001656:	4618      	mov	r0, r3
 8001658:	f000 fbb5 	bl	8001dc6 <HAL_SYSTICK_Config>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e00e      	b.n	8001684 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b0f      	cmp	r3, #15
 800166a:	d80a      	bhi.n	8001682 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800166c:	2200      	movs	r2, #0
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	f04f 30ff 	mov.w	r0, #4294967295
 8001674:	f000 fb7d 	bl	8001d72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001678:	4a06      	ldr	r2, [pc, #24]	; (8001694 <HAL_InitTick+0x5c>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800167e:	2300      	movs	r3, #0
 8001680:	e000      	b.n	8001684 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
}
 8001684:	4618      	mov	r0, r3
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	200000f8 	.word	0x200000f8
 8001690:	20000100 	.word	0x20000100
 8001694:	200000fc 	.word	0x200000fc

08001698 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <HAL_IncTick+0x20>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <HAL_IncTick+0x24>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4413      	add	r3, r2
 80016a8:	4a04      	ldr	r2, [pc, #16]	; (80016bc <HAL_IncTick+0x24>)
 80016aa:	6013      	str	r3, [r2, #0]
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	20000100 	.word	0x20000100
 80016bc:	200004d0 	.word	0x200004d0

080016c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return uwTick;
 80016c4:	4b03      	ldr	r3, [pc, #12]	; (80016d4 <HAL_GetTick+0x14>)
 80016c6:	681b      	ldr	r3, [r3, #0]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	200004d0 	.word	0x200004d0

080016d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e033      	b.n	8001756 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d109      	bne.n	800170a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff fcca 	bl	8001090 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	f003 0310 	and.w	r3, r3, #16
 8001712:	2b00      	cmp	r3, #0
 8001714:	d118      	bne.n	8001748 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800171e:	f023 0302 	bic.w	r3, r3, #2
 8001722:	f043 0202 	orr.w	r2, r3, #2
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f94a 	bl	80019c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f023 0303 	bic.w	r3, r3, #3
 800173e:	f043 0201 	orr.w	r2, r3, #1
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	641a      	str	r2, [r3, #64]	; 0x40
 8001746:	e001      	b.n	800174c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001754:	7bfb      	ldrb	r3, [r7, #15]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800176a:	2300      	movs	r3, #0
 800176c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001774:	2b01      	cmp	r3, #1
 8001776:	d101      	bne.n	800177c <HAL_ADC_ConfigChannel+0x1c>
 8001778:	2302      	movs	r3, #2
 800177a:	e113      	b.n	80019a4 <HAL_ADC_ConfigChannel+0x244>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b09      	cmp	r3, #9
 800178a:	d925      	bls.n	80017d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	68d9      	ldr	r1, [r3, #12]
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	b29b      	uxth	r3, r3
 8001798:	461a      	mov	r2, r3
 800179a:	4613      	mov	r3, r2
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	4413      	add	r3, r2
 80017a0:	3b1e      	subs	r3, #30
 80017a2:	2207      	movs	r2, #7
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43da      	mvns	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	400a      	ands	r2, r1
 80017b0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68d9      	ldr	r1, [r3, #12]
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	4618      	mov	r0, r3
 80017c4:	4603      	mov	r3, r0
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	4403      	add	r3, r0
 80017ca:	3b1e      	subs	r3, #30
 80017cc:	409a      	lsls	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	e022      	b.n	800181e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6919      	ldr	r1, [r3, #16]
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	461a      	mov	r2, r3
 80017e6:	4613      	mov	r3, r2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	2207      	movs	r2, #7
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43da      	mvns	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	400a      	ands	r2, r1
 80017fa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6919      	ldr	r1, [r3, #16]
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	b29b      	uxth	r3, r3
 800180c:	4618      	mov	r0, r3
 800180e:	4603      	mov	r3, r0
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	4403      	add	r3, r0
 8001814:	409a      	lsls	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b06      	cmp	r3, #6
 8001824:	d824      	bhi.n	8001870 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	3b05      	subs	r3, #5
 8001838:	221f      	movs	r2, #31
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43da      	mvns	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	400a      	ands	r2, r1
 8001846:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	b29b      	uxth	r3, r3
 8001854:	4618      	mov	r0, r3
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	3b05      	subs	r3, #5
 8001862:	fa00 f203 	lsl.w	r2, r0, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	635a      	str	r2, [r3, #52]	; 0x34
 800186e:	e04c      	b.n	800190a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b0c      	cmp	r3, #12
 8001876:	d824      	bhi.n	80018c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	4613      	mov	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	3b23      	subs	r3, #35	; 0x23
 800188a:	221f      	movs	r2, #31
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	43da      	mvns	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	400a      	ands	r2, r1
 8001898:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	4618      	mov	r0, r3
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	3b23      	subs	r3, #35	; 0x23
 80018b4:	fa00 f203 	lsl.w	r2, r0, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	430a      	orrs	r2, r1
 80018be:	631a      	str	r2, [r3, #48]	; 0x30
 80018c0:	e023      	b.n	800190a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	3b41      	subs	r3, #65	; 0x41
 80018d4:	221f      	movs	r2, #31
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43da      	mvns	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	400a      	ands	r2, r1
 80018e2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	4618      	mov	r0, r3
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685a      	ldr	r2, [r3, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	3b41      	subs	r3, #65	; 0x41
 80018fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800190a:	4b29      	ldr	r3, [pc, #164]	; (80019b0 <HAL_ADC_ConfigChannel+0x250>)
 800190c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a28      	ldr	r2, [pc, #160]	; (80019b4 <HAL_ADC_ConfigChannel+0x254>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d10f      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x1d8>
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b12      	cmp	r3, #18
 800191e:	d10b      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a1d      	ldr	r2, [pc, #116]	; (80019b4 <HAL_ADC_ConfigChannel+0x254>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d12b      	bne.n	800199a <HAL_ADC_ConfigChannel+0x23a>
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a1c      	ldr	r2, [pc, #112]	; (80019b8 <HAL_ADC_ConfigChannel+0x258>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d003      	beq.n	8001954 <HAL_ADC_ConfigChannel+0x1f4>
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b11      	cmp	r3, #17
 8001952:	d122      	bne.n	800199a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a11      	ldr	r2, [pc, #68]	; (80019b8 <HAL_ADC_ConfigChannel+0x258>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d111      	bne.n	800199a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001976:	4b11      	ldr	r3, [pc, #68]	; (80019bc <HAL_ADC_ConfigChannel+0x25c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a11      	ldr	r2, [pc, #68]	; (80019c0 <HAL_ADC_ConfigChannel+0x260>)
 800197c:	fba2 2303 	umull	r2, r3, r2, r3
 8001980:	0c9a      	lsrs	r2, r3, #18
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800198c:	e002      	b.n	8001994 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	3b01      	subs	r3, #1
 8001992:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f9      	bne.n	800198e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	40012300 	.word	0x40012300
 80019b4:	40012000 	.word	0x40012000
 80019b8:	10000012 	.word	0x10000012
 80019bc:	200000f8 	.word	0x200000f8
 80019c0:	431bde83 	.word	0x431bde83

080019c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019cc:	4b79      	ldr	r3, [pc, #484]	; (8001bb4 <ADC_Init+0x1f0>)
 80019ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	431a      	orrs	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6859      	ldr	r1, [r3, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	021a      	lsls	r2, r3, #8
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6859      	ldr	r1, [r3, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6899      	ldr	r1, [r3, #8]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68da      	ldr	r2, [r3, #12]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a56:	4a58      	ldr	r2, [pc, #352]	; (8001bb8 <ADC_Init+0x1f4>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d022      	beq.n	8001aa2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689a      	ldr	r2, [r3, #8]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6899      	ldr	r1, [r3, #8]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6899      	ldr	r1, [r3, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	e00f      	b.n	8001ac2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ab0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ac0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0202 	bic.w	r2, r2, #2
 8001ad0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6899      	ldr	r1, [r3, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	7e1b      	ldrb	r3, [r3, #24]
 8001adc:	005a      	lsls	r2, r3, #1
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d01b      	beq.n	8001b28 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001afe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6859      	ldr	r1, [r3, #4]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	035a      	lsls	r2, r3, #13
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	e007      	b.n	8001b38 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	051a      	lsls	r2, r3, #20
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6899      	ldr	r1, [r3, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b7a:	025a      	lsls	r2, r3, #9
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6899      	ldr	r1, [r3, #8]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	029a      	lsls	r2, r3, #10
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	609a      	str	r2, [r3, #8]
}
 8001ba8:	bf00      	nop
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	40012300 	.word	0x40012300
 8001bb8:	0f000001 	.word	0x0f000001

08001bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <__NVIC_SetPriorityGrouping+0x44>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bee:	4a04      	ldr	r2, [pc, #16]	; (8001c00 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	60d3      	str	r3, [r2, #12]
}
 8001bf4:	bf00      	nop
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c08:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <__NVIC_GetPriorityGrouping+0x18>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	0a1b      	lsrs	r3, r3, #8
 8001c0e:	f003 0307 	and.w	r3, r3, #7
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	db0b      	blt.n	8001c4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	f003 021f 	and.w	r2, r3, #31
 8001c38:	4907      	ldr	r1, [pc, #28]	; (8001c58 <__NVIC_EnableIRQ+0x38>)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	095b      	lsrs	r3, r3, #5
 8001c40:	2001      	movs	r0, #1
 8001c42:	fa00 f202 	lsl.w	r2, r0, r2
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000e100 	.word	0xe000e100

08001c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	6039      	str	r1, [r7, #0]
 8001c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	db0a      	blt.n	8001c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	490c      	ldr	r1, [pc, #48]	; (8001ca8 <__NVIC_SetPriority+0x4c>)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	0112      	lsls	r2, r2, #4
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	440b      	add	r3, r1
 8001c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c84:	e00a      	b.n	8001c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	4908      	ldr	r1, [pc, #32]	; (8001cac <__NVIC_SetPriority+0x50>)
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	3b04      	subs	r3, #4
 8001c94:	0112      	lsls	r2, r2, #4
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	440b      	add	r3, r1
 8001c9a:	761a      	strb	r2, [r3, #24]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000e100 	.word	0xe000e100
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	; 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f1c3 0307 	rsb	r3, r3, #7
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	bf28      	it	cs
 8001cce:	2304      	movcs	r3, #4
 8001cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	2b06      	cmp	r3, #6
 8001cd8:	d902      	bls.n	8001ce0 <NVIC_EncodePriority+0x30>
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3b03      	subs	r3, #3
 8001cde:	e000      	b.n	8001ce2 <NVIC_EncodePriority+0x32>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43da      	mvns	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001d02:	43d9      	mvns	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d08:	4313      	orrs	r3, r2
         );
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3724      	adds	r7, #36	; 0x24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d28:	d301      	bcc.n	8001d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e00f      	b.n	8001d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <SysTick_Config+0x40>)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d36:	210f      	movs	r1, #15
 8001d38:	f04f 30ff 	mov.w	r0, #4294967295
 8001d3c:	f7ff ff8e 	bl	8001c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <SysTick_Config+0x40>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d46:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <SysTick_Config+0x40>)
 8001d48:	2207      	movs	r2, #7
 8001d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	e000e010 	.word	0xe000e010

08001d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff ff29 	bl	8001bbc <__NVIC_SetPriorityGrouping>
}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b086      	sub	sp, #24
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	4603      	mov	r3, r0
 8001d7a:	60b9      	str	r1, [r7, #8]
 8001d7c:	607a      	str	r2, [r7, #4]
 8001d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d84:	f7ff ff3e 	bl	8001c04 <__NVIC_GetPriorityGrouping>
 8001d88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	68b9      	ldr	r1, [r7, #8]
 8001d8e:	6978      	ldr	r0, [r7, #20]
 8001d90:	f7ff ff8e 	bl	8001cb0 <NVIC_EncodePriority>
 8001d94:	4602      	mov	r2, r0
 8001d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff5d 	bl	8001c5c <__NVIC_SetPriority>
}
 8001da2:	bf00      	nop
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	4603      	mov	r3, r0
 8001db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff31 	bl	8001c20 <__NVIC_EnableIRQ>
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff ffa2 	bl	8001d18 <SysTick_Config>
 8001dd4:	4603      	mov	r3, r0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001dec:	f7ff fc68 	bl	80016c0 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e099      	b.n	8001f30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2202      	movs	r2, #2
 8001e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0201 	bic.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e1c:	e00f      	b.n	8001e3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e1e:	f7ff fc4f 	bl	80016c0 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b05      	cmp	r3, #5
 8001e2a:	d908      	bls.n	8001e3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2220      	movs	r2, #32
 8001e30:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2203      	movs	r2, #3
 8001e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e078      	b.n	8001f30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1e8      	bne.n	8001e1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	4b38      	ldr	r3, [pc, #224]	; (8001f38 <HAL_DMA_Init+0x158>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d107      	bne.n	8001ea8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f023 0307 	bic.w	r3, r3, #7
 8001ebe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d117      	bne.n	8001f02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00e      	beq.n	8001f02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 fb0f 	bl	8002508 <DMA_CheckFifoParam>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d008      	beq.n	8001f02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2240      	movs	r2, #64	; 0x40
 8001ef4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001efe:	2301      	movs	r3, #1
 8001f00:	e016      	b.n	8001f30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 fac6 	bl	800249c <DMA_CalcBaseAndBitshift>
 8001f10:	4603      	mov	r3, r0
 8001f12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f18:	223f      	movs	r2, #63	; 0x3f
 8001f1a:	409a      	lsls	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	f010803f 	.word	0xf010803f

08001f3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f52:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_DMA_Start_IT+0x26>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e040      	b.n	8001fe4 <HAL_DMA_Start_IT+0xa8>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d12f      	bne.n	8001fd6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2202      	movs	r2, #2
 8001f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68b9      	ldr	r1, [r7, #8]
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f000 fa58 	bl	8002440 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f94:	223f      	movs	r2, #63	; 0x3f
 8001f96:	409a      	lsls	r2, r3
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0216 	orr.w	r2, r2, #22
 8001faa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d007      	beq.n	8001fc4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0208 	orr.w	r2, r2, #8
 8001fc2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	e005      	b.n	8001fe2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ffa:	f7ff fb61 	bl	80016c0 <HAL_GetTick>
 8001ffe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d008      	beq.n	800201e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2280      	movs	r2, #128	; 0x80
 8002010:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e052      	b.n	80020c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0216 	bic.w	r2, r2, #22
 800202c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	695a      	ldr	r2, [r3, #20]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800203c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	2b00      	cmp	r3, #0
 8002044:	d103      	bne.n	800204e <HAL_DMA_Abort+0x62>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800204a:	2b00      	cmp	r3, #0
 800204c:	d007      	beq.n	800205e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0208 	bic.w	r2, r2, #8
 800205c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0201 	bic.w	r2, r2, #1
 800206c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800206e:	e013      	b.n	8002098 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002070:	f7ff fb26 	bl	80016c0 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b05      	cmp	r3, #5
 800207c:	d90c      	bls.n	8002098 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2220      	movs	r2, #32
 8002082:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2203      	movs	r2, #3
 8002088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e015      	b.n	80020c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1e4      	bne.n	8002070 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020aa:	223f      	movs	r2, #63	; 0x3f
 80020ac:	409a      	lsls	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d004      	beq.n	80020ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2280      	movs	r2, #128	; 0x80
 80020e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e00c      	b.n	8002104 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2205      	movs	r2, #5
 80020ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0201 	bic.w	r2, r2, #1
 8002100:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800211c:	4b92      	ldr	r3, [pc, #584]	; (8002368 <HAL_DMA_IRQHandler+0x258>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a92      	ldr	r2, [pc, #584]	; (800236c <HAL_DMA_IRQHandler+0x25c>)
 8002122:	fba2 2303 	umull	r2, r3, r2, r3
 8002126:	0a9b      	lsrs	r3, r3, #10
 8002128:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213a:	2208      	movs	r2, #8
 800213c:	409a      	lsls	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4013      	ands	r3, r2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d01a      	beq.n	800217c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d013      	beq.n	800217c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0204 	bic.w	r2, r2, #4
 8002162:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002168:	2208      	movs	r2, #8
 800216a:	409a      	lsls	r2, r3
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002174:	f043 0201 	orr.w	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002180:	2201      	movs	r2, #1
 8002182:	409a      	lsls	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4013      	ands	r3, r2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d012      	beq.n	80021b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00b      	beq.n	80021b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219e:	2201      	movs	r2, #1
 80021a0:	409a      	lsls	r2, r3
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021aa:	f043 0202 	orr.w	r2, r3, #2
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b6:	2204      	movs	r2, #4
 80021b8:	409a      	lsls	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4013      	ands	r3, r2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d012      	beq.n	80021e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00b      	beq.n	80021e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d4:	2204      	movs	r2, #4
 80021d6:	409a      	lsls	r2, r3
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e0:	f043 0204 	orr.w	r2, r3, #4
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ec:	2210      	movs	r2, #16
 80021ee:	409a      	lsls	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d043      	beq.n	8002280 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d03c      	beq.n	8002280 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220a:	2210      	movs	r2, #16
 800220c:	409a      	lsls	r2, r3
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d018      	beq.n	8002252 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d108      	bne.n	8002240 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	2b00      	cmp	r3, #0
 8002234:	d024      	beq.n	8002280 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	4798      	blx	r3
 800223e:	e01f      	b.n	8002280 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002244:	2b00      	cmp	r3, #0
 8002246:	d01b      	beq.n	8002280 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	4798      	blx	r3
 8002250:	e016      	b.n	8002280 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d107      	bne.n	8002270 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0208 	bic.w	r2, r2, #8
 800226e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002284:	2220      	movs	r2, #32
 8002286:	409a      	lsls	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4013      	ands	r3, r2
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 808e 	beq.w	80023ae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0310 	and.w	r3, r3, #16
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 8086 	beq.w	80023ae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a6:	2220      	movs	r2, #32
 80022a8:	409a      	lsls	r2, r3
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b05      	cmp	r3, #5
 80022b8:	d136      	bne.n	8002328 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0216 	bic.w	r2, r2, #22
 80022c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	695a      	ldr	r2, [r3, #20]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d103      	bne.n	80022ea <HAL_DMA_IRQHandler+0x1da>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d007      	beq.n	80022fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0208 	bic.w	r2, r2, #8
 80022f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fe:	223f      	movs	r2, #63	; 0x3f
 8002300:	409a      	lsls	r2, r3
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800231a:	2b00      	cmp	r3, #0
 800231c:	d07d      	beq.n	800241a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	4798      	blx	r3
        }
        return;
 8002326:	e078      	b.n	800241a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d01c      	beq.n	8002370 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d108      	bne.n	8002356 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002348:	2b00      	cmp	r3, #0
 800234a:	d030      	beq.n	80023ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	4798      	blx	r3
 8002354:	e02b      	b.n	80023ae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235a:	2b00      	cmp	r3, #0
 800235c:	d027      	beq.n	80023ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	4798      	blx	r3
 8002366:	e022      	b.n	80023ae <HAL_DMA_IRQHandler+0x29e>
 8002368:	200000f8 	.word	0x200000f8
 800236c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10f      	bne.n	800239e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0210 	bic.w	r2, r2, #16
 800238c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d032      	beq.n	800241c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d022      	beq.n	8002408 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2205      	movs	r2, #5
 80023c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0201 	bic.w	r2, r2, #1
 80023d8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	3301      	adds	r3, #1
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d307      	bcc.n	80023f6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1f2      	bne.n	80023da <HAL_DMA_IRQHandler+0x2ca>
 80023f4:	e000      	b.n	80023f8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80023f6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	4798      	blx	r3
 8002418:	e000      	b.n	800241c <HAL_DMA_IRQHandler+0x30c>
        return;
 800241a:	bf00      	nop
    }
  }
}
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop

08002424 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002432:	b2db      	uxtb	r3, r3
}
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
 800244c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800245c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2b40      	cmp	r3, #64	; 0x40
 800246c:	d108      	bne.n	8002480 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800247e:	e007      	b.n	8002490 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	60da      	str	r2, [r3, #12]
}
 8002490:	bf00      	nop
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	3b10      	subs	r3, #16
 80024ac:	4a14      	ldr	r2, [pc, #80]	; (8002500 <DMA_CalcBaseAndBitshift+0x64>)
 80024ae:	fba2 2303 	umull	r2, r3, r2, r3
 80024b2:	091b      	lsrs	r3, r3, #4
 80024b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024b6:	4a13      	ldr	r2, [pc, #76]	; (8002504 <DMA_CalcBaseAndBitshift+0x68>)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4413      	add	r3, r2
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d909      	bls.n	80024de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024d2:	f023 0303 	bic.w	r3, r3, #3
 80024d6:	1d1a      	adds	r2, r3, #4
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	659a      	str	r2, [r3, #88]	; 0x58
 80024dc:	e007      	b.n	80024ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024e6:	f023 0303 	bic.w	r3, r3, #3
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	aaaaaaab 	.word	0xaaaaaaab
 8002504:	08007e18 	.word	0x08007e18

08002508 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d11f      	bne.n	8002562 <DMA_CheckFifoParam+0x5a>
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2b03      	cmp	r3, #3
 8002526:	d856      	bhi.n	80025d6 <DMA_CheckFifoParam+0xce>
 8002528:	a201      	add	r2, pc, #4	; (adr r2, 8002530 <DMA_CheckFifoParam+0x28>)
 800252a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800252e:	bf00      	nop
 8002530:	08002541 	.word	0x08002541
 8002534:	08002553 	.word	0x08002553
 8002538:	08002541 	.word	0x08002541
 800253c:	080025d7 	.word	0x080025d7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d046      	beq.n	80025da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002550:	e043      	b.n	80025da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800255a:	d140      	bne.n	80025de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002560:	e03d      	b.n	80025de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800256a:	d121      	bne.n	80025b0 <DMA_CheckFifoParam+0xa8>
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	2b03      	cmp	r3, #3
 8002570:	d837      	bhi.n	80025e2 <DMA_CheckFifoParam+0xda>
 8002572:	a201      	add	r2, pc, #4	; (adr r2, 8002578 <DMA_CheckFifoParam+0x70>)
 8002574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002578:	08002589 	.word	0x08002589
 800257c:	0800258f 	.word	0x0800258f
 8002580:	08002589 	.word	0x08002589
 8002584:	080025a1 	.word	0x080025a1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	73fb      	strb	r3, [r7, #15]
      break;
 800258c:	e030      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002592:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d025      	beq.n	80025e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800259e:	e022      	b.n	80025e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025a8:	d11f      	bne.n	80025ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025ae:	e01c      	b.n	80025ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d903      	bls.n	80025be <DMA_CheckFifoParam+0xb6>
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d003      	beq.n	80025c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025bc:	e018      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	73fb      	strb	r3, [r7, #15]
      break;
 80025c2:	e015      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00e      	beq.n	80025ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
      break;
 80025d4:	e00b      	b.n	80025ee <DMA_CheckFifoParam+0xe6>
      break;
 80025d6:	bf00      	nop
 80025d8:	e00a      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      break;
 80025da:	bf00      	nop
 80025dc:	e008      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      break;
 80025de:	bf00      	nop
 80025e0:	e006      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      break;
 80025e2:	bf00      	nop
 80025e4:	e004      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      break;
 80025e6:	bf00      	nop
 80025e8:	e002      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80025ea:	bf00      	nop
 80025ec:	e000      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      break;
 80025ee:	bf00      	nop
    }
  } 
  
  return status; 
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop

08002600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002600:	b480      	push	{r7}
 8002602:	b089      	sub	sp, #36	; 0x24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800260a:	2300      	movs	r3, #0
 800260c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800260e:	2300      	movs	r3, #0
 8002610:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002612:	2300      	movs	r3, #0
 8002614:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
 800261a:	e159      	b.n	80028d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800261c:	2201      	movs	r2, #1
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	4013      	ands	r3, r2
 800262e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	429a      	cmp	r2, r3
 8002636:	f040 8148 	bne.w	80028ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	2b01      	cmp	r3, #1
 8002644:	d005      	beq.n	8002652 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800264e:	2b02      	cmp	r3, #2
 8002650:	d130      	bne.n	80026b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	2203      	movs	r2, #3
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43db      	mvns	r3, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4013      	ands	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002688:	2201      	movs	r2, #1
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	091b      	lsrs	r3, r3, #4
 800269e:	f003 0201 	and.w	r2, r3, #1
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	2b03      	cmp	r3, #3
 80026be:	d017      	beq.n	80026f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	2203      	movs	r2, #3
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d123      	bne.n	8002744 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	08da      	lsrs	r2, r3, #3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3208      	adds	r2, #8
 8002704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	220f      	movs	r2, #15
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	08da      	lsrs	r2, r3, #3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3208      	adds	r2, #8
 800273e:	69b9      	ldr	r1, [r7, #24]
 8002740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	2203      	movs	r2, #3
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 0203 	and.w	r2, r3, #3
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 80a2 	beq.w	80028ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	4b57      	ldr	r3, [pc, #348]	; (80028e8 <HAL_GPIO_Init+0x2e8>)
 800278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278e:	4a56      	ldr	r2, [pc, #344]	; (80028e8 <HAL_GPIO_Init+0x2e8>)
 8002790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002794:	6453      	str	r3, [r2, #68]	; 0x44
 8002796:	4b54      	ldr	r3, [pc, #336]	; (80028e8 <HAL_GPIO_Init+0x2e8>)
 8002798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027a2:	4a52      	ldr	r2, [pc, #328]	; (80028ec <HAL_GPIO_Init+0x2ec>)
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	089b      	lsrs	r3, r3, #2
 80027a8:	3302      	adds	r3, #2
 80027aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	220f      	movs	r2, #15
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43db      	mvns	r3, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4013      	ands	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a49      	ldr	r2, [pc, #292]	; (80028f0 <HAL_GPIO_Init+0x2f0>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d019      	beq.n	8002802 <HAL_GPIO_Init+0x202>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a48      	ldr	r2, [pc, #288]	; (80028f4 <HAL_GPIO_Init+0x2f4>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d013      	beq.n	80027fe <HAL_GPIO_Init+0x1fe>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a47      	ldr	r2, [pc, #284]	; (80028f8 <HAL_GPIO_Init+0x2f8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d00d      	beq.n	80027fa <HAL_GPIO_Init+0x1fa>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a46      	ldr	r2, [pc, #280]	; (80028fc <HAL_GPIO_Init+0x2fc>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d007      	beq.n	80027f6 <HAL_GPIO_Init+0x1f6>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a45      	ldr	r2, [pc, #276]	; (8002900 <HAL_GPIO_Init+0x300>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d101      	bne.n	80027f2 <HAL_GPIO_Init+0x1f2>
 80027ee:	2304      	movs	r3, #4
 80027f0:	e008      	b.n	8002804 <HAL_GPIO_Init+0x204>
 80027f2:	2307      	movs	r3, #7
 80027f4:	e006      	b.n	8002804 <HAL_GPIO_Init+0x204>
 80027f6:	2303      	movs	r3, #3
 80027f8:	e004      	b.n	8002804 <HAL_GPIO_Init+0x204>
 80027fa:	2302      	movs	r3, #2
 80027fc:	e002      	b.n	8002804 <HAL_GPIO_Init+0x204>
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <HAL_GPIO_Init+0x204>
 8002802:	2300      	movs	r3, #0
 8002804:	69fa      	ldr	r2, [r7, #28]
 8002806:	f002 0203 	and.w	r2, r2, #3
 800280a:	0092      	lsls	r2, r2, #2
 800280c:	4093      	lsls	r3, r2
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002814:	4935      	ldr	r1, [pc, #212]	; (80028ec <HAL_GPIO_Init+0x2ec>)
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	089b      	lsrs	r3, r3, #2
 800281a:	3302      	adds	r3, #2
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002822:	4b38      	ldr	r3, [pc, #224]	; (8002904 <HAL_GPIO_Init+0x304>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	43db      	mvns	r3, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4013      	ands	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002846:	4a2f      	ldr	r2, [pc, #188]	; (8002904 <HAL_GPIO_Init+0x304>)
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800284c:	4b2d      	ldr	r3, [pc, #180]	; (8002904 <HAL_GPIO_Init+0x304>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002870:	4a24      	ldr	r2, [pc, #144]	; (8002904 <HAL_GPIO_Init+0x304>)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002876:	4b23      	ldr	r3, [pc, #140]	; (8002904 <HAL_GPIO_Init+0x304>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	43db      	mvns	r3, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4013      	ands	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800289a:	4a1a      	ldr	r2, [pc, #104]	; (8002904 <HAL_GPIO_Init+0x304>)
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028a0:	4b18      	ldr	r3, [pc, #96]	; (8002904 <HAL_GPIO_Init+0x304>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028c4:	4a0f      	ldr	r2, [pc, #60]	; (8002904 <HAL_GPIO_Init+0x304>)
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	3301      	adds	r3, #1
 80028ce:	61fb      	str	r3, [r7, #28]
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	2b0f      	cmp	r3, #15
 80028d4:	f67f aea2 	bls.w	800261c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	3724      	adds	r7, #36	; 0x24
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	40023800 	.word	0x40023800
 80028ec:	40013800 	.word	0x40013800
 80028f0:	40020000 	.word	0x40020000
 80028f4:	40020400 	.word	0x40020400
 80028f8:	40020800 	.word	0x40020800
 80028fc:	40020c00 	.word	0x40020c00
 8002900:	40021000 	.word	0x40021000
 8002904:	40013c00 	.word	0x40013c00

08002908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	807b      	strh	r3, [r7, #2]
 8002914:	4613      	mov	r3, r2
 8002916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002918:	787b      	ldrb	r3, [r7, #1]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800291e:	887a      	ldrh	r2, [r7, #2]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002924:	e003      	b.n	800292e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002926:	887b      	ldrh	r3, [r7, #2]
 8002928:	041a      	lsls	r2, r3, #16
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	619a      	str	r2, [r3, #24]
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
	...

0800293c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e12b      	b.n	8002ba6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7fe fbe6 	bl	8001134 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2224      	movs	r2, #36	; 0x24
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0201 	bic.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800298e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800299e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029a0:	f002 fb9e 	bl	80050e0 <HAL_RCC_GetPCLK1Freq>
 80029a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4a81      	ldr	r2, [pc, #516]	; (8002bb0 <HAL_I2C_Init+0x274>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d807      	bhi.n	80029c0 <HAL_I2C_Init+0x84>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4a80      	ldr	r2, [pc, #512]	; (8002bb4 <HAL_I2C_Init+0x278>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	bf94      	ite	ls
 80029b8:	2301      	movls	r3, #1
 80029ba:	2300      	movhi	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	e006      	b.n	80029ce <HAL_I2C_Init+0x92>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4a7d      	ldr	r2, [pc, #500]	; (8002bb8 <HAL_I2C_Init+0x27c>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	bf94      	ite	ls
 80029c8:	2301      	movls	r3, #1
 80029ca:	2300      	movhi	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e0e7      	b.n	8002ba6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4a78      	ldr	r2, [pc, #480]	; (8002bbc <HAL_I2C_Init+0x280>)
 80029da:	fba2 2303 	umull	r2, r3, r2, r3
 80029de:	0c9b      	lsrs	r3, r3, #18
 80029e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	4a6a      	ldr	r2, [pc, #424]	; (8002bb0 <HAL_I2C_Init+0x274>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d802      	bhi.n	8002a10 <HAL_I2C_Init+0xd4>
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	e009      	b.n	8002a24 <HAL_I2C_Init+0xe8>
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a16:	fb02 f303 	mul.w	r3, r2, r3
 8002a1a:	4a69      	ldr	r2, [pc, #420]	; (8002bc0 <HAL_I2C_Init+0x284>)
 8002a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a20:	099b      	lsrs	r3, r3, #6
 8002a22:	3301      	adds	r3, #1
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	495c      	ldr	r1, [pc, #368]	; (8002bb0 <HAL_I2C_Init+0x274>)
 8002a40:	428b      	cmp	r3, r1
 8002a42:	d819      	bhi.n	8002a78 <HAL_I2C_Init+0x13c>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	1e59      	subs	r1, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a52:	1c59      	adds	r1, r3, #1
 8002a54:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a58:	400b      	ands	r3, r1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00a      	beq.n	8002a74 <HAL_I2C_Init+0x138>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	1e59      	subs	r1, r3, #1
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a72:	e051      	b.n	8002b18 <HAL_I2C_Init+0x1dc>
 8002a74:	2304      	movs	r3, #4
 8002a76:	e04f      	b.n	8002b18 <HAL_I2C_Init+0x1dc>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d111      	bne.n	8002aa4 <HAL_I2C_Init+0x168>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	1e58      	subs	r0, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6859      	ldr	r1, [r3, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	440b      	add	r3, r1
 8002a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a92:	3301      	adds	r3, #1
 8002a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	bf0c      	ite	eq
 8002a9c:	2301      	moveq	r3, #1
 8002a9e:	2300      	movne	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	e012      	b.n	8002aca <HAL_I2C_Init+0x18e>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1e58      	subs	r0, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6859      	ldr	r1, [r3, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	0099      	lsls	r1, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aba:	3301      	adds	r3, #1
 8002abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	bf0c      	ite	eq
 8002ac4:	2301      	moveq	r3, #1
 8002ac6:	2300      	movne	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <HAL_I2C_Init+0x196>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e022      	b.n	8002b18 <HAL_I2C_Init+0x1dc>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10e      	bne.n	8002af8 <HAL_I2C_Init+0x1bc>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	1e58      	subs	r0, r3, #1
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6859      	ldr	r1, [r3, #4]
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	440b      	add	r3, r1
 8002ae8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aec:	3301      	adds	r3, #1
 8002aee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002af6:	e00f      	b.n	8002b18 <HAL_I2C_Init+0x1dc>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	1e58      	subs	r0, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6859      	ldr	r1, [r3, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	0099      	lsls	r1, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b0e:	3301      	adds	r3, #1
 8002b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	6809      	ldr	r1, [r1, #0]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69da      	ldr	r2, [r3, #28]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6911      	ldr	r1, [r2, #16]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	68d2      	ldr	r2, [r2, #12]
 8002b52:	4311      	orrs	r1, r2
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6812      	ldr	r2, [r2, #0]
 8002b58:	430b      	orrs	r3, r1
 8002b5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	695a      	ldr	r2, [r3, #20]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 0201 	orr.w	r2, r2, #1
 8002b86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	000186a0 	.word	0x000186a0
 8002bb4:	001e847f 	.word	0x001e847f
 8002bb8:	003d08ff 	.word	0x003d08ff
 8002bbc:	431bde83 	.word	0x431bde83
 8002bc0:	10624dd3 	.word	0x10624dd3

08002bc4 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b087      	sub	sp, #28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	4608      	mov	r0, r1
 8002bce:	4611      	mov	r1, r2
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	817b      	strh	r3, [r7, #10]
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	813b      	strh	r3, [r7, #8]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b20      	cmp	r3, #32
 8002bec:	f040 808e 	bne.w	8002d0c <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002bf0:	4b4a      	ldr	r3, [pc, #296]	; (8002d1c <HAL_I2C_Mem_Write_IT+0x158>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	08db      	lsrs	r3, r3, #3
 8002bf6:	4a4a      	ldr	r2, [pc, #296]	; (8002d20 <HAL_I2C_Mem_Write_IT+0x15c>)
 8002bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfc:	0a1a      	lsrs	r2, r3, #8
 8002bfe:	4613      	mov	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	009a      	lsls	r2, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d116      	bne.n	8002c44 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	f043 0220 	orr.w	r2, r3, #32
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e064      	b.n	8002d0e <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d0db      	beq.n	8002c0a <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d101      	bne.n	8002c60 <HAL_I2C_Mem_Write_IT+0x9c>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	e056      	b.n	8002d0e <HAL_I2C_Mem_Write_IT+0x14a>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d007      	beq.n	8002c86 <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f042 0201 	orr.w	r2, r2, #1
 8002c84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c94:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2221      	movs	r2, #33	; 0x21
 8002c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2240      	movs	r2, #64	; 0x40
 8002ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a3a      	ldr	r2, [r7, #32]
 8002cb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	4a17      	ldr	r2, [pc, #92]	; (8002d24 <HAL_I2C_Mem_Write_IT+0x160>)
 8002cc6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002cc8:	897a      	ldrh	r2, [r7, #10]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8002cce:	893a      	ldrh	r2, [r7, #8]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002cd4:	88fa      	ldrh	r2, [r7, #6]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cee:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002d06:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	e000      	b.n	8002d0e <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002d0c:	2302      	movs	r3, #2
  }
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	371c      	adds	r7, #28
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	200000f8 	.word	0x200000f8
 8002d20:	14f8b589 	.word	0x14f8b589
 8002d24:	ffff0000 	.word	0xffff0000

08002d28 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	4608      	mov	r0, r1
 8002d32:	4611      	mov	r1, r2
 8002d34:	461a      	mov	r2, r3
 8002d36:	4603      	mov	r3, r0
 8002d38:	817b      	strh	r3, [r7, #10]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	813b      	strh	r3, [r7, #8]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b20      	cmp	r3, #32
 8002d50:	f040 809a 	bne.w	8002e88 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d54:	4b50      	ldr	r3, [pc, #320]	; (8002e98 <HAL_I2C_Mem_Read_IT+0x170>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	08db      	lsrs	r3, r3, #3
 8002d5a:	4a50      	ldr	r2, [pc, #320]	; (8002e9c <HAL_I2C_Mem_Read_IT+0x174>)
 8002d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d60:	0a1a      	lsrs	r2, r3, #8
 8002d62:	4613      	mov	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	009a      	lsls	r2, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	3b01      	subs	r3, #1
 8002d72:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d116      	bne.n	8002da8 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2220      	movs	r2, #32
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	f043 0220 	orr.w	r2, r3, #32
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e070      	b.n	8002e8a <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d0db      	beq.n	8002d6e <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_I2C_Mem_Read_IT+0x9c>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e062      	b.n	8002e8a <HAL_I2C_Mem_Read_IT+0x162>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d007      	beq.n	8002dea <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f042 0201 	orr.w	r2, r2, #1
 8002de8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002df8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2222      	movs	r2, #34	; 0x22
 8002dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2240      	movs	r2, #64	; 0x40
 8002e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a3a      	ldr	r2, [r7, #32]
 8002e14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	4a1d      	ldr	r2, [pc, #116]	; (8002ea0 <HAL_I2C_Mem_Read_IT+0x178>)
 8002e2a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002e2c:	897a      	ldrh	r2, [r7, #10]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8002e32:	893a      	ldrh	r2, [r7, #8]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002e38:	88fa      	ldrh	r2, [r7, #6]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e52:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e62:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d007      	beq.n	8002e84 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002e82:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	e000      	b.n	8002e8a <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8002e88:	2302      	movs	r3, #2
  }
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	371c      	adds	r7, #28
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	200000f8 	.word	0x200000f8
 8002e9c:	14f8b589 	.word	0x14f8b589
 8002ea0:	ffff0000 	.word	0xffff0000

08002ea4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b088      	sub	sp, #32
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ec4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ecc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	2b10      	cmp	r3, #16
 8002ed2:	d003      	beq.n	8002edc <HAL_I2C_EV_IRQHandler+0x38>
 8002ed4:	7bfb      	ldrb	r3, [r7, #15]
 8002ed6:	2b40      	cmp	r3, #64	; 0x40
 8002ed8:	f040 80c1 	bne.w	800305e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10d      	bne.n	8002f12 <HAL_I2C_EV_IRQHandler+0x6e>
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002efc:	d003      	beq.n	8002f06 <HAL_I2C_EV_IRQHandler+0x62>
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002f04:	d101      	bne.n	8002f0a <HAL_I2C_EV_IRQHandler+0x66>
 8002f06:	2301      	movs	r3, #1
 8002f08:	e000      	b.n	8002f0c <HAL_I2C_EV_IRQHandler+0x68>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	f000 8132 	beq.w	8003176 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00c      	beq.n	8002f36 <HAL_I2C_EV_IRQHandler+0x92>
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	0a5b      	lsrs	r3, r3, #9
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d006      	beq.n	8002f36 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f001 fc71 	bl	8004810 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 fd79 	bl	8003a26 <I2C_Master_SB>
 8002f34:	e092      	b.n	800305c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	08db      	lsrs	r3, r3, #3
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d009      	beq.n	8002f56 <HAL_I2C_EV_IRQHandler+0xb2>
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	0a5b      	lsrs	r3, r3, #9
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 fdef 	bl	8003b32 <I2C_Master_ADD10>
 8002f54:	e082      	b.n	800305c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	085b      	lsrs	r3, r3, #1
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d009      	beq.n	8002f76 <HAL_I2C_EV_IRQHandler+0xd2>
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	0a5b      	lsrs	r3, r3, #9
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 fe09 	bl	8003b86 <I2C_Master_ADDR>
 8002f74:	e072      	b.n	800305c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	089b      	lsrs	r3, r3, #2
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d03b      	beq.n	8002ffa <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f90:	f000 80f3 	beq.w	800317a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	09db      	lsrs	r3, r3, #7
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00f      	beq.n	8002fc0 <HAL_I2C_EV_IRQHandler+0x11c>
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	0a9b      	lsrs	r3, r3, #10
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d009      	beq.n	8002fc0 <HAL_I2C_EV_IRQHandler+0x11c>
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	089b      	lsrs	r3, r3, #2
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d103      	bne.n	8002fc0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 f9f3 	bl	80033a4 <I2C_MasterTransmit_TXE>
 8002fbe:	e04d      	b.n	800305c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	089b      	lsrs	r3, r3, #2
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 80d6 	beq.w	800317a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	0a5b      	lsrs	r3, r3, #9
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 80cf 	beq.w	800317a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002fdc:	7bbb      	ldrb	r3, [r7, #14]
 8002fde:	2b21      	cmp	r3, #33	; 0x21
 8002fe0:	d103      	bne.n	8002fea <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 fa7a 	bl	80034dc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fe8:	e0c7      	b.n	800317a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
 8002fec:	2b40      	cmp	r3, #64	; 0x40
 8002fee:	f040 80c4 	bne.w	800317a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 fae8 	bl	80035c8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ff8:	e0bf      	b.n	800317a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003004:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003008:	f000 80b7 	beq.w	800317a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	099b      	lsrs	r3, r3, #6
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00f      	beq.n	8003038 <HAL_I2C_EV_IRQHandler+0x194>
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	0a9b      	lsrs	r3, r3, #10
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b00      	cmp	r3, #0
 8003022:	d009      	beq.n	8003038 <HAL_I2C_EV_IRQHandler+0x194>
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	089b      	lsrs	r3, r3, #2
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d103      	bne.n	8003038 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 fb5d 	bl	80036f0 <I2C_MasterReceive_RXNE>
 8003036:	e011      	b.n	800305c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	089b      	lsrs	r3, r3, #2
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 809a 	beq.w	800317a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	0a5b      	lsrs	r3, r3, #9
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 8093 	beq.w	800317a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 fbfc 	bl	8003852 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800305a:	e08e      	b.n	800317a <HAL_I2C_EV_IRQHandler+0x2d6>
 800305c:	e08d      	b.n	800317a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	2b00      	cmp	r3, #0
 8003064:	d004      	beq.n	8003070 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	61fb      	str	r3, [r7, #28]
 800306e:	e007      	b.n	8003080 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	085b      	lsrs	r3, r3, #1
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	d012      	beq.n	80030b2 <HAL_I2C_EV_IRQHandler+0x20e>
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	0a5b      	lsrs	r3, r3, #9
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00c      	beq.n	80030b2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80030a8:	69b9      	ldr	r1, [r7, #24]
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 ffba 	bl	8004024 <I2C_Slave_ADDR>
 80030b0:	e066      	b.n	8003180 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	091b      	lsrs	r3, r3, #4
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d009      	beq.n	80030d2 <HAL_I2C_EV_IRQHandler+0x22e>
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	0a5b      	lsrs	r3, r3, #9
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 fff4 	bl	80040b8 <I2C_Slave_STOPF>
 80030d0:	e056      	b.n	8003180 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80030d2:	7bbb      	ldrb	r3, [r7, #14]
 80030d4:	2b21      	cmp	r3, #33	; 0x21
 80030d6:	d002      	beq.n	80030de <HAL_I2C_EV_IRQHandler+0x23a>
 80030d8:	7bbb      	ldrb	r3, [r7, #14]
 80030da:	2b29      	cmp	r3, #41	; 0x29
 80030dc:	d125      	bne.n	800312a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	09db      	lsrs	r3, r3, #7
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00f      	beq.n	800310a <HAL_I2C_EV_IRQHandler+0x266>
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	0a9b      	lsrs	r3, r3, #10
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d009      	beq.n	800310a <HAL_I2C_EV_IRQHandler+0x266>
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	089b      	lsrs	r3, r3, #2
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d103      	bne.n	800310a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fed0 	bl	8003ea8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003108:	e039      	b.n	800317e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	089b      	lsrs	r3, r3, #2
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d033      	beq.n	800317e <HAL_I2C_EV_IRQHandler+0x2da>
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	0a5b      	lsrs	r3, r3, #9
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d02d      	beq.n	800317e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 fefd 	bl	8003f22 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003128:	e029      	b.n	800317e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	099b      	lsrs	r3, r3, #6
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00f      	beq.n	8003156 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	0a9b      	lsrs	r3, r3, #10
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d009      	beq.n	8003156 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	089b      	lsrs	r3, r3, #2
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d103      	bne.n	8003156 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 ff08 	bl	8003f64 <I2C_SlaveReceive_RXNE>
 8003154:	e014      	b.n	8003180 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	089b      	lsrs	r3, r3, #2
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00e      	beq.n	8003180 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	0a5b      	lsrs	r3, r3, #9
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d008      	beq.n	8003180 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 ff36 	bl	8003fe0 <I2C_SlaveReceive_BTF>
 8003174:	e004      	b.n	8003180 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003176:	bf00      	nop
 8003178:	e002      	b.n	8003180 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800317a:	bf00      	nop
 800317c:	e000      	b.n	8003180 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800317e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003180:	3720      	adds	r7, #32
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b08a      	sub	sp, #40	; 0x28
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800319e:	2300      	movs	r3, #0
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031a8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	0a1b      	lsrs	r3, r3, #8
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00e      	beq.n	80031d4 <HAL_I2C_ER_IRQHandler+0x4e>
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	0a1b      	lsrs	r3, r3, #8
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d008      	beq.n	80031d4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	f043 0301 	orr.w	r3, r3, #1
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031d2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	0a5b      	lsrs	r3, r3, #9
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00e      	beq.n	80031fe <HAL_I2C_ER_IRQHandler+0x78>
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	0a1b      	lsrs	r3, r3, #8
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d008      	beq.n	80031fe <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	f043 0302 	orr.w	r3, r3, #2
 80031f2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80031fc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80031fe:	6a3b      	ldr	r3, [r7, #32]
 8003200:	0a9b      	lsrs	r3, r3, #10
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d03f      	beq.n	800328a <HAL_I2C_ER_IRQHandler+0x104>
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	0a1b      	lsrs	r3, r3, #8
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d039      	beq.n	800328a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003216:	7efb      	ldrb	r3, [r7, #27]
 8003218:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321e:	b29b      	uxth	r3, r3
 8003220:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003228:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003230:	7ebb      	ldrb	r3, [r7, #26]
 8003232:	2b20      	cmp	r3, #32
 8003234:	d112      	bne.n	800325c <HAL_I2C_ER_IRQHandler+0xd6>
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10f      	bne.n	800325c <HAL_I2C_ER_IRQHandler+0xd6>
 800323c:	7cfb      	ldrb	r3, [r7, #19]
 800323e:	2b21      	cmp	r3, #33	; 0x21
 8003240:	d008      	beq.n	8003254 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003242:	7cfb      	ldrb	r3, [r7, #19]
 8003244:	2b29      	cmp	r3, #41	; 0x29
 8003246:	d005      	beq.n	8003254 <HAL_I2C_ER_IRQHandler+0xce>
 8003248:	7cfb      	ldrb	r3, [r7, #19]
 800324a:	2b28      	cmp	r3, #40	; 0x28
 800324c:	d106      	bne.n	800325c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2b21      	cmp	r3, #33	; 0x21
 8003252:	d103      	bne.n	800325c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f001 f85f 	bl	8004318 <I2C_Slave_AF>
 800325a:	e016      	b.n	800328a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003264:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	f043 0304 	orr.w	r3, r3, #4
 800326c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800326e:	7efb      	ldrb	r3, [r7, #27]
 8003270:	2b10      	cmp	r3, #16
 8003272:	d002      	beq.n	800327a <HAL_I2C_ER_IRQHandler+0xf4>
 8003274:	7efb      	ldrb	r3, [r7, #27]
 8003276:	2b40      	cmp	r3, #64	; 0x40
 8003278:	d107      	bne.n	800328a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003288:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	0adb      	lsrs	r3, r3, #11
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00e      	beq.n	80032b4 <HAL_I2C_ER_IRQHandler+0x12e>
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	0a1b      	lsrs	r3, r3, #8
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d008      	beq.n	80032b4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	f043 0308 	orr.w	r3, r3, #8
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80032b2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d008      	beq.n	80032cc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f001 f896 	bl	80043f8 <I2C_ITError>
  }
}
 80032cc:	bf00      	nop
 80032ce:	3728      	adds	r7, #40	; 0x28
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	70fb      	strb	r3, [r7, #3]
 8003330:	4613      	mov	r3, r2
 8003332:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d150      	bne.n	800346c <I2C_MasterTransmit_TXE+0xc8>
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
 80033cc:	2b21      	cmp	r3, #33	; 0x21
 80033ce:	d14d      	bne.n	800346c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d01d      	beq.n	8003412 <I2C_MasterTransmit_TXE+0x6e>
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b20      	cmp	r3, #32
 80033da:	d01a      	beq.n	8003412 <I2C_MasterTransmit_TXE+0x6e>
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033e2:	d016      	beq.n	8003412 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033f2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2211      	movs	r2, #17
 80033f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2220      	movs	r2, #32
 8003406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7ff ff62 	bl	80032d4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003410:	e060      	b.n	80034d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003420:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003430:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2220      	movs	r2, #32
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b40      	cmp	r3, #64	; 0x40
 800344a:	d107      	bne.n	800345c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff ff7d 	bl	8003354 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800345a:	e03b      	b.n	80034d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7ff ff35 	bl	80032d4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800346a:	e033      	b.n	80034d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800346c:	7bfb      	ldrb	r3, [r7, #15]
 800346e:	2b21      	cmp	r3, #33	; 0x21
 8003470:	d005      	beq.n	800347e <I2C_MasterTransmit_TXE+0xda>
 8003472:	7bbb      	ldrb	r3, [r7, #14]
 8003474:	2b40      	cmp	r3, #64	; 0x40
 8003476:	d12d      	bne.n	80034d4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003478:	7bfb      	ldrb	r3, [r7, #15]
 800347a:	2b22      	cmp	r3, #34	; 0x22
 800347c:	d12a      	bne.n	80034d4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003482:	b29b      	uxth	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	d108      	bne.n	800349a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003496:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003498:	e01c      	b.n	80034d4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b40      	cmp	r3, #64	; 0x40
 80034a4:	d103      	bne.n	80034ae <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f88e 	bl	80035c8 <I2C_MemoryTransmit_TXE_BTF>
}
 80034ac:	e012      	b.n	80034d4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	781a      	ldrb	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80034d2:	e7ff      	b.n	80034d4 <I2C_MasterTransmit_TXE+0x130>
 80034d4:	bf00      	nop
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b21      	cmp	r3, #33	; 0x21
 80034f4:	d164      	bne.n	80035c0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d012      	beq.n	8003526 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	781a      	ldrb	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351a:	b29b      	uxth	r3, r3
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003524:	e04c      	b.n	80035c0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2b08      	cmp	r3, #8
 800352a:	d01d      	beq.n	8003568 <I2C_MasterTransmit_BTF+0x8c>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2b20      	cmp	r3, #32
 8003530:	d01a      	beq.n	8003568 <I2C_MasterTransmit_BTF+0x8c>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003538:	d016      	beq.n	8003568 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003548:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2211      	movs	r2, #17
 800354e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7ff feb7 	bl	80032d4 <HAL_I2C_MasterTxCpltCallback>
}
 8003566:	e02b      	b.n	80035c0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003576:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003586:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2220      	movs	r2, #32
 8003592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b40      	cmp	r3, #64	; 0x40
 80035a0:	d107      	bne.n	80035b2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7ff fed2 	bl	8003354 <HAL_I2C_MemTxCpltCallback>
}
 80035b0:	e006      	b.n	80035c0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7ff fe8a 	bl	80032d4 <HAL_I2C_MasterTxCpltCallback>
}
 80035c0:	bf00      	nop
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d11d      	bne.n	800361c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d10b      	bne.n	8003600 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f8:	1c9a      	adds	r2, r3, #2
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80035fe:	e073      	b.n	80036e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003604:	b29b      	uxth	r3, r3
 8003606:	121b      	asrs	r3, r3, #8
 8003608:	b2da      	uxtb	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	651a      	str	r2, [r3, #80]	; 0x50
}
 800361a:	e065      	b.n	80036e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003620:	2b01      	cmp	r3, #1
 8003622:	d10b      	bne.n	800363c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003628:	b2da      	uxtb	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	651a      	str	r2, [r3, #80]	; 0x50
}
 800363a:	e055      	b.n	80036e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003640:	2b02      	cmp	r3, #2
 8003642:	d151      	bne.n	80036e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003644:	7bfb      	ldrb	r3, [r7, #15]
 8003646:	2b22      	cmp	r3, #34	; 0x22
 8003648:	d10d      	bne.n	8003666 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003658:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003664:	e040      	b.n	80036e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366a:	b29b      	uxth	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	d015      	beq.n	800369c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003670:	7bfb      	ldrb	r3, [r7, #15]
 8003672:	2b21      	cmp	r3, #33	; 0x21
 8003674:	d112      	bne.n	800369c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	781a      	ldrb	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	1c5a      	adds	r2, r3, #1
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003690:	b29b      	uxth	r3, r3
 8003692:	3b01      	subs	r3, #1
 8003694:	b29a      	uxth	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800369a:	e025      	b.n	80036e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d120      	bne.n	80036e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	2b21      	cmp	r3, #33	; 0x21
 80036aa:	d11d      	bne.n	80036e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036ba:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2220      	movs	r2, #32
 80036d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7ff fe36 	bl	8003354 <HAL_I2C_MemTxCpltCallback>
}
 80036e8:	bf00      	nop
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b22      	cmp	r3, #34	; 0x22
 8003702:	f040 80a2 	bne.w	800384a <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370a:	b29b      	uxth	r3, r3
 800370c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2b03      	cmp	r3, #3
 8003712:	d921      	bls.n	8003758 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691a      	ldr	r2, [r3, #16]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003730:	b29b      	uxth	r3, r3
 8003732:	3b01      	subs	r3, #1
 8003734:	b29a      	uxth	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373e:	b29b      	uxth	r3, r3
 8003740:	2b03      	cmp	r3, #3
 8003742:	f040 8082 	bne.w	800384a <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003754:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003756:	e078      	b.n	800384a <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375c:	2b02      	cmp	r3, #2
 800375e:	d074      	beq.n	800384a <I2C_MasterReceive_RXNE+0x15a>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d002      	beq.n	800376c <I2C_MasterReceive_RXNE+0x7c>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d16e      	bne.n	800384a <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f001 f81d 	bl	80047ac <I2C_WaitOnSTOPRequestThroughIT>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d142      	bne.n	80037fe <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003786:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003796:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	691a      	ldr	r2, [r3, #16]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	3b01      	subs	r3, #1
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b40      	cmp	r3, #64	; 0x40
 80037d0:	d10a      	bne.n	80037e8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7ff fdc1 	bl	8003368 <HAL_I2C_MemRxCpltCallback>
}
 80037e6:	e030      	b.n	800384a <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2212      	movs	r2, #18
 80037f4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7ff fd76 	bl	80032e8 <HAL_I2C_MasterRxCpltCallback>
}
 80037fc:	e025      	b.n	800384a <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800380c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	691a      	ldr	r2, [r3, #16]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382a:	b29b      	uxth	r3, r3
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2220      	movs	r2, #32
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7ff fd99 	bl	800337c <HAL_I2C_ErrorCallback>
}
 800384a:	bf00      	nop
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b084      	sub	sp, #16
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b04      	cmp	r3, #4
 8003868:	d11b      	bne.n	80038a2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003878:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	b2d2      	uxtb	r2, r2
 8003886:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	1c5a      	adds	r2, r3, #1
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003896:	b29b      	uxth	r3, r3
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80038a0:	e0bd      	b.n	8003a1e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	2b03      	cmp	r3, #3
 80038aa:	d129      	bne.n	8003900 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ba:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2b04      	cmp	r3, #4
 80038c0:	d00a      	beq.n	80038d8 <I2C_MasterReceive_BTF+0x86>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d007      	beq.n	80038d8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038d6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691a      	ldr	r2, [r3, #16]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80038fe:	e08e      	b.n	8003a1e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003904:	b29b      	uxth	r3, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d176      	bne.n	80039f8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d002      	beq.n	8003916 <I2C_MasterReceive_BTF+0xc4>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2b10      	cmp	r3, #16
 8003914:	d108      	bne.n	8003928 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	e019      	b.n	800395c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2b04      	cmp	r3, #4
 800392c:	d002      	beq.n	8003934 <I2C_MasterReceive_BTF+0xe2>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2b02      	cmp	r3, #2
 8003932:	d108      	bne.n	8003946 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	e00a      	b.n	800395c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2b10      	cmp	r3, #16
 800394a:	d007      	beq.n	800395c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800395a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691a      	ldr	r2, [r3, #16]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003978:	b29b      	uxth	r3, r3
 800397a:	3b01      	subs	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	691a      	ldr	r2, [r3, #16]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	b2d2      	uxtb	r2, r2
 800398e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80039b6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b40      	cmp	r3, #64	; 0x40
 80039ca:	d10a      	bne.n	80039e2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7ff fcc4 	bl	8003368 <HAL_I2C_MemRxCpltCallback>
}
 80039e0:	e01d      	b.n	8003a1e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2212      	movs	r2, #18
 80039ee:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7ff fc79 	bl	80032e8 <HAL_I2C_MasterRxCpltCallback>
}
 80039f6:	e012      	b.n	8003a1e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	691a      	ldr	r2, [r3, #16]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a1e:	bf00      	nop
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b40      	cmp	r3, #64	; 0x40
 8003a38:	d117      	bne.n	8003a6a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d109      	bne.n	8003a56 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	461a      	mov	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a52:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003a54:	e067      	b.n	8003b26 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	611a      	str	r2, [r3, #16]
}
 8003a68:	e05d      	b.n	8003b26 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a72:	d133      	bne.n	8003adc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b21      	cmp	r3, #33	; 0x21
 8003a7e:	d109      	bne.n	8003a94 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	461a      	mov	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a90:	611a      	str	r2, [r3, #16]
 8003a92:	e008      	b.n	8003aa6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	f043 0301 	orr.w	r3, r3, #1
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d004      	beq.n	8003ab8 <I2C_Master_SB+0x92>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d108      	bne.n	8003aca <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d032      	beq.n	8003b26 <I2C_Master_SB+0x100>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d02d      	beq.n	8003b26 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ad8:	605a      	str	r2, [r3, #4]
}
 8003ada:	e024      	b.n	8003b26 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10e      	bne.n	8003b02 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	11db      	asrs	r3, r3, #7
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	f003 0306 	and.w	r3, r3, #6
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	f063 030f 	orn	r3, r3, #15
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	611a      	str	r2, [r3, #16]
}
 8003b00:	e011      	b.n	8003b26 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d10d      	bne.n	8003b26 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	11db      	asrs	r3, r3, #7
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	f003 0306 	and.w	r3, r3, #6
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	f063 030e 	orn	r3, r3, #14
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	611a      	str	r2, [r3, #16]
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d004      	beq.n	8003b58 <I2C_Master_ADD10+0x26>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d108      	bne.n	8003b6a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00c      	beq.n	8003b7a <I2C_Master_ADD10+0x48>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d007      	beq.n	8003b7a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b78:	605a      	str	r2, [r3, #4]
  }
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b091      	sub	sp, #68	; 0x44
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b22      	cmp	r3, #34	; 0x22
 8003bae:	f040 8169 	bne.w	8003e84 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10f      	bne.n	8003bda <I2C_Master_ADDR+0x54>
 8003bba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003bbe:	2b40      	cmp	r3, #64	; 0x40
 8003bc0:	d10b      	bne.n	8003bda <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	633b      	str	r3, [r7, #48]	; 0x30
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	633b      	str	r3, [r7, #48]	; 0x30
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	633b      	str	r3, [r7, #48]	; 0x30
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd8:	e160      	b.n	8003e9c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d11d      	bne.n	8003c1e <I2C_Master_ADDR+0x98>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003bea:	d118      	bne.n	8003c1e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bec:	2300      	movs	r3, #0
 8003bee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c10:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	651a      	str	r2, [r3, #80]	; 0x50
 8003c1c:	e13e      	b.n	8003e9c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d113      	bne.n	8003c50 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c28:	2300      	movs	r3, #0
 8003c2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	e115      	b.n	8003e7c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	f040 808a 	bne.w	8003d70 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c62:	d137      	bne.n	8003cd4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c72:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c82:	d113      	bne.n	8003cac <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c92:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c94:	2300      	movs	r3, #0
 8003c96:	627b      	str	r3, [r7, #36]	; 0x24
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	e0e7      	b.n	8003e7c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cac:	2300      	movs	r3, #0
 8003cae:	623b      	str	r3, [r7, #32]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	623b      	str	r3, [r7, #32]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	623b      	str	r3, [r7, #32]
 8003cc0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	e0d3      	b.n	8003e7c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d02e      	beq.n	8003d38 <I2C_Master_ADDR+0x1b2>
 8003cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cdc:	2b20      	cmp	r3, #32
 8003cde:	d02b      	beq.n	8003d38 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce2:	2b12      	cmp	r3, #18
 8003ce4:	d102      	bne.n	8003cec <I2C_Master_ADDR+0x166>
 8003ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d125      	bne.n	8003d38 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	d00e      	beq.n	8003d10 <I2C_Master_ADDR+0x18a>
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d00b      	beq.n	8003d10 <I2C_Master_ADDR+0x18a>
 8003cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cfa:	2b10      	cmp	r3, #16
 8003cfc:	d008      	beq.n	8003d10 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	e007      	b.n	8003d20 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d1e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d20:	2300      	movs	r3, #0
 8003d22:	61fb      	str	r3, [r7, #28]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	61fb      	str	r3, [r7, #28]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	61fb      	str	r3, [r7, #28]
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	e0a1      	b.n	8003e7c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d46:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d48:	2300      	movs	r3, #0
 8003d4a:	61bb      	str	r3, [r7, #24]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	61bb      	str	r3, [r7, #24]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	61bb      	str	r3, [r7, #24]
 8003d5c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	e085      	b.n	8003e7c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d14d      	bne.n	8003e16 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7c:	2b04      	cmp	r3, #4
 8003d7e:	d016      	beq.n	8003dae <I2C_Master_ADDR+0x228>
 8003d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d013      	beq.n	8003dae <I2C_Master_ADDR+0x228>
 8003d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d88:	2b10      	cmp	r3, #16
 8003d8a:	d010      	beq.n	8003dae <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d9a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	e007      	b.n	8003dbe <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dbc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dcc:	d117      	bne.n	8003dfe <I2C_Master_ADDR+0x278>
 8003dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003dd4:	d00b      	beq.n	8003dee <I2C_Master_ADDR+0x268>
 8003dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d008      	beq.n	8003dee <I2C_Master_ADDR+0x268>
 8003ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dde:	2b08      	cmp	r3, #8
 8003de0:	d005      	beq.n	8003dee <I2C_Master_ADDR+0x268>
 8003de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de4:	2b10      	cmp	r3, #16
 8003de6:	d002      	beq.n	8003dee <I2C_Master_ADDR+0x268>
 8003de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dea:	2b20      	cmp	r3, #32
 8003dec:	d107      	bne.n	8003dfe <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003dfc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dfe:	2300      	movs	r3, #0
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	617b      	str	r3, [r7, #20]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	e032      	b.n	8003e7c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e24:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e34:	d117      	bne.n	8003e66 <I2C_Master_ADDR+0x2e0>
 8003e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e3c:	d00b      	beq.n	8003e56 <I2C_Master_ADDR+0x2d0>
 8003e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d008      	beq.n	8003e56 <I2C_Master_ADDR+0x2d0>
 8003e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e46:	2b08      	cmp	r3, #8
 8003e48:	d005      	beq.n	8003e56 <I2C_Master_ADDR+0x2d0>
 8003e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4c:	2b10      	cmp	r3, #16
 8003e4e:	d002      	beq.n	8003e56 <I2C_Master_ADDR+0x2d0>
 8003e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e52:	2b20      	cmp	r3, #32
 8003e54:	d107      	bne.n	8003e66 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e64:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e66:	2300      	movs	r3, #0
 8003e68:	613b      	str	r3, [r7, #16]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	613b      	str	r3, [r7, #16]
 8003e7a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003e82:	e00b      	b.n	8003e9c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e84:	2300      	movs	r3, #0
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	68fb      	ldr	r3, [r7, #12]
}
 8003e9a:	e7ff      	b.n	8003e9c <I2C_Master_ADDR+0x316>
 8003e9c:	bf00      	nop
 8003e9e:	3744      	adds	r7, #68	; 0x44
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d02b      	beq.n	8003f1a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	781a      	ldrb	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d114      	bne.n	8003f1a <I2C_SlaveTransmit_TXE+0x72>
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
 8003ef2:	2b29      	cmp	r3, #41	; 0x29
 8003ef4:	d111      	bne.n	8003f1a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f04:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2221      	movs	r2, #33	; 0x21
 8003f0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2228      	movs	r2, #40	; 0x28
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7ff f9f1 	bl	80032fc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003f1a:	bf00      	nop
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d011      	beq.n	8003f58 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	781a      	ldrb	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	1c5a      	adds	r2, r3, #1
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f72:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d02c      	beq.n	8003fd8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f90:	1c5a      	adds	r2, r3, #1
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d114      	bne.n	8003fd8 <I2C_SlaveReceive_RXNE+0x74>
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	2b2a      	cmp	r3, #42	; 0x2a
 8003fb2:	d111      	bne.n	8003fd8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fc2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2222      	movs	r2, #34	; 0x22
 8003fc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2228      	movs	r2, #40	; 0x28
 8003fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7ff f99c 	bl	8003310 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003fd8:	bf00      	nop
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d012      	beq.n	8004018 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	691a      	ldr	r2, [r3, #16]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	b2d2      	uxtb	r2, r2
 8003ffe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400e:	b29b      	uxth	r3, r3
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800402e:	2300      	movs	r3, #0
 8004030:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004038:	b2db      	uxtb	r3, r3
 800403a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800403e:	2b28      	cmp	r3, #40	; 0x28
 8004040:	d127      	bne.n	8004092 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004050:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	089b      	lsrs	r3, r3, #2
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800405e:	2301      	movs	r3, #1
 8004060:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	09db      	lsrs	r3, r3, #7
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d103      	bne.n	8004076 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	81bb      	strh	r3, [r7, #12]
 8004074:	e002      	b.n	800407c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004084:	89ba      	ldrh	r2, [r7, #12]
 8004086:	7bfb      	ldrb	r3, [r7, #15]
 8004088:	4619      	mov	r1, r3
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7ff f94a 	bl	8003324 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004090:	e00e      	b.n	80040b0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004092:	2300      	movs	r3, #0
 8004094:	60bb      	str	r3, [r7, #8]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	60bb      	str	r3, [r7, #8]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80040b0:	bf00      	nop
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040d6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80040d8:	2300      	movs	r3, #0
 80040da:	60bb      	str	r3, [r7, #8]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	60bb      	str	r3, [r7, #8]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0201 	orr.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004104:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004110:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004114:	d172      	bne.n	80041fc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004116:	7bfb      	ldrb	r3, [r7, #15]
 8004118:	2b22      	cmp	r3, #34	; 0x22
 800411a:	d002      	beq.n	8004122 <I2C_Slave_STOPF+0x6a>
 800411c:	7bfb      	ldrb	r3, [r7, #15]
 800411e:	2b2a      	cmp	r3, #42	; 0x2a
 8004120:	d135      	bne.n	800418e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	b29a      	uxth	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004134:	b29b      	uxth	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d005      	beq.n	8004146 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	f043 0204 	orr.w	r2, r3, #4
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004154:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415a:	4618      	mov	r0, r3
 800415c:	f7fe f962 	bl	8002424 <HAL_DMA_GetState>
 8004160:	4603      	mov	r3, r0
 8004162:	2b01      	cmp	r3, #1
 8004164:	d049      	beq.n	80041fa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416a:	4a69      	ldr	r2, [pc, #420]	; (8004310 <I2C_Slave_STOPF+0x258>)
 800416c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004172:	4618      	mov	r0, r3
 8004174:	f7fd ffaa 	bl	80020cc <HAL_DMA_Abort_IT>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d03d      	beq.n	80041fa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004188:	4610      	mov	r0, r2
 800418a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800418c:	e035      	b.n	80041fa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	b29a      	uxth	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d005      	beq.n	80041b2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	f043 0204 	orr.w	r2, r3, #4
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041c0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fe f92c 	bl	8002424 <HAL_DMA_GetState>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d014      	beq.n	80041fc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d6:	4a4e      	ldr	r2, [pc, #312]	; (8004310 <I2C_Slave_STOPF+0x258>)
 80041d8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fd ff74 	bl	80020cc <HAL_DMA_Abort_IT>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d008      	beq.n	80041fc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041f4:	4610      	mov	r0, r2
 80041f6:	4798      	blx	r3
 80041f8:	e000      	b.n	80041fc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041fa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d03e      	beq.n	8004284 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b04      	cmp	r3, #4
 8004212:	d112      	bne.n	800423a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	691a      	ldr	r2, [r3, #16]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	1c5a      	adds	r2, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004230:	b29b      	uxth	r3, r3
 8004232:	3b01      	subs	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004244:	2b40      	cmp	r3, #64	; 0x40
 8004246:	d112      	bne.n	800426e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	691a      	ldr	r2, [r3, #16]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004264:	b29b      	uxth	r3, r3
 8004266:	3b01      	subs	r3, #1
 8004268:	b29a      	uxth	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004272:	b29b      	uxth	r3, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	d005      	beq.n	8004284 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	f043 0204 	orr.w	r2, r3, #4
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f8b3 	bl	80043f8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004292:	e039      	b.n	8004308 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004294:	7bfb      	ldrb	r3, [r7, #15]
 8004296:	2b2a      	cmp	r3, #42	; 0x2a
 8004298:	d109      	bne.n	80042ae <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2228      	movs	r2, #40	; 0x28
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7ff f831 	bl	8003310 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b28      	cmp	r3, #40	; 0x28
 80042b8:	d111      	bne.n	80042de <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a15      	ldr	r2, [pc, #84]	; (8004314 <I2C_Slave_STOPF+0x25c>)
 80042be:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2220      	movs	r2, #32
 80042ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7ff f832 	bl	8003340 <HAL_I2C_ListenCpltCallback>
}
 80042dc:	e014      	b.n	8004308 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	2b22      	cmp	r3, #34	; 0x22
 80042e4:	d002      	beq.n	80042ec <I2C_Slave_STOPF+0x234>
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
 80042e8:	2b22      	cmp	r3, #34	; 0x22
 80042ea:	d10d      	bne.n	8004308 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff f804 	bl	8003310 <HAL_I2C_SlaveRxCpltCallback>
}
 8004308:	bf00      	nop
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	0800465d 	.word	0x0800465d
 8004314:	ffff0000 	.word	0xffff0000

08004318 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004326:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	2b08      	cmp	r3, #8
 8004332:	d002      	beq.n	800433a <I2C_Slave_AF+0x22>
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2b20      	cmp	r3, #32
 8004338:	d129      	bne.n	800438e <I2C_Slave_AF+0x76>
 800433a:	7bfb      	ldrb	r3, [r7, #15]
 800433c:	2b28      	cmp	r3, #40	; 0x28
 800433e:	d126      	bne.n	800438e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a2c      	ldr	r2, [pc, #176]	; (80043f4 <I2C_Slave_AF+0xdc>)
 8004344:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004354:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800435e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800436e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2220      	movs	r2, #32
 800437a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7fe ffda 	bl	8003340 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800438c:	e02e      	b.n	80043ec <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800438e:	7bfb      	ldrb	r3, [r7, #15]
 8004390:	2b21      	cmp	r3, #33	; 0x21
 8004392:	d126      	bne.n	80043e2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a17      	ldr	r2, [pc, #92]	; (80043f4 <I2C_Slave_AF+0xdc>)
 8004398:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2221      	movs	r2, #33	; 0x21
 800439e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043be:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043c8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043d8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7fe ff8e 	bl	80032fc <HAL_I2C_SlaveTxCpltCallback>
}
 80043e0:	e004      	b.n	80043ec <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043ea:	615a      	str	r2, [r3, #20]
}
 80043ec:	bf00      	nop
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	ffff0000 	.word	0xffff0000

080043f8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004406:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800440e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004410:	7bbb      	ldrb	r3, [r7, #14]
 8004412:	2b10      	cmp	r3, #16
 8004414:	d002      	beq.n	800441c <I2C_ITError+0x24>
 8004416:	7bbb      	ldrb	r3, [r7, #14]
 8004418:	2b40      	cmp	r3, #64	; 0x40
 800441a:	d10a      	bne.n	8004432 <I2C_ITError+0x3a>
 800441c:	7bfb      	ldrb	r3, [r7, #15]
 800441e:	2b22      	cmp	r3, #34	; 0x22
 8004420:	d107      	bne.n	8004432 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004430:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004432:	7bfb      	ldrb	r3, [r7, #15]
 8004434:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004438:	2b28      	cmp	r3, #40	; 0x28
 800443a:	d107      	bne.n	800444c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2228      	movs	r2, #40	; 0x28
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800444a:	e015      	b.n	8004478 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004456:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800445a:	d00a      	beq.n	8004472 <I2C_ITError+0x7a>
 800445c:	7bfb      	ldrb	r3, [r7, #15]
 800445e:	2b60      	cmp	r3, #96	; 0x60
 8004460:	d007      	beq.n	8004472 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2220      	movs	r2, #32
 8004466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004482:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004486:	d162      	bne.n	800454e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004496:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d020      	beq.n	80044e8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044aa:	4a6a      	ldr	r2, [pc, #424]	; (8004654 <I2C_ITError+0x25c>)
 80044ac:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fd fe0a 	bl	80020cc <HAL_DMA_Abort_IT>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 8089 	beq.w	80045d2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0201 	bic.w	r2, r2, #1
 80044ce:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2220      	movs	r2, #32
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044e2:	4610      	mov	r0, r2
 80044e4:	4798      	blx	r3
 80044e6:	e074      	b.n	80045d2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ec:	4a59      	ldr	r2, [pc, #356]	; (8004654 <I2C_ITError+0x25c>)
 80044ee:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7fd fde9 	bl	80020cc <HAL_DMA_Abort_IT>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d068      	beq.n	80045d2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450a:	2b40      	cmp	r3, #64	; 0x40
 800450c:	d10b      	bne.n	8004526 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004518:	b2d2      	uxtb	r2, r2
 800451a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0201 	bic.w	r2, r2, #1
 8004534:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2220      	movs	r2, #32
 800453a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004548:	4610      	mov	r0, r2
 800454a:	4798      	blx	r3
 800454c:	e041      	b.n	80045d2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b60      	cmp	r3, #96	; 0x60
 8004558:	d125      	bne.n	80045a6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2220      	movs	r2, #32
 800455e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004572:	2b40      	cmp	r3, #64	; 0x40
 8004574:	d10b      	bne.n	800458e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0201 	bic.w	r2, r2, #1
 800459c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7fe fef6 	bl	8003390 <HAL_I2C_AbortCpltCallback>
 80045a4:	e015      	b.n	80045d2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b0:	2b40      	cmp	r3, #64	; 0x40
 80045b2:	d10b      	bne.n	80045cc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	691a      	ldr	r2, [r3, #16]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	b2d2      	uxtb	r2, r2
 80045c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	1c5a      	adds	r2, r3, #1
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f7fe fed5 	bl	800337c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10e      	bne.n	8004600 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d109      	bne.n	8004600 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d104      	bne.n	8004600 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d007      	beq.n	8004610 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800460e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004616:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b04      	cmp	r3, #4
 8004622:	d113      	bne.n	800464c <I2C_ITError+0x254>
 8004624:	7bfb      	ldrb	r3, [r7, #15]
 8004626:	2b28      	cmp	r3, #40	; 0x28
 8004628:	d110      	bne.n	800464c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a0a      	ldr	r2, [pc, #40]	; (8004658 <I2C_ITError+0x260>)
 800462e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fe fe7a 	bl	8003340 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800464c:	bf00      	nop
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	0800465d 	.word	0x0800465d
 8004658:	ffff0000 	.word	0xffff0000

0800465c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004674:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004676:	4b4b      	ldr	r3, [pc, #300]	; (80047a4 <I2C_DMAAbort+0x148>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	08db      	lsrs	r3, r3, #3
 800467c:	4a4a      	ldr	r2, [pc, #296]	; (80047a8 <I2C_DMAAbort+0x14c>)
 800467e:	fba2 2303 	umull	r2, r3, r2, r3
 8004682:	0a1a      	lsrs	r2, r3, #8
 8004684:	4613      	mov	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	00da      	lsls	r2, r3, #3
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d106      	bne.n	80046a4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	f043 0220 	orr.w	r2, r3, #32
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80046a2:	e00a      	b.n	80046ba <I2C_DMAAbort+0x5e>
    }
    count--;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	3b01      	subs	r3, #1
 80046a8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046b8:	d0ea      	beq.n	8004690 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c6:	2200      	movs	r2, #0
 80046c8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d6:	2200      	movs	r2, #0
 80046d8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046e8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2200      	movs	r2, #0
 80046ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046fc:	2200      	movs	r2, #0
 80046fe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470c:	2200      	movs	r2, #0
 800470e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0201 	bic.w	r2, r2, #1
 800471e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b60      	cmp	r3, #96	; 0x60
 800472a:	d10e      	bne.n	800474a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	2200      	movs	r2, #0
 8004740:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004742:	6978      	ldr	r0, [r7, #20]
 8004744:	f7fe fe24 	bl	8003390 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004748:	e027      	b.n	800479a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800474a:	7cfb      	ldrb	r3, [r7, #19]
 800474c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004750:	2b28      	cmp	r3, #40	; 0x28
 8004752:	d117      	bne.n	8004784 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0201 	orr.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004772:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	2200      	movs	r2, #0
 8004778:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2228      	movs	r2, #40	; 0x28
 800477e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004782:	e007      	b.n	8004794 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004794:	6978      	ldr	r0, [r7, #20]
 8004796:	f7fe fdf1 	bl	800337c <HAL_I2C_ErrorCallback>
}
 800479a:	bf00      	nop
 800479c:	3718      	adds	r7, #24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	200000f8 	.word	0x200000f8
 80047a8:	14f8b589 	.word	0x14f8b589

080047ac <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80047b8:	4b13      	ldr	r3, [pc, #76]	; (8004808 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	08db      	lsrs	r3, r3, #3
 80047be:	4a13      	ldr	r2, [pc, #76]	; (800480c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80047c0:	fba2 2303 	umull	r2, r3, r2, r3
 80047c4:	0a1a      	lsrs	r2, r3, #8
 80047c6:	4613      	mov	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	3b01      	subs	r3, #1
 80047d2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d107      	bne.n	80047ea <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	f043 0220 	orr.w	r2, r3, #32
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e008      	b.n	80047fc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047f8:	d0e9      	beq.n	80047ce <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	200000f8 	.word	0x200000f8
 800480c:	14f8b589 	.word	0x14f8b589

08004810 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004820:	d103      	bne.n	800482a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004828:	e007      	b.n	800483a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004832:	d102      	bne.n	800483a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2208      	movs	r2, #8
 8004838:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
	...

08004848 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e264      	b.n	8004d24 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d075      	beq.n	8004952 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004866:	4ba3      	ldr	r3, [pc, #652]	; (8004af4 <HAL_RCC_OscConfig+0x2ac>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f003 030c 	and.w	r3, r3, #12
 800486e:	2b04      	cmp	r3, #4
 8004870:	d00c      	beq.n	800488c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004872:	4ba0      	ldr	r3, [pc, #640]	; (8004af4 <HAL_RCC_OscConfig+0x2ac>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800487a:	2b08      	cmp	r3, #8
 800487c:	d112      	bne.n	80048a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800487e:	4b9d      	ldr	r3, [pc, #628]	; (8004af4 <HAL_RCC_OscConfig+0x2ac>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004886:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800488a:	d10b      	bne.n	80048a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800488c:	4b99      	ldr	r3, [pc, #612]	; (8004af4 <HAL_RCC_OscConfig+0x2ac>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d05b      	beq.n	8004950 <HAL_RCC_OscConfig+0x108>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d157      	bne.n	8004950 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e23f      	b.n	8004d24 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ac:	d106      	bne.n	80048bc <HAL_RCC_OscConfig+0x74>
 80048ae:	4b91      	ldr	r3, [pc, #580]	; (8004af4 <HAL_RCC_OscConfig+0x2ac>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a90      	ldr	r2, [pc, #576]	; (8004af4 <HAL_RCC_OscConfig+0x2ac>)
 80048b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048b8:	6013      	str	r3, [r2, #0]
 80048ba:	e01d      	b.n	80048f8 <HAL_RCC_OscConfig+0xb0>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048c4:	d10c      	bne.n	80048e0 <HAL_RCC_OscConfig+0x98>
 80048c6:	4b8b      	ldr	r3, [pc, #556]	; (8004af4 <HAL_RCC_OscConfig+0x2ac>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a8a      	ldr	r2, [pc, #552]	; (8004af4 <HAL_RCC_OscConfig+0x2ac>)
 80048cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048d0:	6013      	str	r3, [r2, #0]
 80048d2:	4b88      	ldr	r3, [pc, #544]	; (8004af4 <HAL_RCC_OscConfig+0x2ac>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a87      	ldr	r2, [pc, #540]	; (8004af4 <HAL_RCC_OscConfig+0x2ac>)
 80048d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	e00b      	b.n	80048f8 <HAL_RCC_OscConfig+0xb0>
 80048e0:	4b84      	ldr	r3, [pc, #528]	; (8004af4 <HAL_RCC_OscConfig+0x2ac>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a83      	ldr	r2, [pc, #524]	; (8004af4 <HAL_RCC_OscConfig+0x2ac>)
 80048e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ea:	6013      	str	r3, [r2, #0]
 80048ec:	4b81      	ldr	r3, [pc, #516]	; (8004af4 <HAL_RCC_OscConfig+0x2ac>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a80      	ldr	r2, [pc, #512]	; (8004af4 <HAL_RCC_OscConfig+0x2ac>)
 80048f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d013      	beq.n	8004928 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004900:	f7fc fede 	bl	80016c0 <HAL_GetTick>
 8004904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004906:	e008      	b.n	800491a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004908:	f7fc feda 	bl	80016c0 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b64      	cmp	r3, #100	; 0x64
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e204      	b.n	8004d24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800491a:	4b76      	ldr	r3, [pc, #472]	; (8004af4 <HAL_RCC_OscConfig+0x2ac>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0f0      	beq.n	8004908 <HAL_RCC_OscConfig+0xc0>
 8004926:	e014      	b.n	8004952 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004928:	f7fc feca 	bl	80016c0 <HAL_GetTick>
 800492c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004930:	f7fc fec6 	bl	80016c0 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b64      	cmp	r3, #100	; 0x64
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e1f0      	b.n	8004d24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004942:	4b6c      	ldr	r3, [pc, #432]	; (8004af4 <HAL_RCC_OscConfig+0x2ac>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1f0      	bne.n	8004930 <HAL_RCC_OscConfig+0xe8>
 800494e:	e000      	b.n	8004952 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d063      	beq.n	8004a26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800495e:	4b65      	ldr	r3, [pc, #404]	; (8004af4 <HAL_RCC_OscConfig+0x2ac>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 030c 	and.w	r3, r3, #12
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00b      	beq.n	8004982 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800496a:	4b62      	ldr	r3, [pc, #392]	; (8004af4 <HAL_RCC_OscConfig+0x2ac>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004972:	2b08      	cmp	r3, #8
 8004974:	d11c      	bne.n	80049b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004976:	4b5f      	ldr	r3, [pc, #380]	; (8004af4 <HAL_RCC_OscConfig+0x2ac>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d116      	bne.n	80049b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004982:	4b5c      	ldr	r3, [pc, #368]	; (8004af4 <HAL_RCC_OscConfig+0x2ac>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d005      	beq.n	800499a <HAL_RCC_OscConfig+0x152>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d001      	beq.n	800499a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e1c4      	b.n	8004d24 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800499a:	4b56      	ldr	r3, [pc, #344]	; (8004af4 <HAL_RCC_OscConfig+0x2ac>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	00db      	lsls	r3, r3, #3
 80049a8:	4952      	ldr	r1, [pc, #328]	; (8004af4 <HAL_RCC_OscConfig+0x2ac>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ae:	e03a      	b.n	8004a26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d020      	beq.n	80049fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049b8:	4b4f      	ldr	r3, [pc, #316]	; (8004af8 <HAL_RCC_OscConfig+0x2b0>)
 80049ba:	2201      	movs	r2, #1
 80049bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049be:	f7fc fe7f 	bl	80016c0 <HAL_GetTick>
 80049c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049c4:	e008      	b.n	80049d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049c6:	f7fc fe7b 	bl	80016c0 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d901      	bls.n	80049d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e1a5      	b.n	8004d24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049d8:	4b46      	ldr	r3, [pc, #280]	; (8004af4 <HAL_RCC_OscConfig+0x2ac>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0f0      	beq.n	80049c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049e4:	4b43      	ldr	r3, [pc, #268]	; (8004af4 <HAL_RCC_OscConfig+0x2ac>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	00db      	lsls	r3, r3, #3
 80049f2:	4940      	ldr	r1, [pc, #256]	; (8004af4 <HAL_RCC_OscConfig+0x2ac>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	600b      	str	r3, [r1, #0]
 80049f8:	e015      	b.n	8004a26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049fa:	4b3f      	ldr	r3, [pc, #252]	; (8004af8 <HAL_RCC_OscConfig+0x2b0>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a00:	f7fc fe5e 	bl	80016c0 <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a08:	f7fc fe5a 	bl	80016c0 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e184      	b.n	8004d24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a1a:	4b36      	ldr	r3, [pc, #216]	; (8004af4 <HAL_RCC_OscConfig+0x2ac>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1f0      	bne.n	8004a08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0308 	and.w	r3, r3, #8
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d030      	beq.n	8004a94 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d016      	beq.n	8004a68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a3a:	4b30      	ldr	r3, [pc, #192]	; (8004afc <HAL_RCC_OscConfig+0x2b4>)
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a40:	f7fc fe3e 	bl	80016c0 <HAL_GetTick>
 8004a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a46:	e008      	b.n	8004a5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a48:	f7fc fe3a 	bl	80016c0 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e164      	b.n	8004d24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a5a:	4b26      	ldr	r3, [pc, #152]	; (8004af4 <HAL_RCC_OscConfig+0x2ac>)
 8004a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d0f0      	beq.n	8004a48 <HAL_RCC_OscConfig+0x200>
 8004a66:	e015      	b.n	8004a94 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a68:	4b24      	ldr	r3, [pc, #144]	; (8004afc <HAL_RCC_OscConfig+0x2b4>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a6e:	f7fc fe27 	bl	80016c0 <HAL_GetTick>
 8004a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a74:	e008      	b.n	8004a88 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a76:	f7fc fe23 	bl	80016c0 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d901      	bls.n	8004a88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e14d      	b.n	8004d24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a88:	4b1a      	ldr	r3, [pc, #104]	; (8004af4 <HAL_RCC_OscConfig+0x2ac>)
 8004a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1f0      	bne.n	8004a76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0304 	and.w	r3, r3, #4
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 80a0 	beq.w	8004be2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aa6:	4b13      	ldr	r3, [pc, #76]	; (8004af4 <HAL_RCC_OscConfig+0x2ac>)
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10f      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60bb      	str	r3, [r7, #8]
 8004ab6:	4b0f      	ldr	r3, [pc, #60]	; (8004af4 <HAL_RCC_OscConfig+0x2ac>)
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	4a0e      	ldr	r2, [pc, #56]	; (8004af4 <HAL_RCC_OscConfig+0x2ac>)
 8004abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ac2:	4b0c      	ldr	r3, [pc, #48]	; (8004af4 <HAL_RCC_OscConfig+0x2ac>)
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aca:	60bb      	str	r3, [r7, #8]
 8004acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad2:	4b0b      	ldr	r3, [pc, #44]	; (8004b00 <HAL_RCC_OscConfig+0x2b8>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d121      	bne.n	8004b22 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ade:	4b08      	ldr	r3, [pc, #32]	; (8004b00 <HAL_RCC_OscConfig+0x2b8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a07      	ldr	r2, [pc, #28]	; (8004b00 <HAL_RCC_OscConfig+0x2b8>)
 8004ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aea:	f7fc fde9 	bl	80016c0 <HAL_GetTick>
 8004aee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af0:	e011      	b.n	8004b16 <HAL_RCC_OscConfig+0x2ce>
 8004af2:	bf00      	nop
 8004af4:	40023800 	.word	0x40023800
 8004af8:	42470000 	.word	0x42470000
 8004afc:	42470e80 	.word	0x42470e80
 8004b00:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b04:	f7fc fddc 	bl	80016c0 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e106      	b.n	8004d24 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b16:	4b85      	ldr	r3, [pc, #532]	; (8004d2c <HAL_RCC_OscConfig+0x4e4>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d0f0      	beq.n	8004b04 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d106      	bne.n	8004b38 <HAL_RCC_OscConfig+0x2f0>
 8004b2a:	4b81      	ldr	r3, [pc, #516]	; (8004d30 <HAL_RCC_OscConfig+0x4e8>)
 8004b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2e:	4a80      	ldr	r2, [pc, #512]	; (8004d30 <HAL_RCC_OscConfig+0x4e8>)
 8004b30:	f043 0301 	orr.w	r3, r3, #1
 8004b34:	6713      	str	r3, [r2, #112]	; 0x70
 8004b36:	e01c      	b.n	8004b72 <HAL_RCC_OscConfig+0x32a>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	2b05      	cmp	r3, #5
 8004b3e:	d10c      	bne.n	8004b5a <HAL_RCC_OscConfig+0x312>
 8004b40:	4b7b      	ldr	r3, [pc, #492]	; (8004d30 <HAL_RCC_OscConfig+0x4e8>)
 8004b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b44:	4a7a      	ldr	r2, [pc, #488]	; (8004d30 <HAL_RCC_OscConfig+0x4e8>)
 8004b46:	f043 0304 	orr.w	r3, r3, #4
 8004b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b4c:	4b78      	ldr	r3, [pc, #480]	; (8004d30 <HAL_RCC_OscConfig+0x4e8>)
 8004b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b50:	4a77      	ldr	r2, [pc, #476]	; (8004d30 <HAL_RCC_OscConfig+0x4e8>)
 8004b52:	f043 0301 	orr.w	r3, r3, #1
 8004b56:	6713      	str	r3, [r2, #112]	; 0x70
 8004b58:	e00b      	b.n	8004b72 <HAL_RCC_OscConfig+0x32a>
 8004b5a:	4b75      	ldr	r3, [pc, #468]	; (8004d30 <HAL_RCC_OscConfig+0x4e8>)
 8004b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5e:	4a74      	ldr	r2, [pc, #464]	; (8004d30 <HAL_RCC_OscConfig+0x4e8>)
 8004b60:	f023 0301 	bic.w	r3, r3, #1
 8004b64:	6713      	str	r3, [r2, #112]	; 0x70
 8004b66:	4b72      	ldr	r3, [pc, #456]	; (8004d30 <HAL_RCC_OscConfig+0x4e8>)
 8004b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6a:	4a71      	ldr	r2, [pc, #452]	; (8004d30 <HAL_RCC_OscConfig+0x4e8>)
 8004b6c:	f023 0304 	bic.w	r3, r3, #4
 8004b70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d015      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b7a:	f7fc fda1 	bl	80016c0 <HAL_GetTick>
 8004b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b80:	e00a      	b.n	8004b98 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b82:	f7fc fd9d 	bl	80016c0 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d901      	bls.n	8004b98 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e0c5      	b.n	8004d24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b98:	4b65      	ldr	r3, [pc, #404]	; (8004d30 <HAL_RCC_OscConfig+0x4e8>)
 8004b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d0ee      	beq.n	8004b82 <HAL_RCC_OscConfig+0x33a>
 8004ba4:	e014      	b.n	8004bd0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ba6:	f7fc fd8b 	bl	80016c0 <HAL_GetTick>
 8004baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bac:	e00a      	b.n	8004bc4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bae:	f7fc fd87 	bl	80016c0 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e0af      	b.n	8004d24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bc4:	4b5a      	ldr	r3, [pc, #360]	; (8004d30 <HAL_RCC_OscConfig+0x4e8>)
 8004bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1ee      	bne.n	8004bae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bd0:	7dfb      	ldrb	r3, [r7, #23]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d105      	bne.n	8004be2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bd6:	4b56      	ldr	r3, [pc, #344]	; (8004d30 <HAL_RCC_OscConfig+0x4e8>)
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	4a55      	ldr	r2, [pc, #340]	; (8004d30 <HAL_RCC_OscConfig+0x4e8>)
 8004bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004be0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f000 809b 	beq.w	8004d22 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bec:	4b50      	ldr	r3, [pc, #320]	; (8004d30 <HAL_RCC_OscConfig+0x4e8>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f003 030c 	and.w	r3, r3, #12
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d05c      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d141      	bne.n	8004c84 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c00:	4b4c      	ldr	r3, [pc, #304]	; (8004d34 <HAL_RCC_OscConfig+0x4ec>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c06:	f7fc fd5b 	bl	80016c0 <HAL_GetTick>
 8004c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c0c:	e008      	b.n	8004c20 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c0e:	f7fc fd57 	bl	80016c0 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e081      	b.n	8004d24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c20:	4b43      	ldr	r3, [pc, #268]	; (8004d30 <HAL_RCC_OscConfig+0x4e8>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1f0      	bne.n	8004c0e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	69da      	ldr	r2, [r3, #28]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	431a      	orrs	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	019b      	lsls	r3, r3, #6
 8004c3c:	431a      	orrs	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c42:	085b      	lsrs	r3, r3, #1
 8004c44:	3b01      	subs	r3, #1
 8004c46:	041b      	lsls	r3, r3, #16
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4e:	061b      	lsls	r3, r3, #24
 8004c50:	4937      	ldr	r1, [pc, #220]	; (8004d30 <HAL_RCC_OscConfig+0x4e8>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c56:	4b37      	ldr	r3, [pc, #220]	; (8004d34 <HAL_RCC_OscConfig+0x4ec>)
 8004c58:	2201      	movs	r2, #1
 8004c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c5c:	f7fc fd30 	bl	80016c0 <HAL_GetTick>
 8004c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c62:	e008      	b.n	8004c76 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c64:	f7fc fd2c 	bl	80016c0 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e056      	b.n	8004d24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c76:	4b2e      	ldr	r3, [pc, #184]	; (8004d30 <HAL_RCC_OscConfig+0x4e8>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d0f0      	beq.n	8004c64 <HAL_RCC_OscConfig+0x41c>
 8004c82:	e04e      	b.n	8004d22 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c84:	4b2b      	ldr	r3, [pc, #172]	; (8004d34 <HAL_RCC_OscConfig+0x4ec>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c8a:	f7fc fd19 	bl	80016c0 <HAL_GetTick>
 8004c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c90:	e008      	b.n	8004ca4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c92:	f7fc fd15 	bl	80016c0 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e03f      	b.n	8004d24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ca4:	4b22      	ldr	r3, [pc, #136]	; (8004d30 <HAL_RCC_OscConfig+0x4e8>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1f0      	bne.n	8004c92 <HAL_RCC_OscConfig+0x44a>
 8004cb0:	e037      	b.n	8004d22 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d101      	bne.n	8004cbe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e032      	b.n	8004d24 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cbe:	4b1c      	ldr	r3, [pc, #112]	; (8004d30 <HAL_RCC_OscConfig+0x4e8>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d028      	beq.n	8004d1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d121      	bne.n	8004d1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d11a      	bne.n	8004d1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cee:	4013      	ands	r3, r2
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cf4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d111      	bne.n	8004d1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d04:	085b      	lsrs	r3, r3, #1
 8004d06:	3b01      	subs	r3, #1
 8004d08:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d107      	bne.n	8004d1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d18:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d001      	beq.n	8004d22 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e000      	b.n	8004d24 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3718      	adds	r7, #24
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	40007000 	.word	0x40007000
 8004d30:	40023800 	.word	0x40023800
 8004d34:	42470060 	.word	0x42470060

08004d38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d101      	bne.n	8004d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e0cc      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d4c:	4b68      	ldr	r3, [pc, #416]	; (8004ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d90c      	bls.n	8004d74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d5a:	4b65      	ldr	r3, [pc, #404]	; (8004ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	b2d2      	uxtb	r2, r2
 8004d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d62:	4b63      	ldr	r3, [pc, #396]	; (8004ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d001      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e0b8      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d020      	beq.n	8004dc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d005      	beq.n	8004d98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d8c:	4b59      	ldr	r3, [pc, #356]	; (8004ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	4a58      	ldr	r2, [pc, #352]	; (8004ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0308 	and.w	r3, r3, #8
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d005      	beq.n	8004db0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004da4:	4b53      	ldr	r3, [pc, #332]	; (8004ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	4a52      	ldr	r2, [pc, #328]	; (8004ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8004daa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004dae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004db0:	4b50      	ldr	r3, [pc, #320]	; (8004ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	494d      	ldr	r1, [pc, #308]	; (8004ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d044      	beq.n	8004e58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d107      	bne.n	8004de6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dd6:	4b47      	ldr	r3, [pc, #284]	; (8004ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d119      	bne.n	8004e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e07f      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d003      	beq.n	8004df6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004df2:	2b03      	cmp	r3, #3
 8004df4:	d107      	bne.n	8004e06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004df6:	4b3f      	ldr	r3, [pc, #252]	; (8004ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d109      	bne.n	8004e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e06f      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e06:	4b3b      	ldr	r3, [pc, #236]	; (8004ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e067      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e16:	4b37      	ldr	r3, [pc, #220]	; (8004ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f023 0203 	bic.w	r2, r3, #3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	4934      	ldr	r1, [pc, #208]	; (8004ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e28:	f7fc fc4a 	bl	80016c0 <HAL_GetTick>
 8004e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e2e:	e00a      	b.n	8004e46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e30:	f7fc fc46 	bl	80016c0 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e04f      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e46:	4b2b      	ldr	r3, [pc, #172]	; (8004ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f003 020c 	and.w	r2, r3, #12
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d1eb      	bne.n	8004e30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e58:	4b25      	ldr	r3, [pc, #148]	; (8004ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0307 	and.w	r3, r3, #7
 8004e60:	683a      	ldr	r2, [r7, #0]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d20c      	bcs.n	8004e80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e66:	4b22      	ldr	r3, [pc, #136]	; (8004ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	b2d2      	uxtb	r2, r2
 8004e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e6e:	4b20      	ldr	r3, [pc, #128]	; (8004ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0307 	and.w	r3, r3, #7
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d001      	beq.n	8004e80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e032      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0304 	and.w	r3, r3, #4
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d008      	beq.n	8004e9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e8c:	4b19      	ldr	r3, [pc, #100]	; (8004ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	4916      	ldr	r1, [pc, #88]	; (8004ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d009      	beq.n	8004ebe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004eaa:	4b12      	ldr	r3, [pc, #72]	; (8004ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	490e      	ldr	r1, [pc, #56]	; (8004ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ebe:	f000 f821 	bl	8004f04 <HAL_RCC_GetSysClockFreq>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	4b0b      	ldr	r3, [pc, #44]	; (8004ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	091b      	lsrs	r3, r3, #4
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	490a      	ldr	r1, [pc, #40]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8004ed0:	5ccb      	ldrb	r3, [r1, r3]
 8004ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ed6:	4a09      	ldr	r2, [pc, #36]	; (8004efc <HAL_RCC_ClockConfig+0x1c4>)
 8004ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004eda:	4b09      	ldr	r3, [pc, #36]	; (8004f00 <HAL_RCC_ClockConfig+0x1c8>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7fc fbaa 	bl	8001638 <HAL_InitTick>

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	40023c00 	.word	0x40023c00
 8004ef4:	40023800 	.word	0x40023800
 8004ef8:	08007e00 	.word	0x08007e00
 8004efc:	200000f8 	.word	0x200000f8
 8004f00:	200000fc 	.word	0x200000fc

08004f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f04:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004f08:	b084      	sub	sp, #16
 8004f0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	607b      	str	r3, [r7, #4]
 8004f10:	2300      	movs	r3, #0
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	2300      	movs	r3, #0
 8004f16:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f1c:	4b67      	ldr	r3, [pc, #412]	; (80050bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f003 030c 	and.w	r3, r3, #12
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d00d      	beq.n	8004f44 <HAL_RCC_GetSysClockFreq+0x40>
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	f200 80bd 	bhi.w	80050a8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <HAL_RCC_GetSysClockFreq+0x34>
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d003      	beq.n	8004f3e <HAL_RCC_GetSysClockFreq+0x3a>
 8004f36:	e0b7      	b.n	80050a8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f38:	4b61      	ldr	r3, [pc, #388]	; (80050c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004f3a:	60bb      	str	r3, [r7, #8]
       break;
 8004f3c:	e0b7      	b.n	80050ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f3e:	4b61      	ldr	r3, [pc, #388]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004f40:	60bb      	str	r3, [r7, #8]
      break;
 8004f42:	e0b4      	b.n	80050ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f44:	4b5d      	ldr	r3, [pc, #372]	; (80050bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f4c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f4e:	4b5b      	ldr	r3, [pc, #364]	; (80050bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d04d      	beq.n	8004ff6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f5a:	4b58      	ldr	r3, [pc, #352]	; (80050bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	099b      	lsrs	r3, r3, #6
 8004f60:	461a      	mov	r2, r3
 8004f62:	f04f 0300 	mov.w	r3, #0
 8004f66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004f6a:	f04f 0100 	mov.w	r1, #0
 8004f6e:	ea02 0800 	and.w	r8, r2, r0
 8004f72:	ea03 0901 	and.w	r9, r3, r1
 8004f76:	4640      	mov	r0, r8
 8004f78:	4649      	mov	r1, r9
 8004f7a:	f04f 0200 	mov.w	r2, #0
 8004f7e:	f04f 0300 	mov.w	r3, #0
 8004f82:	014b      	lsls	r3, r1, #5
 8004f84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f88:	0142      	lsls	r2, r0, #5
 8004f8a:	4610      	mov	r0, r2
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	ebb0 0008 	subs.w	r0, r0, r8
 8004f92:	eb61 0109 	sbc.w	r1, r1, r9
 8004f96:	f04f 0200 	mov.w	r2, #0
 8004f9a:	f04f 0300 	mov.w	r3, #0
 8004f9e:	018b      	lsls	r3, r1, #6
 8004fa0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004fa4:	0182      	lsls	r2, r0, #6
 8004fa6:	1a12      	subs	r2, r2, r0
 8004fa8:	eb63 0301 	sbc.w	r3, r3, r1
 8004fac:	f04f 0000 	mov.w	r0, #0
 8004fb0:	f04f 0100 	mov.w	r1, #0
 8004fb4:	00d9      	lsls	r1, r3, #3
 8004fb6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fba:	00d0      	lsls	r0, r2, #3
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	eb12 0208 	adds.w	r2, r2, r8
 8004fc4:	eb43 0309 	adc.w	r3, r3, r9
 8004fc8:	f04f 0000 	mov.w	r0, #0
 8004fcc:	f04f 0100 	mov.w	r1, #0
 8004fd0:	0259      	lsls	r1, r3, #9
 8004fd2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004fd6:	0250      	lsls	r0, r2, #9
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4610      	mov	r0, r2
 8004fde:	4619      	mov	r1, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	f04f 0300 	mov.w	r3, #0
 8004fe8:	f7fb f952 	bl	8000290 <__aeabi_uldivmod>
 8004fec:	4602      	mov	r2, r0
 8004fee:	460b      	mov	r3, r1
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	e04a      	b.n	800508c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ff6:	4b31      	ldr	r3, [pc, #196]	; (80050bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	099b      	lsrs	r3, r3, #6
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	f04f 0300 	mov.w	r3, #0
 8005002:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005006:	f04f 0100 	mov.w	r1, #0
 800500a:	ea02 0400 	and.w	r4, r2, r0
 800500e:	ea03 0501 	and.w	r5, r3, r1
 8005012:	4620      	mov	r0, r4
 8005014:	4629      	mov	r1, r5
 8005016:	f04f 0200 	mov.w	r2, #0
 800501a:	f04f 0300 	mov.w	r3, #0
 800501e:	014b      	lsls	r3, r1, #5
 8005020:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005024:	0142      	lsls	r2, r0, #5
 8005026:	4610      	mov	r0, r2
 8005028:	4619      	mov	r1, r3
 800502a:	1b00      	subs	r0, r0, r4
 800502c:	eb61 0105 	sbc.w	r1, r1, r5
 8005030:	f04f 0200 	mov.w	r2, #0
 8005034:	f04f 0300 	mov.w	r3, #0
 8005038:	018b      	lsls	r3, r1, #6
 800503a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800503e:	0182      	lsls	r2, r0, #6
 8005040:	1a12      	subs	r2, r2, r0
 8005042:	eb63 0301 	sbc.w	r3, r3, r1
 8005046:	f04f 0000 	mov.w	r0, #0
 800504a:	f04f 0100 	mov.w	r1, #0
 800504e:	00d9      	lsls	r1, r3, #3
 8005050:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005054:	00d0      	lsls	r0, r2, #3
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	1912      	adds	r2, r2, r4
 800505c:	eb45 0303 	adc.w	r3, r5, r3
 8005060:	f04f 0000 	mov.w	r0, #0
 8005064:	f04f 0100 	mov.w	r1, #0
 8005068:	0299      	lsls	r1, r3, #10
 800506a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800506e:	0290      	lsls	r0, r2, #10
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	4610      	mov	r0, r2
 8005076:	4619      	mov	r1, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	461a      	mov	r2, r3
 800507c:	f04f 0300 	mov.w	r3, #0
 8005080:	f7fb f906 	bl	8000290 <__aeabi_uldivmod>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4613      	mov	r3, r2
 800508a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800508c:	4b0b      	ldr	r3, [pc, #44]	; (80050bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	0c1b      	lsrs	r3, r3, #16
 8005092:	f003 0303 	and.w	r3, r3, #3
 8005096:	3301      	adds	r3, #1
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a4:	60bb      	str	r3, [r7, #8]
      break;
 80050a6:	e002      	b.n	80050ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050a8:	4b05      	ldr	r3, [pc, #20]	; (80050c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80050aa:	60bb      	str	r3, [r7, #8]
      break;
 80050ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050ae:	68bb      	ldr	r3, [r7, #8]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80050ba:	bf00      	nop
 80050bc:	40023800 	.word	0x40023800
 80050c0:	00f42400 	.word	0x00f42400
 80050c4:	007a1200 	.word	0x007a1200

080050c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050c8:	b480      	push	{r7}
 80050ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050cc:	4b03      	ldr	r3, [pc, #12]	; (80050dc <HAL_RCC_GetHCLKFreq+0x14>)
 80050ce:	681b      	ldr	r3, [r3, #0]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	200000f8 	.word	0x200000f8

080050e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050e4:	f7ff fff0 	bl	80050c8 <HAL_RCC_GetHCLKFreq>
 80050e8:	4602      	mov	r2, r0
 80050ea:	4b05      	ldr	r3, [pc, #20]	; (8005100 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	0a9b      	lsrs	r3, r3, #10
 80050f0:	f003 0307 	and.w	r3, r3, #7
 80050f4:	4903      	ldr	r1, [pc, #12]	; (8005104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050f6:	5ccb      	ldrb	r3, [r1, r3]
 80050f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	40023800 	.word	0x40023800
 8005104:	08007e10 	.word	0x08007e10

08005108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800510c:	f7ff ffdc 	bl	80050c8 <HAL_RCC_GetHCLKFreq>
 8005110:	4602      	mov	r2, r0
 8005112:	4b05      	ldr	r3, [pc, #20]	; (8005128 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	0b5b      	lsrs	r3, r3, #13
 8005118:	f003 0307 	and.w	r3, r3, #7
 800511c:	4903      	ldr	r1, [pc, #12]	; (800512c <HAL_RCC_GetPCLK2Freq+0x24>)
 800511e:	5ccb      	ldrb	r3, [r1, r3]
 8005120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005124:	4618      	mov	r0, r3
 8005126:	bd80      	pop	{r7, pc}
 8005128:	40023800 	.word	0x40023800
 800512c:	08007e10 	.word	0x08007e10

08005130 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e07b      	b.n	800523a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005146:	2b00      	cmp	r3, #0
 8005148:	d108      	bne.n	800515c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005152:	d009      	beq.n	8005168 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	61da      	str	r2, [r3, #28]
 800515a:	e005      	b.n	8005168 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d106      	bne.n	8005188 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7fc f82e 	bl	80011e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800519e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80051b0:	431a      	orrs	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051ba:	431a      	orrs	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	431a      	orrs	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	431a      	orrs	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051d8:	431a      	orrs	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051e2:	431a      	orrs	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ec:	ea42 0103 	orr.w	r1, r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	0c1b      	lsrs	r3, r3, #16
 8005206:	f003 0104 	and.w	r1, r3, #4
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	f003 0210 	and.w	r2, r3, #16
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	430a      	orrs	r2, r1
 8005218:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69da      	ldr	r2, [r3, #28]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005228:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b082      	sub	sp, #8
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e041      	b.n	80052d8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b00      	cmp	r3, #0
 800525e:	d106      	bne.n	800526e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f7fc f803 	bl	8001274 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2202      	movs	r2, #2
 8005272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	3304      	adds	r3, #4
 800527e:	4619      	mov	r1, r3
 8005280:	4610      	mov	r0, r2
 8005282:	f000 fe67 	bl	8005f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d001      	beq.n	80052f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e03c      	b.n	8005372 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a1e      	ldr	r2, [pc, #120]	; (8005380 <HAL_TIM_Base_Start+0xa0>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d018      	beq.n	800533c <HAL_TIM_Base_Start+0x5c>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005312:	d013      	beq.n	800533c <HAL_TIM_Base_Start+0x5c>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a1a      	ldr	r2, [pc, #104]	; (8005384 <HAL_TIM_Base_Start+0xa4>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d00e      	beq.n	800533c <HAL_TIM_Base_Start+0x5c>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a19      	ldr	r2, [pc, #100]	; (8005388 <HAL_TIM_Base_Start+0xa8>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d009      	beq.n	800533c <HAL_TIM_Base_Start+0x5c>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a17      	ldr	r2, [pc, #92]	; (800538c <HAL_TIM_Base_Start+0xac>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d004      	beq.n	800533c <HAL_TIM_Base_Start+0x5c>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a16      	ldr	r2, [pc, #88]	; (8005390 <HAL_TIM_Base_Start+0xb0>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d111      	bne.n	8005360 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2b06      	cmp	r3, #6
 800534c:	d010      	beq.n	8005370 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f042 0201 	orr.w	r2, r2, #1
 800535c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800535e:	e007      	b.n	8005370 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0201 	orr.w	r2, r2, #1
 800536e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	40010000 	.word	0x40010000
 8005384:	40000400 	.word	0x40000400
 8005388:	40000800 	.word	0x40000800
 800538c:	40000c00 	.word	0x40000c00
 8005390:	40014000 	.word	0x40014000

08005394 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d001      	beq.n	80053ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e044      	b.n	8005436 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0201 	orr.w	r2, r2, #1
 80053c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a1e      	ldr	r2, [pc, #120]	; (8005444 <HAL_TIM_Base_Start_IT+0xb0>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d018      	beq.n	8005400 <HAL_TIM_Base_Start_IT+0x6c>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d6:	d013      	beq.n	8005400 <HAL_TIM_Base_Start_IT+0x6c>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a1a      	ldr	r2, [pc, #104]	; (8005448 <HAL_TIM_Base_Start_IT+0xb4>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d00e      	beq.n	8005400 <HAL_TIM_Base_Start_IT+0x6c>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a19      	ldr	r2, [pc, #100]	; (800544c <HAL_TIM_Base_Start_IT+0xb8>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d009      	beq.n	8005400 <HAL_TIM_Base_Start_IT+0x6c>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a17      	ldr	r2, [pc, #92]	; (8005450 <HAL_TIM_Base_Start_IT+0xbc>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d004      	beq.n	8005400 <HAL_TIM_Base_Start_IT+0x6c>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a16      	ldr	r2, [pc, #88]	; (8005454 <HAL_TIM_Base_Start_IT+0xc0>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d111      	bne.n	8005424 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f003 0307 	and.w	r3, r3, #7
 800540a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2b06      	cmp	r3, #6
 8005410:	d010      	beq.n	8005434 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f042 0201 	orr.w	r2, r2, #1
 8005420:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005422:	e007      	b.n	8005434 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f042 0201 	orr.w	r2, r2, #1
 8005432:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	40010000 	.word	0x40010000
 8005448:	40000400 	.word	0x40000400
 800544c:	40000800 	.word	0x40000800
 8005450:	40000c00 	.word	0x40000c00
 8005454:	40014000 	.word	0x40014000

08005458 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e041      	b.n	80054ee <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d106      	bne.n	8005484 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f839 	bl	80054f6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	3304      	adds	r3, #4
 8005494:	4619      	mov	r1, r3
 8005496:	4610      	mov	r0, r2
 8005498:	f000 fd5c 	bl	8005f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b083      	sub	sp, #12
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
	...

0800550c <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
 8005518:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800551a:	2300      	movs	r3, #0
 800551c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d104      	bne.n	800552e <HAL_TIM_IC_Start_DMA+0x22>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800552a:	b2db      	uxtb	r3, r3
 800552c:	e013      	b.n	8005556 <HAL_TIM_IC_Start_DMA+0x4a>
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	2b04      	cmp	r3, #4
 8005532:	d104      	bne.n	800553e <HAL_TIM_IC_Start_DMA+0x32>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800553a:	b2db      	uxtb	r3, r3
 800553c:	e00b      	b.n	8005556 <HAL_TIM_IC_Start_DMA+0x4a>
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	2b08      	cmp	r3, #8
 8005542:	d104      	bne.n	800554e <HAL_TIM_IC_Start_DMA+0x42>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800554a:	b2db      	uxtb	r3, r3
 800554c:	e003      	b.n	8005556 <HAL_TIM_IC_Start_DMA+0x4a>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005554:	b2db      	uxtb	r3, r3
 8005556:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d104      	bne.n	8005568 <HAL_TIM_IC_Start_DMA+0x5c>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005564:	b2db      	uxtb	r3, r3
 8005566:	e013      	b.n	8005590 <HAL_TIM_IC_Start_DMA+0x84>
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	2b04      	cmp	r3, #4
 800556c:	d104      	bne.n	8005578 <HAL_TIM_IC_Start_DMA+0x6c>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005574:	b2db      	uxtb	r3, r3
 8005576:	e00b      	b.n	8005590 <HAL_TIM_IC_Start_DMA+0x84>
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2b08      	cmp	r3, #8
 800557c:	d104      	bne.n	8005588 <HAL_TIM_IC_Start_DMA+0x7c>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005584:	b2db      	uxtb	r3, r3
 8005586:	e003      	b.n	8005590 <HAL_TIM_IC_Start_DMA+0x84>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800558e:	b2db      	uxtb	r3, r3
 8005590:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8005592:	7dbb      	ldrb	r3, [r7, #22]
 8005594:	2b02      	cmp	r3, #2
 8005596:	d002      	beq.n	800559e <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8005598:	7d7b      	ldrb	r3, [r7, #21]
 800559a:	2b02      	cmp	r3, #2
 800559c:	d101      	bne.n	80055a2 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 800559e:	2302      	movs	r3, #2
 80055a0:	e13c      	b.n	800581c <HAL_TIM_IC_Start_DMA+0x310>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 80055a2:	7dbb      	ldrb	r3, [r7, #22]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d143      	bne.n	8005630 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 80055a8:	7d7b      	ldrb	r3, [r7, #21]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d140      	bne.n	8005630 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d104      	bne.n	80055be <HAL_TIM_IC_Start_DMA+0xb2>
 80055b4:	887b      	ldrh	r3, [r7, #2]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e12e      	b.n	800581c <HAL_TIM_IC_Start_DMA+0x310>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d104      	bne.n	80055ce <HAL_TIM_IC_Start_DMA+0xc2>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055cc:	e013      	b.n	80055f6 <HAL_TIM_IC_Start_DMA+0xea>
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	2b04      	cmp	r3, #4
 80055d2:	d104      	bne.n	80055de <HAL_TIM_IC_Start_DMA+0xd2>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2202      	movs	r2, #2
 80055d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055dc:	e00b      	b.n	80055f6 <HAL_TIM_IC_Start_DMA+0xea>
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	2b08      	cmp	r3, #8
 80055e2:	d104      	bne.n	80055ee <HAL_TIM_IC_Start_DMA+0xe2>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2202      	movs	r2, #2
 80055e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055ec:	e003      	b.n	80055f6 <HAL_TIM_IC_Start_DMA+0xea>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2202      	movs	r2, #2
 80055f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d104      	bne.n	8005606 <HAL_TIM_IC_Start_DMA+0xfa>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2202      	movs	r2, #2
 8005600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8005604:	e016      	b.n	8005634 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	2b04      	cmp	r3, #4
 800560a:	d104      	bne.n	8005616 <HAL_TIM_IC_Start_DMA+0x10a>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2202      	movs	r2, #2
 8005610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 8005614:	e00e      	b.n	8005634 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	2b08      	cmp	r3, #8
 800561a:	d104      	bne.n	8005626 <HAL_TIM_IC_Start_DMA+0x11a>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2202      	movs	r2, #2
 8005620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8005624:	e006      	b.n	8005634 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2202      	movs	r2, #2
 800562a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 800562e:	e001      	b.n	8005634 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e0f3      	b.n	800581c <HAL_TIM_IC_Start_DMA+0x310>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2201      	movs	r2, #1
 800563a:	68b9      	ldr	r1, [r7, #8]
 800563c:	4618      	mov	r0, r3
 800563e:	f000 fec1 	bl	80063c4 <TIM_CCxChannelCmd>
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b0c      	cmp	r3, #12
 8005646:	f200 80ad 	bhi.w	80057a4 <HAL_TIM_IC_Start_DMA+0x298>
 800564a:	a201      	add	r2, pc, #4	; (adr r2, 8005650 <HAL_TIM_IC_Start_DMA+0x144>)
 800564c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005650:	08005685 	.word	0x08005685
 8005654:	080057a5 	.word	0x080057a5
 8005658:	080057a5 	.word	0x080057a5
 800565c:	080057a5 	.word	0x080057a5
 8005660:	080056cd 	.word	0x080056cd
 8005664:	080057a5 	.word	0x080057a5
 8005668:	080057a5 	.word	0x080057a5
 800566c:	080057a5 	.word	0x080057a5
 8005670:	08005715 	.word	0x08005715
 8005674:	080057a5 	.word	0x080057a5
 8005678:	080057a5 	.word	0x080057a5
 800567c:	080057a5 	.word	0x080057a5
 8005680:	0800575d 	.word	0x0800575d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005688:	4a66      	ldr	r2, [pc, #408]	; (8005824 <HAL_TIM_IC_Start_DMA+0x318>)
 800568a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005690:	4a65      	ldr	r2, [pc, #404]	; (8005828 <HAL_TIM_IC_Start_DMA+0x31c>)
 8005692:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005698:	4a64      	ldr	r2, [pc, #400]	; (800582c <HAL_TIM_IC_Start_DMA+0x320>)
 800569a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	3334      	adds	r3, #52	; 0x34
 80056a6:	4619      	mov	r1, r3
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	887b      	ldrh	r3, [r7, #2]
 80056ac:	f7fc fc46 	bl	8001f3c <HAL_DMA_Start_IT>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e0b0      	b.n	800581c <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68da      	ldr	r2, [r3, #12]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056c8:	60da      	str	r2, [r3, #12]
      break;
 80056ca:	e06e      	b.n	80057aa <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d0:	4a54      	ldr	r2, [pc, #336]	; (8005824 <HAL_TIM_IC_Start_DMA+0x318>)
 80056d2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d8:	4a53      	ldr	r2, [pc, #332]	; (8005828 <HAL_TIM_IC_Start_DMA+0x31c>)
 80056da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e0:	4a52      	ldr	r2, [pc, #328]	; (800582c <HAL_TIM_IC_Start_DMA+0x320>)
 80056e2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	3338      	adds	r3, #56	; 0x38
 80056ee:	4619      	mov	r1, r3
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	887b      	ldrh	r3, [r7, #2]
 80056f4:	f7fc fc22 	bl	8001f3c <HAL_DMA_Start_IT>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e08c      	b.n	800581c <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68da      	ldr	r2, [r3, #12]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005710:	60da      	str	r2, [r3, #12]
      break;
 8005712:	e04a      	b.n	80057aa <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005718:	4a42      	ldr	r2, [pc, #264]	; (8005824 <HAL_TIM_IC_Start_DMA+0x318>)
 800571a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005720:	4a41      	ldr	r2, [pc, #260]	; (8005828 <HAL_TIM_IC_Start_DMA+0x31c>)
 8005722:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005728:	4a40      	ldr	r2, [pc, #256]	; (800582c <HAL_TIM_IC_Start_DMA+0x320>)
 800572a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	333c      	adds	r3, #60	; 0x3c
 8005736:	4619      	mov	r1, r3
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	887b      	ldrh	r3, [r7, #2]
 800573c:	f7fc fbfe 	bl	8001f3c <HAL_DMA_Start_IT>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e068      	b.n	800581c <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68da      	ldr	r2, [r3, #12]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005758:	60da      	str	r2, [r3, #12]
      break;
 800575a:	e026      	b.n	80057aa <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005760:	4a30      	ldr	r2, [pc, #192]	; (8005824 <HAL_TIM_IC_Start_DMA+0x318>)
 8005762:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005768:	4a2f      	ldr	r2, [pc, #188]	; (8005828 <HAL_TIM_IC_Start_DMA+0x31c>)
 800576a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005770:	4a2e      	ldr	r2, [pc, #184]	; (800582c <HAL_TIM_IC_Start_DMA+0x320>)
 8005772:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3340      	adds	r3, #64	; 0x40
 800577e:	4619      	mov	r1, r3
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	887b      	ldrh	r3, [r7, #2]
 8005784:	f7fc fbda 	bl	8001f3c <HAL_DMA_Start_IT>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e044      	b.n	800581c <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68da      	ldr	r2, [r3, #12]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057a0:	60da      	str	r2, [r3, #12]
      break;
 80057a2:	e002      	b.n	80057aa <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	75fb      	strb	r3, [r7, #23]
      break;
 80057a8:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a20      	ldr	r2, [pc, #128]	; (8005830 <HAL_TIM_IC_Start_DMA+0x324>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d018      	beq.n	80057e6 <HAL_TIM_IC_Start_DMA+0x2da>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057bc:	d013      	beq.n	80057e6 <HAL_TIM_IC_Start_DMA+0x2da>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a1c      	ldr	r2, [pc, #112]	; (8005834 <HAL_TIM_IC_Start_DMA+0x328>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d00e      	beq.n	80057e6 <HAL_TIM_IC_Start_DMA+0x2da>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a1a      	ldr	r2, [pc, #104]	; (8005838 <HAL_TIM_IC_Start_DMA+0x32c>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d009      	beq.n	80057e6 <HAL_TIM_IC_Start_DMA+0x2da>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a19      	ldr	r2, [pc, #100]	; (800583c <HAL_TIM_IC_Start_DMA+0x330>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d004      	beq.n	80057e6 <HAL_TIM_IC_Start_DMA+0x2da>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a17      	ldr	r2, [pc, #92]	; (8005840 <HAL_TIM_IC_Start_DMA+0x334>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d111      	bne.n	800580a <HAL_TIM_IC_Start_DMA+0x2fe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f003 0307 	and.w	r3, r3, #7
 80057f0:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	2b06      	cmp	r3, #6
 80057f6:	d010      	beq.n	800581a <HAL_TIM_IC_Start_DMA+0x30e>
    {
      __HAL_TIM_ENABLE(htim);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f042 0201 	orr.w	r2, r2, #1
 8005806:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005808:	e007      	b.n	800581a <HAL_TIM_IC_Start_DMA+0x30e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f042 0201 	orr.w	r2, r2, #1
 8005818:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800581a:	7dfb      	ldrb	r3, [r7, #23]
}
 800581c:	4618      	mov	r0, r3
 800581e:	3718      	adds	r7, #24
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	08005e25 	.word	0x08005e25
 8005828:	08005eed 	.word	0x08005eed
 800582c:	08005d93 	.word	0x08005d93
 8005830:	40010000 	.word	0x40010000
 8005834:	40000400 	.word	0x40000400
 8005838:	40000800 	.word	0x40000800
 800583c:	40000c00 	.word	0x40000c00
 8005840:	40014000 	.word	0x40014000

08005844 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b02      	cmp	r3, #2
 8005858:	d122      	bne.n	80058a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b02      	cmp	r3, #2
 8005866:	d11b      	bne.n	80058a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f06f 0202 	mvn.w	r2, #2
 8005870:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	f003 0303 	and.w	r3, r3, #3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fa51 	bl	8005d2e <HAL_TIM_IC_CaptureCallback>
 800588c:	e005      	b.n	800589a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fa43 	bl	8005d1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fa5e 	bl	8005d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	f003 0304 	and.w	r3, r3, #4
 80058aa:	2b04      	cmp	r3, #4
 80058ac:	d122      	bne.n	80058f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b04      	cmp	r3, #4
 80058ba:	d11b      	bne.n	80058f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f06f 0204 	mvn.w	r2, #4
 80058c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2202      	movs	r2, #2
 80058ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fa27 	bl	8005d2e <HAL_TIM_IC_CaptureCallback>
 80058e0:	e005      	b.n	80058ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 fa19 	bl	8005d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fa34 	bl	8005d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	f003 0308 	and.w	r3, r3, #8
 80058fe:	2b08      	cmp	r3, #8
 8005900:	d122      	bne.n	8005948 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f003 0308 	and.w	r3, r3, #8
 800590c:	2b08      	cmp	r3, #8
 800590e:	d11b      	bne.n	8005948 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f06f 0208 	mvn.w	r2, #8
 8005918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2204      	movs	r2, #4
 800591e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	f003 0303 	and.w	r3, r3, #3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f9fd 	bl	8005d2e <HAL_TIM_IC_CaptureCallback>
 8005934:	e005      	b.n	8005942 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f9ef 	bl	8005d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 fa0a 	bl	8005d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	f003 0310 	and.w	r3, r3, #16
 8005952:	2b10      	cmp	r3, #16
 8005954:	d122      	bne.n	800599c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f003 0310 	and.w	r3, r3, #16
 8005960:	2b10      	cmp	r3, #16
 8005962:	d11b      	bne.n	800599c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f06f 0210 	mvn.w	r2, #16
 800596c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2208      	movs	r2, #8
 8005972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f9d3 	bl	8005d2e <HAL_TIM_IC_CaptureCallback>
 8005988:	e005      	b.n	8005996 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f9c5 	bl	8005d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f9e0 	bl	8005d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d10e      	bne.n	80059c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d107      	bne.n	80059c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f06f 0201 	mvn.w	r2, #1
 80059c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7fb fb18 	bl	8000ff8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d2:	2b80      	cmp	r3, #128	; 0x80
 80059d4:	d10e      	bne.n	80059f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e0:	2b80      	cmp	r3, #128	; 0x80
 80059e2:	d107      	bne.n	80059f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 fd86 	bl	8006500 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fe:	2b40      	cmp	r3, #64	; 0x40
 8005a00:	d10e      	bne.n	8005a20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0c:	2b40      	cmp	r3, #64	; 0x40
 8005a0e:	d107      	bne.n	8005a20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f9a5 	bl	8005d6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	f003 0320 	and.w	r3, r3, #32
 8005a2a:	2b20      	cmp	r3, #32
 8005a2c:	d10e      	bne.n	8005a4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f003 0320 	and.w	r3, r3, #32
 8005a38:	2b20      	cmp	r3, #32
 8005a3a:	d107      	bne.n	8005a4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f06f 0220 	mvn.w	r2, #32
 8005a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 fd50 	bl	80064ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a4c:	bf00      	nop
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a60:	2300      	movs	r3, #0
 8005a62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d101      	bne.n	8005a72 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005a6e:	2302      	movs	r3, #2
 8005a70:	e088      	b.n	8005b84 <HAL_TIM_IC_ConfigChannel+0x130>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d11b      	bne.n	8005ab8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6818      	ldr	r0, [r3, #0]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	6819      	ldr	r1, [r3, #0]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	f000 fae0 	bl	8006054 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699a      	ldr	r2, [r3, #24]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f022 020c 	bic.w	r2, r2, #12
 8005aa2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6999      	ldr	r1, [r3, #24]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	689a      	ldr	r2, [r3, #8]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	619a      	str	r2, [r3, #24]
 8005ab6:	e060      	b.n	8005b7a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	d11c      	bne.n	8005af8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6818      	ldr	r0, [r3, #0]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	6819      	ldr	r1, [r3, #0]
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	685a      	ldr	r2, [r3, #4]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	f000 fb58 	bl	8006182 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	699a      	ldr	r2, [r3, #24]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005ae0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6999      	ldr	r1, [r3, #24]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	021a      	lsls	r2, r3, #8
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	619a      	str	r2, [r3, #24]
 8005af6:	e040      	b.n	8005b7a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b08      	cmp	r3, #8
 8005afc:	d11b      	bne.n	8005b36 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6818      	ldr	r0, [r3, #0]
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	6819      	ldr	r1, [r3, #0]
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f000 fba5 	bl	800625c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	69da      	ldr	r2, [r3, #28]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 020c 	bic.w	r2, r2, #12
 8005b20:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	69d9      	ldr	r1, [r3, #28]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	61da      	str	r2, [r3, #28]
 8005b34:	e021      	b.n	8005b7a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b0c      	cmp	r3, #12
 8005b3a:	d11c      	bne.n	8005b76 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6818      	ldr	r0, [r3, #0]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	6819      	ldr	r1, [r3, #0]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f000 fbc2 	bl	80062d4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	69da      	ldr	r2, [r3, #28]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005b5e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	69d9      	ldr	r1, [r3, #28]
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	021a      	lsls	r2, r3, #8
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	61da      	str	r2, [r3, #28]
 8005b74:	e001      	b.n	8005b7a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3718      	adds	r7, #24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b96:	2300      	movs	r3, #0
 8005b98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d101      	bne.n	8005ba8 <HAL_TIM_ConfigClockSource+0x1c>
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	e0b4      	b.n	8005d12 <HAL_TIM_ConfigClockSource+0x186>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005bc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005be0:	d03e      	beq.n	8005c60 <HAL_TIM_ConfigClockSource+0xd4>
 8005be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005be6:	f200 8087 	bhi.w	8005cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bee:	f000 8086 	beq.w	8005cfe <HAL_TIM_ConfigClockSource+0x172>
 8005bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf6:	d87f      	bhi.n	8005cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bf8:	2b70      	cmp	r3, #112	; 0x70
 8005bfa:	d01a      	beq.n	8005c32 <HAL_TIM_ConfigClockSource+0xa6>
 8005bfc:	2b70      	cmp	r3, #112	; 0x70
 8005bfe:	d87b      	bhi.n	8005cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8005c00:	2b60      	cmp	r3, #96	; 0x60
 8005c02:	d050      	beq.n	8005ca6 <HAL_TIM_ConfigClockSource+0x11a>
 8005c04:	2b60      	cmp	r3, #96	; 0x60
 8005c06:	d877      	bhi.n	8005cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8005c08:	2b50      	cmp	r3, #80	; 0x50
 8005c0a:	d03c      	beq.n	8005c86 <HAL_TIM_ConfigClockSource+0xfa>
 8005c0c:	2b50      	cmp	r3, #80	; 0x50
 8005c0e:	d873      	bhi.n	8005cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8005c10:	2b40      	cmp	r3, #64	; 0x40
 8005c12:	d058      	beq.n	8005cc6 <HAL_TIM_ConfigClockSource+0x13a>
 8005c14:	2b40      	cmp	r3, #64	; 0x40
 8005c16:	d86f      	bhi.n	8005cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8005c18:	2b30      	cmp	r3, #48	; 0x30
 8005c1a:	d064      	beq.n	8005ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8005c1c:	2b30      	cmp	r3, #48	; 0x30
 8005c1e:	d86b      	bhi.n	8005cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8005c20:	2b20      	cmp	r3, #32
 8005c22:	d060      	beq.n	8005ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8005c24:	2b20      	cmp	r3, #32
 8005c26:	d867      	bhi.n	8005cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d05c      	beq.n	8005ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8005c2c:	2b10      	cmp	r3, #16
 8005c2e:	d05a      	beq.n	8005ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8005c30:	e062      	b.n	8005cf8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6818      	ldr	r0, [r3, #0]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	6899      	ldr	r1, [r3, #8]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	f000 fb9f 	bl	8006384 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	609a      	str	r2, [r3, #8]
      break;
 8005c5e:	e04f      	b.n	8005d00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6818      	ldr	r0, [r3, #0]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	6899      	ldr	r1, [r3, #8]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f000 fb88 	bl	8006384 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689a      	ldr	r2, [r3, #8]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c82:	609a      	str	r2, [r3, #8]
      break;
 8005c84:	e03c      	b.n	8005d00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6818      	ldr	r0, [r3, #0]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	6859      	ldr	r1, [r3, #4]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	461a      	mov	r2, r3
 8005c94:	f000 fa46 	bl	8006124 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2150      	movs	r1, #80	; 0x50
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f000 fb55 	bl	800634e <TIM_ITRx_SetConfig>
      break;
 8005ca4:	e02c      	b.n	8005d00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6818      	ldr	r0, [r3, #0]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	6859      	ldr	r1, [r3, #4]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	f000 faa2 	bl	80061fc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2160      	movs	r1, #96	; 0x60
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f000 fb45 	bl	800634e <TIM_ITRx_SetConfig>
      break;
 8005cc4:	e01c      	b.n	8005d00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6818      	ldr	r0, [r3, #0]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	6859      	ldr	r1, [r3, #4]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	f000 fa26 	bl	8006124 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2140      	movs	r1, #64	; 0x40
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 fb35 	bl	800634e <TIM_ITRx_SetConfig>
      break;
 8005ce4:	e00c      	b.n	8005d00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4619      	mov	r1, r3
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	f000 fb2c 	bl	800634e <TIM_ITRx_SetConfig>
      break;
 8005cf6:	e003      	b.n	8005d00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8005cfc:	e000      	b.n	8005d00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005cfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b083      	sub	sp, #12
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d22:	bf00      	nop
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b083      	sub	sp, #12
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d36:	bf00      	nop
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b083      	sub	sp, #12
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8005d4a:	bf00      	nop
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b083      	sub	sp, #12
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d5e:	bf00      	nop
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b083      	sub	sp, #12
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d72:	bf00      	nop
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b083      	sub	sp, #12
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005d86:	bf00      	nop
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b084      	sub	sp, #16
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d107      	bne.n	8005dba <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2201      	movs	r2, #1
 8005dae:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005db8:	e02a      	b.n	8005e10 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d107      	bne.n	8005dd4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dd2:	e01d      	b.n	8005e10 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d107      	bne.n	8005dee <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2204      	movs	r2, #4
 8005de2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dec:	e010      	b.n	8005e10 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d107      	bne.n	8005e08 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2208      	movs	r2, #8
 8005dfc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e06:	e003      	b.n	8005e10 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f7ff ffb4 	bl	8005d7e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	771a      	strb	r2, [r3, #28]
}
 8005e1c:	bf00      	nop
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e30:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d10f      	bne.n	8005e5c <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d146      	bne.n	8005ed8 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e5a:	e03d      	b.n	8005ed8 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d10f      	bne.n	8005e86 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2202      	movs	r2, #2
 8005e6a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	69db      	ldr	r3, [r3, #28]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d131      	bne.n	8005ed8 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e84:	e028      	b.n	8005ed8 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d10f      	bne.n	8005eb0 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2204      	movs	r2, #4
 8005e94:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d11c      	bne.n	8005ed8 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005eae:	e013      	b.n	8005ed8 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d10e      	bne.n	8005ed8 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2208      	movs	r2, #8
 8005ebe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	69db      	ldr	r3, [r3, #28]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d107      	bne.n	8005ed8 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f7ff ff28 	bl	8005d2e <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	771a      	strb	r2, [r3, #28]
}
 8005ee4:	bf00      	nop
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d103      	bne.n	8005f0c <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2201      	movs	r2, #1
 8005f08:	771a      	strb	r2, [r3, #28]
 8005f0a:	e019      	b.n	8005f40 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d103      	bne.n	8005f1e <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2202      	movs	r2, #2
 8005f1a:	771a      	strb	r2, [r3, #28]
 8005f1c:	e010      	b.n	8005f40 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d103      	bne.n	8005f30 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2204      	movs	r2, #4
 8005f2c:	771a      	strb	r2, [r3, #28]
 8005f2e:	e007      	b.n	8005f40 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d102      	bne.n	8005f40 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2208      	movs	r2, #8
 8005f3e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f7ff fefe 	bl	8005d42 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	771a      	strb	r2, [r3, #28]
}
 8005f4c:	bf00      	nop
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a34      	ldr	r2, [pc, #208]	; (8006038 <TIM_Base_SetConfig+0xe4>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d00f      	beq.n	8005f8c <TIM_Base_SetConfig+0x38>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f72:	d00b      	beq.n	8005f8c <TIM_Base_SetConfig+0x38>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a31      	ldr	r2, [pc, #196]	; (800603c <TIM_Base_SetConfig+0xe8>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d007      	beq.n	8005f8c <TIM_Base_SetConfig+0x38>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a30      	ldr	r2, [pc, #192]	; (8006040 <TIM_Base_SetConfig+0xec>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d003      	beq.n	8005f8c <TIM_Base_SetConfig+0x38>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a2f      	ldr	r2, [pc, #188]	; (8006044 <TIM_Base_SetConfig+0xf0>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d108      	bne.n	8005f9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a25      	ldr	r2, [pc, #148]	; (8006038 <TIM_Base_SetConfig+0xe4>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d01b      	beq.n	8005fde <TIM_Base_SetConfig+0x8a>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fac:	d017      	beq.n	8005fde <TIM_Base_SetConfig+0x8a>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a22      	ldr	r2, [pc, #136]	; (800603c <TIM_Base_SetConfig+0xe8>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d013      	beq.n	8005fde <TIM_Base_SetConfig+0x8a>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a21      	ldr	r2, [pc, #132]	; (8006040 <TIM_Base_SetConfig+0xec>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d00f      	beq.n	8005fde <TIM_Base_SetConfig+0x8a>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a20      	ldr	r2, [pc, #128]	; (8006044 <TIM_Base_SetConfig+0xf0>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d00b      	beq.n	8005fde <TIM_Base_SetConfig+0x8a>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a1f      	ldr	r2, [pc, #124]	; (8006048 <TIM_Base_SetConfig+0xf4>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d007      	beq.n	8005fde <TIM_Base_SetConfig+0x8a>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a1e      	ldr	r2, [pc, #120]	; (800604c <TIM_Base_SetConfig+0xf8>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d003      	beq.n	8005fde <TIM_Base_SetConfig+0x8a>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a1d      	ldr	r2, [pc, #116]	; (8006050 <TIM_Base_SetConfig+0xfc>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d108      	bne.n	8005ff0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	689a      	ldr	r2, [r3, #8]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a08      	ldr	r2, [pc, #32]	; (8006038 <TIM_Base_SetConfig+0xe4>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d103      	bne.n	8006024 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	691a      	ldr	r2, [r3, #16]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	615a      	str	r2, [r3, #20]
}
 800602a:	bf00      	nop
 800602c:	3714      	adds	r7, #20
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	40010000 	.word	0x40010000
 800603c:	40000400 	.word	0x40000400
 8006040:	40000800 	.word	0x40000800
 8006044:	40000c00 	.word	0x40000c00
 8006048:	40014000 	.word	0x40014000
 800604c:	40014400 	.word	0x40014400
 8006050:	40014800 	.word	0x40014800

08006054 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006054:	b480      	push	{r7}
 8006056:	b087      	sub	sp, #28
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
 8006060:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	f023 0201 	bic.w	r2, r3, #1
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	699b      	ldr	r3, [r3, #24]
 8006072:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	4a24      	ldr	r2, [pc, #144]	; (8006110 <TIM_TI1_SetConfig+0xbc>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d013      	beq.n	80060aa <TIM_TI1_SetConfig+0x56>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006088:	d00f      	beq.n	80060aa <TIM_TI1_SetConfig+0x56>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	4a21      	ldr	r2, [pc, #132]	; (8006114 <TIM_TI1_SetConfig+0xc0>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d00b      	beq.n	80060aa <TIM_TI1_SetConfig+0x56>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	4a20      	ldr	r2, [pc, #128]	; (8006118 <TIM_TI1_SetConfig+0xc4>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d007      	beq.n	80060aa <TIM_TI1_SetConfig+0x56>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	4a1f      	ldr	r2, [pc, #124]	; (800611c <TIM_TI1_SetConfig+0xc8>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d003      	beq.n	80060aa <TIM_TI1_SetConfig+0x56>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	4a1e      	ldr	r2, [pc, #120]	; (8006120 <TIM_TI1_SetConfig+0xcc>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d101      	bne.n	80060ae <TIM_TI1_SetConfig+0x5a>
 80060aa:	2301      	movs	r3, #1
 80060ac:	e000      	b.n	80060b0 <TIM_TI1_SetConfig+0x5c>
 80060ae:	2300      	movs	r3, #0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d008      	beq.n	80060c6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f023 0303 	bic.w	r3, r3, #3
 80060ba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	617b      	str	r3, [r7, #20]
 80060c4:	e003      	b.n	80060ce <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f043 0301 	orr.w	r3, r3, #1
 80060cc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	011b      	lsls	r3, r3, #4
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	4313      	orrs	r3, r2
 80060e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	f023 030a 	bic.w	r3, r3, #10
 80060e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	f003 030a 	and.w	r3, r3, #10
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	621a      	str	r2, [r3, #32]
}
 8006102:	bf00      	nop
 8006104:	371c      	adds	r7, #28
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	40010000 	.word	0x40010000
 8006114:	40000400 	.word	0x40000400
 8006118:	40000800 	.word	0x40000800
 800611c:	40000c00 	.word	0x40000c00
 8006120:	40014000 	.word	0x40014000

08006124 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6a1b      	ldr	r3, [r3, #32]
 8006134:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	f023 0201 	bic.w	r2, r3, #1
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800614e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	011b      	lsls	r3, r3, #4
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	4313      	orrs	r3, r2
 8006158:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f023 030a 	bic.w	r3, r3, #10
 8006160:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	4313      	orrs	r3, r2
 8006168:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	621a      	str	r2, [r3, #32]
}
 8006176:	bf00      	nop
 8006178:	371c      	adds	r7, #28
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006182:	b480      	push	{r7}
 8006184:	b087      	sub	sp, #28
 8006186:	af00      	add	r7, sp, #0
 8006188:	60f8      	str	r0, [r7, #12]
 800618a:	60b9      	str	r1, [r7, #8]
 800618c:	607a      	str	r2, [r7, #4]
 800618e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6a1b      	ldr	r3, [r3, #32]
 8006194:	f023 0210 	bic.w	r2, r3, #16
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	021b      	lsls	r3, r3, #8
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	031b      	lsls	r3, r3, #12
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061d4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	011b      	lsls	r3, r3, #4
 80061da:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	621a      	str	r2, [r3, #32]
}
 80061f0:	bf00      	nop
 80061f2:	371c      	adds	r7, #28
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b087      	sub	sp, #28
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6a1b      	ldr	r3, [r3, #32]
 800620c:	f023 0210 	bic.w	r2, r3, #16
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006226:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	031b      	lsls	r3, r3, #12
 800622c:	697a      	ldr	r2, [r7, #20]
 800622e:	4313      	orrs	r3, r2
 8006230:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006238:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	011b      	lsls	r3, r3, #4
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	4313      	orrs	r3, r2
 8006242:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	621a      	str	r2, [r3, #32]
}
 8006250:	bf00      	nop
 8006252:	371c      	adds	r7, #28
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800625c:	b480      	push	{r7}
 800625e:	b087      	sub	sp, #28
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]
 8006268:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6a1b      	ldr	r3, [r3, #32]
 8006280:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f023 0303 	bic.w	r3, r3, #3
 8006288:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4313      	orrs	r3, r2
 8006290:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006298:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	011b      	lsls	r3, r3, #4
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80062ac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	021b      	lsls	r3, r3, #8
 80062b2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	621a      	str	r2, [r3, #32]
}
 80062c8:	bf00      	nop
 80062ca:	371c      	adds	r7, #28
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
 80062e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6a1b      	ldr	r3, [r3, #32]
 80062f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006300:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	021b      	lsls	r3, r3, #8
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	4313      	orrs	r3, r2
 800630a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006312:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	031b      	lsls	r3, r3, #12
 8006318:	b29b      	uxth	r3, r3
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	4313      	orrs	r3, r2
 800631e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006326:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	031b      	lsls	r3, r3, #12
 800632c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	4313      	orrs	r3, r2
 8006334:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	697a      	ldr	r2, [r7, #20]
 800633a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	621a      	str	r2, [r3, #32]
}
 8006342:	bf00      	nop
 8006344:	371c      	adds	r7, #28
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800634e:	b480      	push	{r7}
 8006350:	b085      	sub	sp, #20
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006364:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4313      	orrs	r3, r2
 800636c:	f043 0307 	orr.w	r3, r3, #7
 8006370:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	609a      	str	r2, [r3, #8]
}
 8006378:	bf00      	nop
 800637a:	3714      	adds	r7, #20
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
 8006390:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800639e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	021a      	lsls	r2, r3, #8
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	431a      	orrs	r2, r3
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	609a      	str	r2, [r3, #8]
}
 80063b8:	bf00      	nop
 80063ba:	371c      	adds	r7, #28
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	f003 031f 	and.w	r3, r3, #31
 80063d6:	2201      	movs	r2, #1
 80063d8:	fa02 f303 	lsl.w	r3, r2, r3
 80063dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6a1a      	ldr	r2, [r3, #32]
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	43db      	mvns	r3, r3
 80063e6:	401a      	ands	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6a1a      	ldr	r2, [r3, #32]
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	f003 031f 	and.w	r3, r3, #31
 80063f6:	6879      	ldr	r1, [r7, #4]
 80063f8:	fa01 f303 	lsl.w	r3, r1, r3
 80063fc:	431a      	orrs	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	621a      	str	r2, [r3, #32]
}
 8006402:	bf00      	nop
 8006404:	371c      	adds	r7, #28
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
	...

08006410 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006420:	2b01      	cmp	r3, #1
 8006422:	d101      	bne.n	8006428 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006424:	2302      	movs	r3, #2
 8006426:	e050      	b.n	80064ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2202      	movs	r2, #2
 8006434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800644e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	4313      	orrs	r3, r2
 8006458:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a1c      	ldr	r2, [pc, #112]	; (80064d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d018      	beq.n	800649e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006474:	d013      	beq.n	800649e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a18      	ldr	r2, [pc, #96]	; (80064dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d00e      	beq.n	800649e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a16      	ldr	r2, [pc, #88]	; (80064e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d009      	beq.n	800649e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a15      	ldr	r2, [pc, #84]	; (80064e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d004      	beq.n	800649e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a13      	ldr	r2, [pc, #76]	; (80064e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d10c      	bne.n	80064b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	40010000 	.word	0x40010000
 80064dc:	40000400 	.word	0x40000400
 80064e0:	40000800 	.word	0x40000800
 80064e4:	40000c00 	.word	0x40000c00
 80064e8:	40014000 	.word	0x40014000

080064ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e03f      	b.n	80065a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d106      	bne.n	8006540 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7fa ff32 	bl	80013a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2224      	movs	r2, #36	; 0x24
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006556:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fddb 	bl	8007114 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	691a      	ldr	r2, [r3, #16]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800656c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	695a      	ldr	r2, [r3, #20]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800657c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68da      	ldr	r2, [r3, #12]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800658c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2220      	movs	r2, #32
 8006598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2220      	movs	r2, #32
 80065a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3708      	adds	r7, #8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b08a      	sub	sp, #40	; 0x28
 80065b2:	af02      	add	r7, sp, #8
 80065b4:	60f8      	str	r0, [r7, #12]
 80065b6:	60b9      	str	r1, [r7, #8]
 80065b8:	603b      	str	r3, [r7, #0]
 80065ba:	4613      	mov	r3, r2
 80065bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80065be:	2300      	movs	r3, #0
 80065c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b20      	cmp	r3, #32
 80065cc:	d17c      	bne.n	80066c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d002      	beq.n	80065da <HAL_UART_Transmit+0x2c>
 80065d4:	88fb      	ldrh	r3, [r7, #6]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d101      	bne.n	80065de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e075      	b.n	80066ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d101      	bne.n	80065ec <HAL_UART_Transmit+0x3e>
 80065e8:	2302      	movs	r3, #2
 80065ea:	e06e      	b.n	80066ca <HAL_UART_Transmit+0x11c>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2221      	movs	r2, #33	; 0x21
 80065fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006602:	f7fb f85d 	bl	80016c0 <HAL_GetTick>
 8006606:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	88fa      	ldrh	r2, [r7, #6]
 800660c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	88fa      	ldrh	r2, [r7, #6]
 8006612:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800661c:	d108      	bne.n	8006630 <HAL_UART_Transmit+0x82>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d104      	bne.n	8006630 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006626:	2300      	movs	r3, #0
 8006628:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	61bb      	str	r3, [r7, #24]
 800662e:	e003      	b.n	8006638 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006634:	2300      	movs	r3, #0
 8006636:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006640:	e02a      	b.n	8006698 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	2200      	movs	r2, #0
 800664a:	2180      	movs	r1, #128	; 0x80
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 fb1f 	bl	8006c90 <UART_WaitOnFlagUntilTimeout>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e036      	b.n	80066ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10b      	bne.n	800667a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	881b      	ldrh	r3, [r3, #0]
 8006666:	461a      	mov	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006670:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	3302      	adds	r3, #2
 8006676:	61bb      	str	r3, [r7, #24]
 8006678:	e007      	b.n	800668a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	781a      	ldrb	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	3301      	adds	r3, #1
 8006688:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800668e:	b29b      	uxth	r3, r3
 8006690:	3b01      	subs	r3, #1
 8006692:	b29a      	uxth	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800669c:	b29b      	uxth	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1cf      	bne.n	8006642 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	9300      	str	r3, [sp, #0]
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	2200      	movs	r2, #0
 80066aa:	2140      	movs	r1, #64	; 0x40
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 faef 	bl	8006c90 <UART_WaitOnFlagUntilTimeout>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d001      	beq.n	80066bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e006      	b.n	80066ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2220      	movs	r2, #32
 80066c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80066c4:	2300      	movs	r3, #0
 80066c6:	e000      	b.n	80066ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80066c8:	2302      	movs	r3, #2
  }
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3720      	adds	r7, #32
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b084      	sub	sp, #16
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	60f8      	str	r0, [r7, #12]
 80066da:	60b9      	str	r1, [r7, #8]
 80066dc:	4613      	mov	r3, r2
 80066de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b20      	cmp	r3, #32
 80066ea:	d11d      	bne.n	8006728 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d002      	beq.n	80066f8 <HAL_UART_Receive_IT+0x26>
 80066f2:	88fb      	ldrh	r3, [r7, #6]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d101      	bne.n	80066fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e016      	b.n	800672a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006702:	2b01      	cmp	r3, #1
 8006704:	d101      	bne.n	800670a <HAL_UART_Receive_IT+0x38>
 8006706:	2302      	movs	r3, #2
 8006708:	e00f      	b.n	800672a <HAL_UART_Receive_IT+0x58>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006718:	88fb      	ldrh	r3, [r7, #6]
 800671a:	461a      	mov	r2, r3
 800671c:	68b9      	ldr	r1, [r7, #8]
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f000 fb24 	bl	8006d6c <UART_Start_Receive_IT>
 8006724:	4603      	mov	r3, r0
 8006726:	e000      	b.n	800672a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006728:	2302      	movs	r3, #2
  }
}
 800672a:	4618      	mov	r0, r3
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
	...

08006734 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b0ba      	sub	sp, #232	; 0xe8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800675a:	2300      	movs	r3, #0
 800675c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006760:	2300      	movs	r3, #0
 8006762:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800676a:	f003 030f 	and.w	r3, r3, #15
 800676e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006772:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10f      	bne.n	800679a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800677a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800677e:	f003 0320 	and.w	r3, r3, #32
 8006782:	2b00      	cmp	r3, #0
 8006784:	d009      	beq.n	800679a <HAL_UART_IRQHandler+0x66>
 8006786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800678a:	f003 0320 	and.w	r3, r3, #32
 800678e:	2b00      	cmp	r3, #0
 8006790:	d003      	beq.n	800679a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 fc03 	bl	8006f9e <UART_Receive_IT>
      return;
 8006798:	e256      	b.n	8006c48 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800679a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f000 80de 	beq.w	8006960 <HAL_UART_IRQHandler+0x22c>
 80067a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d106      	bne.n	80067be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80067b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f000 80d1 	beq.w	8006960 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00b      	beq.n	80067e2 <HAL_UART_IRQHandler+0xae>
 80067ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d005      	beq.n	80067e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067da:	f043 0201 	orr.w	r2, r3, #1
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e6:	f003 0304 	and.w	r3, r3, #4
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00b      	beq.n	8006806 <HAL_UART_IRQHandler+0xd2>
 80067ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d005      	beq.n	8006806 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fe:	f043 0202 	orr.w	r2, r3, #2
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00b      	beq.n	800682a <HAL_UART_IRQHandler+0xf6>
 8006812:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	d005      	beq.n	800682a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006822:	f043 0204 	orr.w	r2, r3, #4
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800682a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800682e:	f003 0308 	and.w	r3, r3, #8
 8006832:	2b00      	cmp	r3, #0
 8006834:	d011      	beq.n	800685a <HAL_UART_IRQHandler+0x126>
 8006836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800683a:	f003 0320 	and.w	r3, r3, #32
 800683e:	2b00      	cmp	r3, #0
 8006840:	d105      	bne.n	800684e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006842:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	2b00      	cmp	r3, #0
 800684c:	d005      	beq.n	800685a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006852:	f043 0208 	orr.w	r2, r3, #8
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685e:	2b00      	cmp	r3, #0
 8006860:	f000 81ed 	beq.w	8006c3e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006868:	f003 0320 	and.w	r3, r3, #32
 800686c:	2b00      	cmp	r3, #0
 800686e:	d008      	beq.n	8006882 <HAL_UART_IRQHandler+0x14e>
 8006870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006874:	f003 0320 	and.w	r3, r3, #32
 8006878:	2b00      	cmp	r3, #0
 800687a:	d002      	beq.n	8006882 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fb8e 	bl	8006f9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800688c:	2b40      	cmp	r3, #64	; 0x40
 800688e:	bf0c      	ite	eq
 8006890:	2301      	moveq	r3, #1
 8006892:	2300      	movne	r3, #0
 8006894:	b2db      	uxtb	r3, r3
 8006896:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689e:	f003 0308 	and.w	r3, r3, #8
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d103      	bne.n	80068ae <HAL_UART_IRQHandler+0x17a>
 80068a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d04f      	beq.n	800694e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fa96 	bl	8006de0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068be:	2b40      	cmp	r3, #64	; 0x40
 80068c0:	d141      	bne.n	8006946 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	3314      	adds	r3, #20
 80068c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068d0:	e853 3f00 	ldrex	r3, [r3]
 80068d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80068d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	3314      	adds	r3, #20
 80068ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80068ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80068f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80068fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80068fe:	e841 2300 	strex	r3, r2, [r1]
 8006902:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006906:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1d9      	bne.n	80068c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006912:	2b00      	cmp	r3, #0
 8006914:	d013      	beq.n	800693e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691a:	4a7d      	ldr	r2, [pc, #500]	; (8006b10 <HAL_UART_IRQHandler+0x3dc>)
 800691c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006922:	4618      	mov	r0, r3
 8006924:	f7fb fbd2 	bl	80020cc <HAL_DMA_Abort_IT>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d016      	beq.n	800695c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006938:	4610      	mov	r0, r2
 800693a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800693c:	e00e      	b.n	800695c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f990 	bl	8006c64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006944:	e00a      	b.n	800695c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f98c 	bl	8006c64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800694c:	e006      	b.n	800695c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f988 	bl	8006c64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800695a:	e170      	b.n	8006c3e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800695c:	bf00      	nop
    return;
 800695e:	e16e      	b.n	8006c3e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006964:	2b01      	cmp	r3, #1
 8006966:	f040 814a 	bne.w	8006bfe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800696a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800696e:	f003 0310 	and.w	r3, r3, #16
 8006972:	2b00      	cmp	r3, #0
 8006974:	f000 8143 	beq.w	8006bfe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800697c:	f003 0310 	and.w	r3, r3, #16
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 813c 	beq.w	8006bfe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006986:	2300      	movs	r3, #0
 8006988:	60bb      	str	r3, [r7, #8]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	60bb      	str	r3, [r7, #8]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	60bb      	str	r3, [r7, #8]
 800699a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a6:	2b40      	cmp	r3, #64	; 0x40
 80069a8:	f040 80b4 	bne.w	8006b14 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 8140 	beq.w	8006c42 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069ca:	429a      	cmp	r2, r3
 80069cc:	f080 8139 	bcs.w	8006c42 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069e2:	f000 8088 	beq.w	8006af6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	330c      	adds	r3, #12
 80069ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069f4:	e853 3f00 	ldrex	r3, [r3]
 80069f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80069fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	330c      	adds	r3, #12
 8006a0e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006a12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a22:	e841 2300 	strex	r3, r2, [r1]
 8006a26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1d9      	bne.n	80069e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	3314      	adds	r3, #20
 8006a38:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a3c:	e853 3f00 	ldrex	r3, [r3]
 8006a40:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a44:	f023 0301 	bic.w	r3, r3, #1
 8006a48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	3314      	adds	r3, #20
 8006a52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a56:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a5a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a62:	e841 2300 	strex	r3, r2, [r1]
 8006a66:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1e1      	bne.n	8006a32 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	3314      	adds	r3, #20
 8006a74:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a78:	e853 3f00 	ldrex	r3, [r3]
 8006a7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	3314      	adds	r3, #20
 8006a8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a94:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a9a:	e841 2300 	strex	r3, r2, [r1]
 8006a9e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006aa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1e3      	bne.n	8006a6e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	330c      	adds	r3, #12
 8006aba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006abe:	e853 3f00 	ldrex	r3, [r3]
 8006ac2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ac6:	f023 0310 	bic.w	r3, r3, #16
 8006aca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	330c      	adds	r3, #12
 8006ad4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006ad8:	65ba      	str	r2, [r7, #88]	; 0x58
 8006ada:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006adc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ade:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ae0:	e841 2300 	strex	r3, r2, [r1]
 8006ae4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1e3      	bne.n	8006ab4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7fb fa7b 	bl	8001fec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	4619      	mov	r1, r3
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f8b6 	bl	8006c78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b0c:	e099      	b.n	8006c42 <HAL_UART_IRQHandler+0x50e>
 8006b0e:	bf00      	nop
 8006b10:	08006ea7 	.word	0x08006ea7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f000 808b 	beq.w	8006c46 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006b30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f000 8086 	beq.w	8006c46 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	330c      	adds	r3, #12
 8006b40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	330c      	adds	r3, #12
 8006b5a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006b5e:	647a      	str	r2, [r7, #68]	; 0x44
 8006b60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b66:	e841 2300 	strex	r3, r2, [r1]
 8006b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1e3      	bne.n	8006b3a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3314      	adds	r3, #20
 8006b78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7c:	e853 3f00 	ldrex	r3, [r3]
 8006b80:	623b      	str	r3, [r7, #32]
   return(result);
 8006b82:	6a3b      	ldr	r3, [r7, #32]
 8006b84:	f023 0301 	bic.w	r3, r3, #1
 8006b88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	3314      	adds	r3, #20
 8006b92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b96:	633a      	str	r2, [r7, #48]	; 0x30
 8006b98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b9e:	e841 2300 	strex	r3, r2, [r1]
 8006ba2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1e3      	bne.n	8006b72 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2220      	movs	r2, #32
 8006bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	330c      	adds	r3, #12
 8006bbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	e853 3f00 	ldrex	r3, [r3]
 8006bc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f023 0310 	bic.w	r3, r3, #16
 8006bce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	330c      	adds	r3, #12
 8006bd8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006bdc:	61fa      	str	r2, [r7, #28]
 8006bde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be0:	69b9      	ldr	r1, [r7, #24]
 8006be2:	69fa      	ldr	r2, [r7, #28]
 8006be4:	e841 2300 	strex	r3, r2, [r1]
 8006be8:	617b      	str	r3, [r7, #20]
   return(result);
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d1e3      	bne.n	8006bb8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bf0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 f83e 	bl	8006c78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bfc:	e023      	b.n	8006c46 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d009      	beq.n	8006c1e <HAL_UART_IRQHandler+0x4ea>
 8006c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d003      	beq.n	8006c1e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f959 	bl	8006ece <UART_Transmit_IT>
    return;
 8006c1c:	e014      	b.n	8006c48 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00e      	beq.n	8006c48 <HAL_UART_IRQHandler+0x514>
 8006c2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d008      	beq.n	8006c48 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f999 	bl	8006f6e <UART_EndTransmit_IT>
    return;
 8006c3c:	e004      	b.n	8006c48 <HAL_UART_IRQHandler+0x514>
    return;
 8006c3e:	bf00      	nop
 8006c40:	e002      	b.n	8006c48 <HAL_UART_IRQHandler+0x514>
      return;
 8006c42:	bf00      	nop
 8006c44:	e000      	b.n	8006c48 <HAL_UART_IRQHandler+0x514>
      return;
 8006c46:	bf00      	nop
  }
}
 8006c48:	37e8      	adds	r7, #232	; 0xe8
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop

08006c50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	460b      	mov	r3, r1
 8006c82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b090      	sub	sp, #64	; 0x40
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	603b      	str	r3, [r7, #0]
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ca0:	e050      	b.n	8006d44 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca8:	d04c      	beq.n	8006d44 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d007      	beq.n	8006cc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006cb0:	f7fa fd06 	bl	80016c0 <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d241      	bcs.n	8006d44 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	330c      	adds	r3, #12
 8006cc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cca:	e853 3f00 	ldrex	r3, [r3]
 8006cce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	330c      	adds	r3, #12
 8006cde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ce0:	637a      	str	r2, [r7, #52]	; 0x34
 8006ce2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ce6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ce8:	e841 2300 	strex	r3, r2, [r1]
 8006cec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1e5      	bne.n	8006cc0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	3314      	adds	r3, #20
 8006cfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	e853 3f00 	ldrex	r3, [r3]
 8006d02:	613b      	str	r3, [r7, #16]
   return(result);
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	f023 0301 	bic.w	r3, r3, #1
 8006d0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	3314      	adds	r3, #20
 8006d12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d14:	623a      	str	r2, [r7, #32]
 8006d16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d18:	69f9      	ldr	r1, [r7, #28]
 8006d1a:	6a3a      	ldr	r2, [r7, #32]
 8006d1c:	e841 2300 	strex	r3, r2, [r1]
 8006d20:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1e5      	bne.n	8006cf4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2220      	movs	r2, #32
 8006d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2220      	movs	r2, #32
 8006d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e00f      	b.n	8006d64 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	bf0c      	ite	eq
 8006d54:	2301      	moveq	r3, #1
 8006d56:	2300      	movne	r3, #0
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	79fb      	ldrb	r3, [r7, #7]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d09f      	beq.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3740      	adds	r7, #64	; 0x40
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	4613      	mov	r3, r2
 8006d78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	88fa      	ldrh	r2, [r7, #6]
 8006d84:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	88fa      	ldrh	r2, [r7, #6]
 8006d8a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2222      	movs	r2, #34	; 0x22
 8006d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68da      	ldr	r2, [r3, #12]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006db0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	695a      	ldr	r2, [r3, #20]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f042 0201 	orr.w	r2, r2, #1
 8006dc0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68da      	ldr	r2, [r3, #12]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f042 0220 	orr.w	r2, r2, #32
 8006dd0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3714      	adds	r7, #20
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b095      	sub	sp, #84	; 0x54
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	330c      	adds	r3, #12
 8006dee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df2:	e853 3f00 	ldrex	r3, [r3]
 8006df6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	330c      	adds	r3, #12
 8006e06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e08:	643a      	str	r2, [r7, #64]	; 0x40
 8006e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e10:	e841 2300 	strex	r3, r2, [r1]
 8006e14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1e5      	bne.n	8006de8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	3314      	adds	r3, #20
 8006e22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e24:	6a3b      	ldr	r3, [r7, #32]
 8006e26:	e853 3f00 	ldrex	r3, [r3]
 8006e2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	f023 0301 	bic.w	r3, r3, #1
 8006e32:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	3314      	adds	r3, #20
 8006e3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e44:	e841 2300 	strex	r3, r2, [r1]
 8006e48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1e5      	bne.n	8006e1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d119      	bne.n	8006e8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	330c      	adds	r3, #12
 8006e5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	e853 3f00 	ldrex	r3, [r3]
 8006e66:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	f023 0310 	bic.w	r3, r3, #16
 8006e6e:	647b      	str	r3, [r7, #68]	; 0x44
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	330c      	adds	r3, #12
 8006e76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e78:	61ba      	str	r2, [r7, #24]
 8006e7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7c:	6979      	ldr	r1, [r7, #20]
 8006e7e:	69ba      	ldr	r2, [r7, #24]
 8006e80:	e841 2300 	strex	r3, r2, [r1]
 8006e84:	613b      	str	r3, [r7, #16]
   return(result);
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d1e5      	bne.n	8006e58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2220      	movs	r2, #32
 8006e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006e9a:	bf00      	nop
 8006e9c:	3754      	adds	r7, #84	; 0x54
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b084      	sub	sp, #16
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f7ff fecf 	bl	8006c64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ec6:	bf00      	nop
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006ece:	b480      	push	{r7}
 8006ed0:	b085      	sub	sp, #20
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b21      	cmp	r3, #33	; 0x21
 8006ee0:	d13e      	bne.n	8006f60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eea:	d114      	bne.n	8006f16 <UART_Transmit_IT+0x48>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d110      	bne.n	8006f16 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a1b      	ldr	r3, [r3, #32]
 8006ef8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	881b      	ldrh	r3, [r3, #0]
 8006efe:	461a      	mov	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
 8006f0e:	1c9a      	adds	r2, r3, #2
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	621a      	str	r2, [r3, #32]
 8006f14:	e008      	b.n	8006f28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	1c59      	adds	r1, r3, #1
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	6211      	str	r1, [r2, #32]
 8006f20:	781a      	ldrb	r2, [r3, #0]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	4619      	mov	r1, r3
 8006f36:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10f      	bne.n	8006f5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68da      	ldr	r2, [r3, #12]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68da      	ldr	r2, [r3, #12]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	e000      	b.n	8006f62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f60:	2302      	movs	r3, #2
  }
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3714      	adds	r7, #20
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr

08006f6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b082      	sub	sp, #8
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68da      	ldr	r2, [r3, #12]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2220      	movs	r2, #32
 8006f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f7ff fe5e 	bl	8006c50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b08c      	sub	sp, #48	; 0x30
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b22      	cmp	r3, #34	; 0x22
 8006fb0:	f040 80ab 	bne.w	800710a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fbc:	d117      	bne.n	8006fee <UART_Receive_IT+0x50>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d113      	bne.n	8006fee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe6:	1c9a      	adds	r2, r3, #2
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	629a      	str	r2, [r3, #40]	; 0x28
 8006fec:	e026      	b.n	800703c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007000:	d007      	beq.n	8007012 <UART_Receive_IT+0x74>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10a      	bne.n	8007020 <UART_Receive_IT+0x82>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d106      	bne.n	8007020 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	b2da      	uxtb	r2, r3
 800701a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701c:	701a      	strb	r2, [r3, #0]
 800701e:	e008      	b.n	8007032 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	b2db      	uxtb	r3, r3
 8007028:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800702c:	b2da      	uxtb	r2, r3
 800702e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007030:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007036:	1c5a      	adds	r2, r3, #1
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007040:	b29b      	uxth	r3, r3
 8007042:	3b01      	subs	r3, #1
 8007044:	b29b      	uxth	r3, r3
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	4619      	mov	r1, r3
 800704a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800704c:	2b00      	cmp	r3, #0
 800704e:	d15a      	bne.n	8007106 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68da      	ldr	r2, [r3, #12]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f022 0220 	bic.w	r2, r2, #32
 800705e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68da      	ldr	r2, [r3, #12]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800706e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	695a      	ldr	r2, [r3, #20]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f022 0201 	bic.w	r2, r2, #1
 800707e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2220      	movs	r2, #32
 8007084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708c:	2b01      	cmp	r3, #1
 800708e:	d135      	bne.n	80070fc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	330c      	adds	r3, #12
 800709c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	e853 3f00 	ldrex	r3, [r3]
 80070a4:	613b      	str	r3, [r7, #16]
   return(result);
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	f023 0310 	bic.w	r3, r3, #16
 80070ac:	627b      	str	r3, [r7, #36]	; 0x24
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	330c      	adds	r3, #12
 80070b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070b6:	623a      	str	r2, [r7, #32]
 80070b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ba:	69f9      	ldr	r1, [r7, #28]
 80070bc:	6a3a      	ldr	r2, [r7, #32]
 80070be:	e841 2300 	strex	r3, r2, [r1]
 80070c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1e5      	bne.n	8007096 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0310 	and.w	r3, r3, #16
 80070d4:	2b10      	cmp	r3, #16
 80070d6:	d10a      	bne.n	80070ee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070d8:	2300      	movs	r3, #0
 80070da:	60fb      	str	r3, [r7, #12]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	60fb      	str	r3, [r7, #12]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	60fb      	str	r3, [r7, #12]
 80070ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070f2:	4619      	mov	r1, r3
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f7ff fdbf 	bl	8006c78 <HAL_UARTEx_RxEventCallback>
 80070fa:	e002      	b.n	8007102 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f7f9 feb9 	bl	8000e74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	e002      	b.n	800710c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007106:	2300      	movs	r3, #0
 8007108:	e000      	b.n	800710c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800710a:	2302      	movs	r3, #2
  }
}
 800710c:	4618      	mov	r0, r3
 800710e:	3730      	adds	r7, #48	; 0x30
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007118:	b09f      	sub	sp, #124	; 0x7c
 800711a:	af00      	add	r7, sp, #0
 800711c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800711e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800712a:	68d9      	ldr	r1, [r3, #12]
 800712c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	ea40 0301 	orr.w	r3, r0, r1
 8007134:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007138:	689a      	ldr	r2, [r3, #8]
 800713a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	431a      	orrs	r2, r3
 8007140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	431a      	orrs	r2, r3
 8007146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007148:	69db      	ldr	r3, [r3, #28]
 800714a:	4313      	orrs	r3, r2
 800714c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800714e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007158:	f021 010c 	bic.w	r1, r1, #12
 800715c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007162:	430b      	orrs	r3, r1
 8007164:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	695b      	ldr	r3, [r3, #20]
 800716c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007172:	6999      	ldr	r1, [r3, #24]
 8007174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	ea40 0301 	orr.w	r3, r0, r1
 800717c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800717e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	4bc5      	ldr	r3, [pc, #788]	; (8007498 <UART_SetConfig+0x384>)
 8007184:	429a      	cmp	r2, r3
 8007186:	d004      	beq.n	8007192 <UART_SetConfig+0x7e>
 8007188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	4bc3      	ldr	r3, [pc, #780]	; (800749c <UART_SetConfig+0x388>)
 800718e:	429a      	cmp	r2, r3
 8007190:	d103      	bne.n	800719a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007192:	f7fd ffb9 	bl	8005108 <HAL_RCC_GetPCLK2Freq>
 8007196:	6778      	str	r0, [r7, #116]	; 0x74
 8007198:	e002      	b.n	80071a0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800719a:	f7fd ffa1 	bl	80050e0 <HAL_RCC_GetPCLK1Freq>
 800719e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071a2:	69db      	ldr	r3, [r3, #28]
 80071a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071a8:	f040 80b6 	bne.w	8007318 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071ae:	461c      	mov	r4, r3
 80071b0:	f04f 0500 	mov.w	r5, #0
 80071b4:	4622      	mov	r2, r4
 80071b6:	462b      	mov	r3, r5
 80071b8:	1891      	adds	r1, r2, r2
 80071ba:	6439      	str	r1, [r7, #64]	; 0x40
 80071bc:	415b      	adcs	r3, r3
 80071be:	647b      	str	r3, [r7, #68]	; 0x44
 80071c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80071c4:	1912      	adds	r2, r2, r4
 80071c6:	eb45 0303 	adc.w	r3, r5, r3
 80071ca:	f04f 0000 	mov.w	r0, #0
 80071ce:	f04f 0100 	mov.w	r1, #0
 80071d2:	00d9      	lsls	r1, r3, #3
 80071d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071d8:	00d0      	lsls	r0, r2, #3
 80071da:	4602      	mov	r2, r0
 80071dc:	460b      	mov	r3, r1
 80071de:	1911      	adds	r1, r2, r4
 80071e0:	6639      	str	r1, [r7, #96]	; 0x60
 80071e2:	416b      	adcs	r3, r5
 80071e4:	667b      	str	r3, [r7, #100]	; 0x64
 80071e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	461a      	mov	r2, r3
 80071ec:	f04f 0300 	mov.w	r3, #0
 80071f0:	1891      	adds	r1, r2, r2
 80071f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80071f4:	415b      	adcs	r3, r3
 80071f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80071fc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007200:	f7f9 f846 	bl	8000290 <__aeabi_uldivmod>
 8007204:	4602      	mov	r2, r0
 8007206:	460b      	mov	r3, r1
 8007208:	4ba5      	ldr	r3, [pc, #660]	; (80074a0 <UART_SetConfig+0x38c>)
 800720a:	fba3 2302 	umull	r2, r3, r3, r2
 800720e:	095b      	lsrs	r3, r3, #5
 8007210:	011e      	lsls	r6, r3, #4
 8007212:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007214:	461c      	mov	r4, r3
 8007216:	f04f 0500 	mov.w	r5, #0
 800721a:	4622      	mov	r2, r4
 800721c:	462b      	mov	r3, r5
 800721e:	1891      	adds	r1, r2, r2
 8007220:	6339      	str	r1, [r7, #48]	; 0x30
 8007222:	415b      	adcs	r3, r3
 8007224:	637b      	str	r3, [r7, #52]	; 0x34
 8007226:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800722a:	1912      	adds	r2, r2, r4
 800722c:	eb45 0303 	adc.w	r3, r5, r3
 8007230:	f04f 0000 	mov.w	r0, #0
 8007234:	f04f 0100 	mov.w	r1, #0
 8007238:	00d9      	lsls	r1, r3, #3
 800723a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800723e:	00d0      	lsls	r0, r2, #3
 8007240:	4602      	mov	r2, r0
 8007242:	460b      	mov	r3, r1
 8007244:	1911      	adds	r1, r2, r4
 8007246:	65b9      	str	r1, [r7, #88]	; 0x58
 8007248:	416b      	adcs	r3, r5
 800724a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800724c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	461a      	mov	r2, r3
 8007252:	f04f 0300 	mov.w	r3, #0
 8007256:	1891      	adds	r1, r2, r2
 8007258:	62b9      	str	r1, [r7, #40]	; 0x28
 800725a:	415b      	adcs	r3, r3
 800725c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800725e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007262:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007266:	f7f9 f813 	bl	8000290 <__aeabi_uldivmod>
 800726a:	4602      	mov	r2, r0
 800726c:	460b      	mov	r3, r1
 800726e:	4b8c      	ldr	r3, [pc, #560]	; (80074a0 <UART_SetConfig+0x38c>)
 8007270:	fba3 1302 	umull	r1, r3, r3, r2
 8007274:	095b      	lsrs	r3, r3, #5
 8007276:	2164      	movs	r1, #100	; 0x64
 8007278:	fb01 f303 	mul.w	r3, r1, r3
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	00db      	lsls	r3, r3, #3
 8007280:	3332      	adds	r3, #50	; 0x32
 8007282:	4a87      	ldr	r2, [pc, #540]	; (80074a0 <UART_SetConfig+0x38c>)
 8007284:	fba2 2303 	umull	r2, r3, r2, r3
 8007288:	095b      	lsrs	r3, r3, #5
 800728a:	005b      	lsls	r3, r3, #1
 800728c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007290:	441e      	add	r6, r3
 8007292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007294:	4618      	mov	r0, r3
 8007296:	f04f 0100 	mov.w	r1, #0
 800729a:	4602      	mov	r2, r0
 800729c:	460b      	mov	r3, r1
 800729e:	1894      	adds	r4, r2, r2
 80072a0:	623c      	str	r4, [r7, #32]
 80072a2:	415b      	adcs	r3, r3
 80072a4:	627b      	str	r3, [r7, #36]	; 0x24
 80072a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80072aa:	1812      	adds	r2, r2, r0
 80072ac:	eb41 0303 	adc.w	r3, r1, r3
 80072b0:	f04f 0400 	mov.w	r4, #0
 80072b4:	f04f 0500 	mov.w	r5, #0
 80072b8:	00dd      	lsls	r5, r3, #3
 80072ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80072be:	00d4      	lsls	r4, r2, #3
 80072c0:	4622      	mov	r2, r4
 80072c2:	462b      	mov	r3, r5
 80072c4:	1814      	adds	r4, r2, r0
 80072c6:	653c      	str	r4, [r7, #80]	; 0x50
 80072c8:	414b      	adcs	r3, r1
 80072ca:	657b      	str	r3, [r7, #84]	; 0x54
 80072cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	461a      	mov	r2, r3
 80072d2:	f04f 0300 	mov.w	r3, #0
 80072d6:	1891      	adds	r1, r2, r2
 80072d8:	61b9      	str	r1, [r7, #24]
 80072da:	415b      	adcs	r3, r3
 80072dc:	61fb      	str	r3, [r7, #28]
 80072de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072e2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80072e6:	f7f8 ffd3 	bl	8000290 <__aeabi_uldivmod>
 80072ea:	4602      	mov	r2, r0
 80072ec:	460b      	mov	r3, r1
 80072ee:	4b6c      	ldr	r3, [pc, #432]	; (80074a0 <UART_SetConfig+0x38c>)
 80072f0:	fba3 1302 	umull	r1, r3, r3, r2
 80072f4:	095b      	lsrs	r3, r3, #5
 80072f6:	2164      	movs	r1, #100	; 0x64
 80072f8:	fb01 f303 	mul.w	r3, r1, r3
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	00db      	lsls	r3, r3, #3
 8007300:	3332      	adds	r3, #50	; 0x32
 8007302:	4a67      	ldr	r2, [pc, #412]	; (80074a0 <UART_SetConfig+0x38c>)
 8007304:	fba2 2303 	umull	r2, r3, r2, r3
 8007308:	095b      	lsrs	r3, r3, #5
 800730a:	f003 0207 	and.w	r2, r3, #7
 800730e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4432      	add	r2, r6
 8007314:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007316:	e0b9      	b.n	800748c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007318:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800731a:	461c      	mov	r4, r3
 800731c:	f04f 0500 	mov.w	r5, #0
 8007320:	4622      	mov	r2, r4
 8007322:	462b      	mov	r3, r5
 8007324:	1891      	adds	r1, r2, r2
 8007326:	6139      	str	r1, [r7, #16]
 8007328:	415b      	adcs	r3, r3
 800732a:	617b      	str	r3, [r7, #20]
 800732c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007330:	1912      	adds	r2, r2, r4
 8007332:	eb45 0303 	adc.w	r3, r5, r3
 8007336:	f04f 0000 	mov.w	r0, #0
 800733a:	f04f 0100 	mov.w	r1, #0
 800733e:	00d9      	lsls	r1, r3, #3
 8007340:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007344:	00d0      	lsls	r0, r2, #3
 8007346:	4602      	mov	r2, r0
 8007348:	460b      	mov	r3, r1
 800734a:	eb12 0804 	adds.w	r8, r2, r4
 800734e:	eb43 0905 	adc.w	r9, r3, r5
 8007352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	4618      	mov	r0, r3
 8007358:	f04f 0100 	mov.w	r1, #0
 800735c:	f04f 0200 	mov.w	r2, #0
 8007360:	f04f 0300 	mov.w	r3, #0
 8007364:	008b      	lsls	r3, r1, #2
 8007366:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800736a:	0082      	lsls	r2, r0, #2
 800736c:	4640      	mov	r0, r8
 800736e:	4649      	mov	r1, r9
 8007370:	f7f8 ff8e 	bl	8000290 <__aeabi_uldivmod>
 8007374:	4602      	mov	r2, r0
 8007376:	460b      	mov	r3, r1
 8007378:	4b49      	ldr	r3, [pc, #292]	; (80074a0 <UART_SetConfig+0x38c>)
 800737a:	fba3 2302 	umull	r2, r3, r3, r2
 800737e:	095b      	lsrs	r3, r3, #5
 8007380:	011e      	lsls	r6, r3, #4
 8007382:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007384:	4618      	mov	r0, r3
 8007386:	f04f 0100 	mov.w	r1, #0
 800738a:	4602      	mov	r2, r0
 800738c:	460b      	mov	r3, r1
 800738e:	1894      	adds	r4, r2, r2
 8007390:	60bc      	str	r4, [r7, #8]
 8007392:	415b      	adcs	r3, r3
 8007394:	60fb      	str	r3, [r7, #12]
 8007396:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800739a:	1812      	adds	r2, r2, r0
 800739c:	eb41 0303 	adc.w	r3, r1, r3
 80073a0:	f04f 0400 	mov.w	r4, #0
 80073a4:	f04f 0500 	mov.w	r5, #0
 80073a8:	00dd      	lsls	r5, r3, #3
 80073aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80073ae:	00d4      	lsls	r4, r2, #3
 80073b0:	4622      	mov	r2, r4
 80073b2:	462b      	mov	r3, r5
 80073b4:	1814      	adds	r4, r2, r0
 80073b6:	64bc      	str	r4, [r7, #72]	; 0x48
 80073b8:	414b      	adcs	r3, r1
 80073ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	4618      	mov	r0, r3
 80073c2:	f04f 0100 	mov.w	r1, #0
 80073c6:	f04f 0200 	mov.w	r2, #0
 80073ca:	f04f 0300 	mov.w	r3, #0
 80073ce:	008b      	lsls	r3, r1, #2
 80073d0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80073d4:	0082      	lsls	r2, r0, #2
 80073d6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80073da:	f7f8 ff59 	bl	8000290 <__aeabi_uldivmod>
 80073de:	4602      	mov	r2, r0
 80073e0:	460b      	mov	r3, r1
 80073e2:	4b2f      	ldr	r3, [pc, #188]	; (80074a0 <UART_SetConfig+0x38c>)
 80073e4:	fba3 1302 	umull	r1, r3, r3, r2
 80073e8:	095b      	lsrs	r3, r3, #5
 80073ea:	2164      	movs	r1, #100	; 0x64
 80073ec:	fb01 f303 	mul.w	r3, r1, r3
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	011b      	lsls	r3, r3, #4
 80073f4:	3332      	adds	r3, #50	; 0x32
 80073f6:	4a2a      	ldr	r2, [pc, #168]	; (80074a0 <UART_SetConfig+0x38c>)
 80073f8:	fba2 2303 	umull	r2, r3, r2, r3
 80073fc:	095b      	lsrs	r3, r3, #5
 80073fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007402:	441e      	add	r6, r3
 8007404:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007406:	4618      	mov	r0, r3
 8007408:	f04f 0100 	mov.w	r1, #0
 800740c:	4602      	mov	r2, r0
 800740e:	460b      	mov	r3, r1
 8007410:	1894      	adds	r4, r2, r2
 8007412:	603c      	str	r4, [r7, #0]
 8007414:	415b      	adcs	r3, r3
 8007416:	607b      	str	r3, [r7, #4]
 8007418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800741c:	1812      	adds	r2, r2, r0
 800741e:	eb41 0303 	adc.w	r3, r1, r3
 8007422:	f04f 0400 	mov.w	r4, #0
 8007426:	f04f 0500 	mov.w	r5, #0
 800742a:	00dd      	lsls	r5, r3, #3
 800742c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007430:	00d4      	lsls	r4, r2, #3
 8007432:	4622      	mov	r2, r4
 8007434:	462b      	mov	r3, r5
 8007436:	eb12 0a00 	adds.w	sl, r2, r0
 800743a:	eb43 0b01 	adc.w	fp, r3, r1
 800743e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	4618      	mov	r0, r3
 8007444:	f04f 0100 	mov.w	r1, #0
 8007448:	f04f 0200 	mov.w	r2, #0
 800744c:	f04f 0300 	mov.w	r3, #0
 8007450:	008b      	lsls	r3, r1, #2
 8007452:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007456:	0082      	lsls	r2, r0, #2
 8007458:	4650      	mov	r0, sl
 800745a:	4659      	mov	r1, fp
 800745c:	f7f8 ff18 	bl	8000290 <__aeabi_uldivmod>
 8007460:	4602      	mov	r2, r0
 8007462:	460b      	mov	r3, r1
 8007464:	4b0e      	ldr	r3, [pc, #56]	; (80074a0 <UART_SetConfig+0x38c>)
 8007466:	fba3 1302 	umull	r1, r3, r3, r2
 800746a:	095b      	lsrs	r3, r3, #5
 800746c:	2164      	movs	r1, #100	; 0x64
 800746e:	fb01 f303 	mul.w	r3, r1, r3
 8007472:	1ad3      	subs	r3, r2, r3
 8007474:	011b      	lsls	r3, r3, #4
 8007476:	3332      	adds	r3, #50	; 0x32
 8007478:	4a09      	ldr	r2, [pc, #36]	; (80074a0 <UART_SetConfig+0x38c>)
 800747a:	fba2 2303 	umull	r2, r3, r2, r3
 800747e:	095b      	lsrs	r3, r3, #5
 8007480:	f003 020f 	and.w	r2, r3, #15
 8007484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4432      	add	r2, r6
 800748a:	609a      	str	r2, [r3, #8]
}
 800748c:	bf00      	nop
 800748e:	377c      	adds	r7, #124	; 0x7c
 8007490:	46bd      	mov	sp, r7
 8007492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007496:	bf00      	nop
 8007498:	40011000 	.word	0x40011000
 800749c:	40011400 	.word	0x40011400
 80074a0:	51eb851f 	.word	0x51eb851f

080074a4 <__errno>:
 80074a4:	4b01      	ldr	r3, [pc, #4]	; (80074ac <__errno+0x8>)
 80074a6:	6818      	ldr	r0, [r3, #0]
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	20000104 	.word	0x20000104

080074b0 <__libc_init_array>:
 80074b0:	b570      	push	{r4, r5, r6, lr}
 80074b2:	4d0d      	ldr	r5, [pc, #52]	; (80074e8 <__libc_init_array+0x38>)
 80074b4:	4c0d      	ldr	r4, [pc, #52]	; (80074ec <__libc_init_array+0x3c>)
 80074b6:	1b64      	subs	r4, r4, r5
 80074b8:	10a4      	asrs	r4, r4, #2
 80074ba:	2600      	movs	r6, #0
 80074bc:	42a6      	cmp	r6, r4
 80074be:	d109      	bne.n	80074d4 <__libc_init_array+0x24>
 80074c0:	4d0b      	ldr	r5, [pc, #44]	; (80074f0 <__libc_init_array+0x40>)
 80074c2:	4c0c      	ldr	r4, [pc, #48]	; (80074f4 <__libc_init_array+0x44>)
 80074c4:	f000 fc4e 	bl	8007d64 <_init>
 80074c8:	1b64      	subs	r4, r4, r5
 80074ca:	10a4      	asrs	r4, r4, #2
 80074cc:	2600      	movs	r6, #0
 80074ce:	42a6      	cmp	r6, r4
 80074d0:	d105      	bne.n	80074de <__libc_init_array+0x2e>
 80074d2:	bd70      	pop	{r4, r5, r6, pc}
 80074d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80074d8:	4798      	blx	r3
 80074da:	3601      	adds	r6, #1
 80074dc:	e7ee      	b.n	80074bc <__libc_init_array+0xc>
 80074de:	f855 3b04 	ldr.w	r3, [r5], #4
 80074e2:	4798      	blx	r3
 80074e4:	3601      	adds	r6, #1
 80074e6:	e7f2      	b.n	80074ce <__libc_init_array+0x1e>
 80074e8:	08007e5c 	.word	0x08007e5c
 80074ec:	08007e5c 	.word	0x08007e5c
 80074f0:	08007e5c 	.word	0x08007e5c
 80074f4:	08007e60 	.word	0x08007e60

080074f8 <memset>:
 80074f8:	4402      	add	r2, r0
 80074fa:	4603      	mov	r3, r0
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d100      	bne.n	8007502 <memset+0xa>
 8007500:	4770      	bx	lr
 8007502:	f803 1b01 	strb.w	r1, [r3], #1
 8007506:	e7f9      	b.n	80074fc <memset+0x4>

08007508 <siprintf>:
 8007508:	b40e      	push	{r1, r2, r3}
 800750a:	b500      	push	{lr}
 800750c:	b09c      	sub	sp, #112	; 0x70
 800750e:	ab1d      	add	r3, sp, #116	; 0x74
 8007510:	9002      	str	r0, [sp, #8]
 8007512:	9006      	str	r0, [sp, #24]
 8007514:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007518:	4809      	ldr	r0, [pc, #36]	; (8007540 <siprintf+0x38>)
 800751a:	9107      	str	r1, [sp, #28]
 800751c:	9104      	str	r1, [sp, #16]
 800751e:	4909      	ldr	r1, [pc, #36]	; (8007544 <siprintf+0x3c>)
 8007520:	f853 2b04 	ldr.w	r2, [r3], #4
 8007524:	9105      	str	r1, [sp, #20]
 8007526:	6800      	ldr	r0, [r0, #0]
 8007528:	9301      	str	r3, [sp, #4]
 800752a:	a902      	add	r1, sp, #8
 800752c:	f000 f868 	bl	8007600 <_svfiprintf_r>
 8007530:	9b02      	ldr	r3, [sp, #8]
 8007532:	2200      	movs	r2, #0
 8007534:	701a      	strb	r2, [r3, #0]
 8007536:	b01c      	add	sp, #112	; 0x70
 8007538:	f85d eb04 	ldr.w	lr, [sp], #4
 800753c:	b003      	add	sp, #12
 800753e:	4770      	bx	lr
 8007540:	20000104 	.word	0x20000104
 8007544:	ffff0208 	.word	0xffff0208

08007548 <__ssputs_r>:
 8007548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800754c:	688e      	ldr	r6, [r1, #8]
 800754e:	429e      	cmp	r6, r3
 8007550:	4682      	mov	sl, r0
 8007552:	460c      	mov	r4, r1
 8007554:	4690      	mov	r8, r2
 8007556:	461f      	mov	r7, r3
 8007558:	d838      	bhi.n	80075cc <__ssputs_r+0x84>
 800755a:	898a      	ldrh	r2, [r1, #12]
 800755c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007560:	d032      	beq.n	80075c8 <__ssputs_r+0x80>
 8007562:	6825      	ldr	r5, [r4, #0]
 8007564:	6909      	ldr	r1, [r1, #16]
 8007566:	eba5 0901 	sub.w	r9, r5, r1
 800756a:	6965      	ldr	r5, [r4, #20]
 800756c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007570:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007574:	3301      	adds	r3, #1
 8007576:	444b      	add	r3, r9
 8007578:	106d      	asrs	r5, r5, #1
 800757a:	429d      	cmp	r5, r3
 800757c:	bf38      	it	cc
 800757e:	461d      	movcc	r5, r3
 8007580:	0553      	lsls	r3, r2, #21
 8007582:	d531      	bpl.n	80075e8 <__ssputs_r+0xa0>
 8007584:	4629      	mov	r1, r5
 8007586:	f000 fb47 	bl	8007c18 <_malloc_r>
 800758a:	4606      	mov	r6, r0
 800758c:	b950      	cbnz	r0, 80075a4 <__ssputs_r+0x5c>
 800758e:	230c      	movs	r3, #12
 8007590:	f8ca 3000 	str.w	r3, [sl]
 8007594:	89a3      	ldrh	r3, [r4, #12]
 8007596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800759a:	81a3      	strh	r3, [r4, #12]
 800759c:	f04f 30ff 	mov.w	r0, #4294967295
 80075a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075a4:	6921      	ldr	r1, [r4, #16]
 80075a6:	464a      	mov	r2, r9
 80075a8:	f000 fabe 	bl	8007b28 <memcpy>
 80075ac:	89a3      	ldrh	r3, [r4, #12]
 80075ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80075b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075b6:	81a3      	strh	r3, [r4, #12]
 80075b8:	6126      	str	r6, [r4, #16]
 80075ba:	6165      	str	r5, [r4, #20]
 80075bc:	444e      	add	r6, r9
 80075be:	eba5 0509 	sub.w	r5, r5, r9
 80075c2:	6026      	str	r6, [r4, #0]
 80075c4:	60a5      	str	r5, [r4, #8]
 80075c6:	463e      	mov	r6, r7
 80075c8:	42be      	cmp	r6, r7
 80075ca:	d900      	bls.n	80075ce <__ssputs_r+0x86>
 80075cc:	463e      	mov	r6, r7
 80075ce:	4632      	mov	r2, r6
 80075d0:	6820      	ldr	r0, [r4, #0]
 80075d2:	4641      	mov	r1, r8
 80075d4:	f000 fab6 	bl	8007b44 <memmove>
 80075d8:	68a3      	ldr	r3, [r4, #8]
 80075da:	6822      	ldr	r2, [r4, #0]
 80075dc:	1b9b      	subs	r3, r3, r6
 80075de:	4432      	add	r2, r6
 80075e0:	60a3      	str	r3, [r4, #8]
 80075e2:	6022      	str	r2, [r4, #0]
 80075e4:	2000      	movs	r0, #0
 80075e6:	e7db      	b.n	80075a0 <__ssputs_r+0x58>
 80075e8:	462a      	mov	r2, r5
 80075ea:	f000 fb6f 	bl	8007ccc <_realloc_r>
 80075ee:	4606      	mov	r6, r0
 80075f0:	2800      	cmp	r0, #0
 80075f2:	d1e1      	bne.n	80075b8 <__ssputs_r+0x70>
 80075f4:	6921      	ldr	r1, [r4, #16]
 80075f6:	4650      	mov	r0, sl
 80075f8:	f000 fabe 	bl	8007b78 <_free_r>
 80075fc:	e7c7      	b.n	800758e <__ssputs_r+0x46>
	...

08007600 <_svfiprintf_r>:
 8007600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007604:	4698      	mov	r8, r3
 8007606:	898b      	ldrh	r3, [r1, #12]
 8007608:	061b      	lsls	r3, r3, #24
 800760a:	b09d      	sub	sp, #116	; 0x74
 800760c:	4607      	mov	r7, r0
 800760e:	460d      	mov	r5, r1
 8007610:	4614      	mov	r4, r2
 8007612:	d50e      	bpl.n	8007632 <_svfiprintf_r+0x32>
 8007614:	690b      	ldr	r3, [r1, #16]
 8007616:	b963      	cbnz	r3, 8007632 <_svfiprintf_r+0x32>
 8007618:	2140      	movs	r1, #64	; 0x40
 800761a:	f000 fafd 	bl	8007c18 <_malloc_r>
 800761e:	6028      	str	r0, [r5, #0]
 8007620:	6128      	str	r0, [r5, #16]
 8007622:	b920      	cbnz	r0, 800762e <_svfiprintf_r+0x2e>
 8007624:	230c      	movs	r3, #12
 8007626:	603b      	str	r3, [r7, #0]
 8007628:	f04f 30ff 	mov.w	r0, #4294967295
 800762c:	e0d1      	b.n	80077d2 <_svfiprintf_r+0x1d2>
 800762e:	2340      	movs	r3, #64	; 0x40
 8007630:	616b      	str	r3, [r5, #20]
 8007632:	2300      	movs	r3, #0
 8007634:	9309      	str	r3, [sp, #36]	; 0x24
 8007636:	2320      	movs	r3, #32
 8007638:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800763c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007640:	2330      	movs	r3, #48	; 0x30
 8007642:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80077ec <_svfiprintf_r+0x1ec>
 8007646:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800764a:	f04f 0901 	mov.w	r9, #1
 800764e:	4623      	mov	r3, r4
 8007650:	469a      	mov	sl, r3
 8007652:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007656:	b10a      	cbz	r2, 800765c <_svfiprintf_r+0x5c>
 8007658:	2a25      	cmp	r2, #37	; 0x25
 800765a:	d1f9      	bne.n	8007650 <_svfiprintf_r+0x50>
 800765c:	ebba 0b04 	subs.w	fp, sl, r4
 8007660:	d00b      	beq.n	800767a <_svfiprintf_r+0x7a>
 8007662:	465b      	mov	r3, fp
 8007664:	4622      	mov	r2, r4
 8007666:	4629      	mov	r1, r5
 8007668:	4638      	mov	r0, r7
 800766a:	f7ff ff6d 	bl	8007548 <__ssputs_r>
 800766e:	3001      	adds	r0, #1
 8007670:	f000 80aa 	beq.w	80077c8 <_svfiprintf_r+0x1c8>
 8007674:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007676:	445a      	add	r2, fp
 8007678:	9209      	str	r2, [sp, #36]	; 0x24
 800767a:	f89a 3000 	ldrb.w	r3, [sl]
 800767e:	2b00      	cmp	r3, #0
 8007680:	f000 80a2 	beq.w	80077c8 <_svfiprintf_r+0x1c8>
 8007684:	2300      	movs	r3, #0
 8007686:	f04f 32ff 	mov.w	r2, #4294967295
 800768a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800768e:	f10a 0a01 	add.w	sl, sl, #1
 8007692:	9304      	str	r3, [sp, #16]
 8007694:	9307      	str	r3, [sp, #28]
 8007696:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800769a:	931a      	str	r3, [sp, #104]	; 0x68
 800769c:	4654      	mov	r4, sl
 800769e:	2205      	movs	r2, #5
 80076a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076a4:	4851      	ldr	r0, [pc, #324]	; (80077ec <_svfiprintf_r+0x1ec>)
 80076a6:	f7f8 fda3 	bl	80001f0 <memchr>
 80076aa:	9a04      	ldr	r2, [sp, #16]
 80076ac:	b9d8      	cbnz	r0, 80076e6 <_svfiprintf_r+0xe6>
 80076ae:	06d0      	lsls	r0, r2, #27
 80076b0:	bf44      	itt	mi
 80076b2:	2320      	movmi	r3, #32
 80076b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076b8:	0711      	lsls	r1, r2, #28
 80076ba:	bf44      	itt	mi
 80076bc:	232b      	movmi	r3, #43	; 0x2b
 80076be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076c2:	f89a 3000 	ldrb.w	r3, [sl]
 80076c6:	2b2a      	cmp	r3, #42	; 0x2a
 80076c8:	d015      	beq.n	80076f6 <_svfiprintf_r+0xf6>
 80076ca:	9a07      	ldr	r2, [sp, #28]
 80076cc:	4654      	mov	r4, sl
 80076ce:	2000      	movs	r0, #0
 80076d0:	f04f 0c0a 	mov.w	ip, #10
 80076d4:	4621      	mov	r1, r4
 80076d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076da:	3b30      	subs	r3, #48	; 0x30
 80076dc:	2b09      	cmp	r3, #9
 80076de:	d94e      	bls.n	800777e <_svfiprintf_r+0x17e>
 80076e0:	b1b0      	cbz	r0, 8007710 <_svfiprintf_r+0x110>
 80076e2:	9207      	str	r2, [sp, #28]
 80076e4:	e014      	b.n	8007710 <_svfiprintf_r+0x110>
 80076e6:	eba0 0308 	sub.w	r3, r0, r8
 80076ea:	fa09 f303 	lsl.w	r3, r9, r3
 80076ee:	4313      	orrs	r3, r2
 80076f0:	9304      	str	r3, [sp, #16]
 80076f2:	46a2      	mov	sl, r4
 80076f4:	e7d2      	b.n	800769c <_svfiprintf_r+0x9c>
 80076f6:	9b03      	ldr	r3, [sp, #12]
 80076f8:	1d19      	adds	r1, r3, #4
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	9103      	str	r1, [sp, #12]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	bfbb      	ittet	lt
 8007702:	425b      	neglt	r3, r3
 8007704:	f042 0202 	orrlt.w	r2, r2, #2
 8007708:	9307      	strge	r3, [sp, #28]
 800770a:	9307      	strlt	r3, [sp, #28]
 800770c:	bfb8      	it	lt
 800770e:	9204      	strlt	r2, [sp, #16]
 8007710:	7823      	ldrb	r3, [r4, #0]
 8007712:	2b2e      	cmp	r3, #46	; 0x2e
 8007714:	d10c      	bne.n	8007730 <_svfiprintf_r+0x130>
 8007716:	7863      	ldrb	r3, [r4, #1]
 8007718:	2b2a      	cmp	r3, #42	; 0x2a
 800771a:	d135      	bne.n	8007788 <_svfiprintf_r+0x188>
 800771c:	9b03      	ldr	r3, [sp, #12]
 800771e:	1d1a      	adds	r2, r3, #4
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	9203      	str	r2, [sp, #12]
 8007724:	2b00      	cmp	r3, #0
 8007726:	bfb8      	it	lt
 8007728:	f04f 33ff 	movlt.w	r3, #4294967295
 800772c:	3402      	adds	r4, #2
 800772e:	9305      	str	r3, [sp, #20]
 8007730:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80077fc <_svfiprintf_r+0x1fc>
 8007734:	7821      	ldrb	r1, [r4, #0]
 8007736:	2203      	movs	r2, #3
 8007738:	4650      	mov	r0, sl
 800773a:	f7f8 fd59 	bl	80001f0 <memchr>
 800773e:	b140      	cbz	r0, 8007752 <_svfiprintf_r+0x152>
 8007740:	2340      	movs	r3, #64	; 0x40
 8007742:	eba0 000a 	sub.w	r0, r0, sl
 8007746:	fa03 f000 	lsl.w	r0, r3, r0
 800774a:	9b04      	ldr	r3, [sp, #16]
 800774c:	4303      	orrs	r3, r0
 800774e:	3401      	adds	r4, #1
 8007750:	9304      	str	r3, [sp, #16]
 8007752:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007756:	4826      	ldr	r0, [pc, #152]	; (80077f0 <_svfiprintf_r+0x1f0>)
 8007758:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800775c:	2206      	movs	r2, #6
 800775e:	f7f8 fd47 	bl	80001f0 <memchr>
 8007762:	2800      	cmp	r0, #0
 8007764:	d038      	beq.n	80077d8 <_svfiprintf_r+0x1d8>
 8007766:	4b23      	ldr	r3, [pc, #140]	; (80077f4 <_svfiprintf_r+0x1f4>)
 8007768:	bb1b      	cbnz	r3, 80077b2 <_svfiprintf_r+0x1b2>
 800776a:	9b03      	ldr	r3, [sp, #12]
 800776c:	3307      	adds	r3, #7
 800776e:	f023 0307 	bic.w	r3, r3, #7
 8007772:	3308      	adds	r3, #8
 8007774:	9303      	str	r3, [sp, #12]
 8007776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007778:	4433      	add	r3, r6
 800777a:	9309      	str	r3, [sp, #36]	; 0x24
 800777c:	e767      	b.n	800764e <_svfiprintf_r+0x4e>
 800777e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007782:	460c      	mov	r4, r1
 8007784:	2001      	movs	r0, #1
 8007786:	e7a5      	b.n	80076d4 <_svfiprintf_r+0xd4>
 8007788:	2300      	movs	r3, #0
 800778a:	3401      	adds	r4, #1
 800778c:	9305      	str	r3, [sp, #20]
 800778e:	4619      	mov	r1, r3
 8007790:	f04f 0c0a 	mov.w	ip, #10
 8007794:	4620      	mov	r0, r4
 8007796:	f810 2b01 	ldrb.w	r2, [r0], #1
 800779a:	3a30      	subs	r2, #48	; 0x30
 800779c:	2a09      	cmp	r2, #9
 800779e:	d903      	bls.n	80077a8 <_svfiprintf_r+0x1a8>
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d0c5      	beq.n	8007730 <_svfiprintf_r+0x130>
 80077a4:	9105      	str	r1, [sp, #20]
 80077a6:	e7c3      	b.n	8007730 <_svfiprintf_r+0x130>
 80077a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80077ac:	4604      	mov	r4, r0
 80077ae:	2301      	movs	r3, #1
 80077b0:	e7f0      	b.n	8007794 <_svfiprintf_r+0x194>
 80077b2:	ab03      	add	r3, sp, #12
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	462a      	mov	r2, r5
 80077b8:	4b0f      	ldr	r3, [pc, #60]	; (80077f8 <_svfiprintf_r+0x1f8>)
 80077ba:	a904      	add	r1, sp, #16
 80077bc:	4638      	mov	r0, r7
 80077be:	f3af 8000 	nop.w
 80077c2:	1c42      	adds	r2, r0, #1
 80077c4:	4606      	mov	r6, r0
 80077c6:	d1d6      	bne.n	8007776 <_svfiprintf_r+0x176>
 80077c8:	89ab      	ldrh	r3, [r5, #12]
 80077ca:	065b      	lsls	r3, r3, #25
 80077cc:	f53f af2c 	bmi.w	8007628 <_svfiprintf_r+0x28>
 80077d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077d2:	b01d      	add	sp, #116	; 0x74
 80077d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d8:	ab03      	add	r3, sp, #12
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	462a      	mov	r2, r5
 80077de:	4b06      	ldr	r3, [pc, #24]	; (80077f8 <_svfiprintf_r+0x1f8>)
 80077e0:	a904      	add	r1, sp, #16
 80077e2:	4638      	mov	r0, r7
 80077e4:	f000 f87a 	bl	80078dc <_printf_i>
 80077e8:	e7eb      	b.n	80077c2 <_svfiprintf_r+0x1c2>
 80077ea:	bf00      	nop
 80077ec:	08007e20 	.word	0x08007e20
 80077f0:	08007e2a 	.word	0x08007e2a
 80077f4:	00000000 	.word	0x00000000
 80077f8:	08007549 	.word	0x08007549
 80077fc:	08007e26 	.word	0x08007e26

08007800 <_printf_common>:
 8007800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007804:	4616      	mov	r6, r2
 8007806:	4699      	mov	r9, r3
 8007808:	688a      	ldr	r2, [r1, #8]
 800780a:	690b      	ldr	r3, [r1, #16]
 800780c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007810:	4293      	cmp	r3, r2
 8007812:	bfb8      	it	lt
 8007814:	4613      	movlt	r3, r2
 8007816:	6033      	str	r3, [r6, #0]
 8007818:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800781c:	4607      	mov	r7, r0
 800781e:	460c      	mov	r4, r1
 8007820:	b10a      	cbz	r2, 8007826 <_printf_common+0x26>
 8007822:	3301      	adds	r3, #1
 8007824:	6033      	str	r3, [r6, #0]
 8007826:	6823      	ldr	r3, [r4, #0]
 8007828:	0699      	lsls	r1, r3, #26
 800782a:	bf42      	ittt	mi
 800782c:	6833      	ldrmi	r3, [r6, #0]
 800782e:	3302      	addmi	r3, #2
 8007830:	6033      	strmi	r3, [r6, #0]
 8007832:	6825      	ldr	r5, [r4, #0]
 8007834:	f015 0506 	ands.w	r5, r5, #6
 8007838:	d106      	bne.n	8007848 <_printf_common+0x48>
 800783a:	f104 0a19 	add.w	sl, r4, #25
 800783e:	68e3      	ldr	r3, [r4, #12]
 8007840:	6832      	ldr	r2, [r6, #0]
 8007842:	1a9b      	subs	r3, r3, r2
 8007844:	42ab      	cmp	r3, r5
 8007846:	dc26      	bgt.n	8007896 <_printf_common+0x96>
 8007848:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800784c:	1e13      	subs	r3, r2, #0
 800784e:	6822      	ldr	r2, [r4, #0]
 8007850:	bf18      	it	ne
 8007852:	2301      	movne	r3, #1
 8007854:	0692      	lsls	r2, r2, #26
 8007856:	d42b      	bmi.n	80078b0 <_printf_common+0xb0>
 8007858:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800785c:	4649      	mov	r1, r9
 800785e:	4638      	mov	r0, r7
 8007860:	47c0      	blx	r8
 8007862:	3001      	adds	r0, #1
 8007864:	d01e      	beq.n	80078a4 <_printf_common+0xa4>
 8007866:	6823      	ldr	r3, [r4, #0]
 8007868:	68e5      	ldr	r5, [r4, #12]
 800786a:	6832      	ldr	r2, [r6, #0]
 800786c:	f003 0306 	and.w	r3, r3, #6
 8007870:	2b04      	cmp	r3, #4
 8007872:	bf08      	it	eq
 8007874:	1aad      	subeq	r5, r5, r2
 8007876:	68a3      	ldr	r3, [r4, #8]
 8007878:	6922      	ldr	r2, [r4, #16]
 800787a:	bf0c      	ite	eq
 800787c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007880:	2500      	movne	r5, #0
 8007882:	4293      	cmp	r3, r2
 8007884:	bfc4      	itt	gt
 8007886:	1a9b      	subgt	r3, r3, r2
 8007888:	18ed      	addgt	r5, r5, r3
 800788a:	2600      	movs	r6, #0
 800788c:	341a      	adds	r4, #26
 800788e:	42b5      	cmp	r5, r6
 8007890:	d11a      	bne.n	80078c8 <_printf_common+0xc8>
 8007892:	2000      	movs	r0, #0
 8007894:	e008      	b.n	80078a8 <_printf_common+0xa8>
 8007896:	2301      	movs	r3, #1
 8007898:	4652      	mov	r2, sl
 800789a:	4649      	mov	r1, r9
 800789c:	4638      	mov	r0, r7
 800789e:	47c0      	blx	r8
 80078a0:	3001      	adds	r0, #1
 80078a2:	d103      	bne.n	80078ac <_printf_common+0xac>
 80078a4:	f04f 30ff 	mov.w	r0, #4294967295
 80078a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ac:	3501      	adds	r5, #1
 80078ae:	e7c6      	b.n	800783e <_printf_common+0x3e>
 80078b0:	18e1      	adds	r1, r4, r3
 80078b2:	1c5a      	adds	r2, r3, #1
 80078b4:	2030      	movs	r0, #48	; 0x30
 80078b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078ba:	4422      	add	r2, r4
 80078bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078c4:	3302      	adds	r3, #2
 80078c6:	e7c7      	b.n	8007858 <_printf_common+0x58>
 80078c8:	2301      	movs	r3, #1
 80078ca:	4622      	mov	r2, r4
 80078cc:	4649      	mov	r1, r9
 80078ce:	4638      	mov	r0, r7
 80078d0:	47c0      	blx	r8
 80078d2:	3001      	adds	r0, #1
 80078d4:	d0e6      	beq.n	80078a4 <_printf_common+0xa4>
 80078d6:	3601      	adds	r6, #1
 80078d8:	e7d9      	b.n	800788e <_printf_common+0x8e>
	...

080078dc <_printf_i>:
 80078dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078e0:	460c      	mov	r4, r1
 80078e2:	4691      	mov	r9, r2
 80078e4:	7e27      	ldrb	r7, [r4, #24]
 80078e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80078e8:	2f78      	cmp	r7, #120	; 0x78
 80078ea:	4680      	mov	r8, r0
 80078ec:	469a      	mov	sl, r3
 80078ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078f2:	d807      	bhi.n	8007904 <_printf_i+0x28>
 80078f4:	2f62      	cmp	r7, #98	; 0x62
 80078f6:	d80a      	bhi.n	800790e <_printf_i+0x32>
 80078f8:	2f00      	cmp	r7, #0
 80078fa:	f000 80d8 	beq.w	8007aae <_printf_i+0x1d2>
 80078fe:	2f58      	cmp	r7, #88	; 0x58
 8007900:	f000 80a3 	beq.w	8007a4a <_printf_i+0x16e>
 8007904:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007908:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800790c:	e03a      	b.n	8007984 <_printf_i+0xa8>
 800790e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007912:	2b15      	cmp	r3, #21
 8007914:	d8f6      	bhi.n	8007904 <_printf_i+0x28>
 8007916:	a001      	add	r0, pc, #4	; (adr r0, 800791c <_printf_i+0x40>)
 8007918:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800791c:	08007975 	.word	0x08007975
 8007920:	08007989 	.word	0x08007989
 8007924:	08007905 	.word	0x08007905
 8007928:	08007905 	.word	0x08007905
 800792c:	08007905 	.word	0x08007905
 8007930:	08007905 	.word	0x08007905
 8007934:	08007989 	.word	0x08007989
 8007938:	08007905 	.word	0x08007905
 800793c:	08007905 	.word	0x08007905
 8007940:	08007905 	.word	0x08007905
 8007944:	08007905 	.word	0x08007905
 8007948:	08007a95 	.word	0x08007a95
 800794c:	080079b9 	.word	0x080079b9
 8007950:	08007a77 	.word	0x08007a77
 8007954:	08007905 	.word	0x08007905
 8007958:	08007905 	.word	0x08007905
 800795c:	08007ab7 	.word	0x08007ab7
 8007960:	08007905 	.word	0x08007905
 8007964:	080079b9 	.word	0x080079b9
 8007968:	08007905 	.word	0x08007905
 800796c:	08007905 	.word	0x08007905
 8007970:	08007a7f 	.word	0x08007a7f
 8007974:	680b      	ldr	r3, [r1, #0]
 8007976:	1d1a      	adds	r2, r3, #4
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	600a      	str	r2, [r1, #0]
 800797c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007980:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007984:	2301      	movs	r3, #1
 8007986:	e0a3      	b.n	8007ad0 <_printf_i+0x1f4>
 8007988:	6825      	ldr	r5, [r4, #0]
 800798a:	6808      	ldr	r0, [r1, #0]
 800798c:	062e      	lsls	r6, r5, #24
 800798e:	f100 0304 	add.w	r3, r0, #4
 8007992:	d50a      	bpl.n	80079aa <_printf_i+0xce>
 8007994:	6805      	ldr	r5, [r0, #0]
 8007996:	600b      	str	r3, [r1, #0]
 8007998:	2d00      	cmp	r5, #0
 800799a:	da03      	bge.n	80079a4 <_printf_i+0xc8>
 800799c:	232d      	movs	r3, #45	; 0x2d
 800799e:	426d      	negs	r5, r5
 80079a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079a4:	485e      	ldr	r0, [pc, #376]	; (8007b20 <_printf_i+0x244>)
 80079a6:	230a      	movs	r3, #10
 80079a8:	e019      	b.n	80079de <_printf_i+0x102>
 80079aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80079ae:	6805      	ldr	r5, [r0, #0]
 80079b0:	600b      	str	r3, [r1, #0]
 80079b2:	bf18      	it	ne
 80079b4:	b22d      	sxthne	r5, r5
 80079b6:	e7ef      	b.n	8007998 <_printf_i+0xbc>
 80079b8:	680b      	ldr	r3, [r1, #0]
 80079ba:	6825      	ldr	r5, [r4, #0]
 80079bc:	1d18      	adds	r0, r3, #4
 80079be:	6008      	str	r0, [r1, #0]
 80079c0:	0628      	lsls	r0, r5, #24
 80079c2:	d501      	bpl.n	80079c8 <_printf_i+0xec>
 80079c4:	681d      	ldr	r5, [r3, #0]
 80079c6:	e002      	b.n	80079ce <_printf_i+0xf2>
 80079c8:	0669      	lsls	r1, r5, #25
 80079ca:	d5fb      	bpl.n	80079c4 <_printf_i+0xe8>
 80079cc:	881d      	ldrh	r5, [r3, #0]
 80079ce:	4854      	ldr	r0, [pc, #336]	; (8007b20 <_printf_i+0x244>)
 80079d0:	2f6f      	cmp	r7, #111	; 0x6f
 80079d2:	bf0c      	ite	eq
 80079d4:	2308      	moveq	r3, #8
 80079d6:	230a      	movne	r3, #10
 80079d8:	2100      	movs	r1, #0
 80079da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80079de:	6866      	ldr	r6, [r4, #4]
 80079e0:	60a6      	str	r6, [r4, #8]
 80079e2:	2e00      	cmp	r6, #0
 80079e4:	bfa2      	ittt	ge
 80079e6:	6821      	ldrge	r1, [r4, #0]
 80079e8:	f021 0104 	bicge.w	r1, r1, #4
 80079ec:	6021      	strge	r1, [r4, #0]
 80079ee:	b90d      	cbnz	r5, 80079f4 <_printf_i+0x118>
 80079f0:	2e00      	cmp	r6, #0
 80079f2:	d04d      	beq.n	8007a90 <_printf_i+0x1b4>
 80079f4:	4616      	mov	r6, r2
 80079f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80079fa:	fb03 5711 	mls	r7, r3, r1, r5
 80079fe:	5dc7      	ldrb	r7, [r0, r7]
 8007a00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a04:	462f      	mov	r7, r5
 8007a06:	42bb      	cmp	r3, r7
 8007a08:	460d      	mov	r5, r1
 8007a0a:	d9f4      	bls.n	80079f6 <_printf_i+0x11a>
 8007a0c:	2b08      	cmp	r3, #8
 8007a0e:	d10b      	bne.n	8007a28 <_printf_i+0x14c>
 8007a10:	6823      	ldr	r3, [r4, #0]
 8007a12:	07df      	lsls	r7, r3, #31
 8007a14:	d508      	bpl.n	8007a28 <_printf_i+0x14c>
 8007a16:	6923      	ldr	r3, [r4, #16]
 8007a18:	6861      	ldr	r1, [r4, #4]
 8007a1a:	4299      	cmp	r1, r3
 8007a1c:	bfde      	ittt	le
 8007a1e:	2330      	movle	r3, #48	; 0x30
 8007a20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a28:	1b92      	subs	r2, r2, r6
 8007a2a:	6122      	str	r2, [r4, #16]
 8007a2c:	f8cd a000 	str.w	sl, [sp]
 8007a30:	464b      	mov	r3, r9
 8007a32:	aa03      	add	r2, sp, #12
 8007a34:	4621      	mov	r1, r4
 8007a36:	4640      	mov	r0, r8
 8007a38:	f7ff fee2 	bl	8007800 <_printf_common>
 8007a3c:	3001      	adds	r0, #1
 8007a3e:	d14c      	bne.n	8007ada <_printf_i+0x1fe>
 8007a40:	f04f 30ff 	mov.w	r0, #4294967295
 8007a44:	b004      	add	sp, #16
 8007a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a4a:	4835      	ldr	r0, [pc, #212]	; (8007b20 <_printf_i+0x244>)
 8007a4c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007a50:	6823      	ldr	r3, [r4, #0]
 8007a52:	680e      	ldr	r6, [r1, #0]
 8007a54:	061f      	lsls	r7, r3, #24
 8007a56:	f856 5b04 	ldr.w	r5, [r6], #4
 8007a5a:	600e      	str	r6, [r1, #0]
 8007a5c:	d514      	bpl.n	8007a88 <_printf_i+0x1ac>
 8007a5e:	07d9      	lsls	r1, r3, #31
 8007a60:	bf44      	itt	mi
 8007a62:	f043 0320 	orrmi.w	r3, r3, #32
 8007a66:	6023      	strmi	r3, [r4, #0]
 8007a68:	b91d      	cbnz	r5, 8007a72 <_printf_i+0x196>
 8007a6a:	6823      	ldr	r3, [r4, #0]
 8007a6c:	f023 0320 	bic.w	r3, r3, #32
 8007a70:	6023      	str	r3, [r4, #0]
 8007a72:	2310      	movs	r3, #16
 8007a74:	e7b0      	b.n	80079d8 <_printf_i+0xfc>
 8007a76:	6823      	ldr	r3, [r4, #0]
 8007a78:	f043 0320 	orr.w	r3, r3, #32
 8007a7c:	6023      	str	r3, [r4, #0]
 8007a7e:	2378      	movs	r3, #120	; 0x78
 8007a80:	4828      	ldr	r0, [pc, #160]	; (8007b24 <_printf_i+0x248>)
 8007a82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a86:	e7e3      	b.n	8007a50 <_printf_i+0x174>
 8007a88:	065e      	lsls	r6, r3, #25
 8007a8a:	bf48      	it	mi
 8007a8c:	b2ad      	uxthmi	r5, r5
 8007a8e:	e7e6      	b.n	8007a5e <_printf_i+0x182>
 8007a90:	4616      	mov	r6, r2
 8007a92:	e7bb      	b.n	8007a0c <_printf_i+0x130>
 8007a94:	680b      	ldr	r3, [r1, #0]
 8007a96:	6826      	ldr	r6, [r4, #0]
 8007a98:	6960      	ldr	r0, [r4, #20]
 8007a9a:	1d1d      	adds	r5, r3, #4
 8007a9c:	600d      	str	r5, [r1, #0]
 8007a9e:	0635      	lsls	r5, r6, #24
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	d501      	bpl.n	8007aa8 <_printf_i+0x1cc>
 8007aa4:	6018      	str	r0, [r3, #0]
 8007aa6:	e002      	b.n	8007aae <_printf_i+0x1d2>
 8007aa8:	0671      	lsls	r1, r6, #25
 8007aaa:	d5fb      	bpl.n	8007aa4 <_printf_i+0x1c8>
 8007aac:	8018      	strh	r0, [r3, #0]
 8007aae:	2300      	movs	r3, #0
 8007ab0:	6123      	str	r3, [r4, #16]
 8007ab2:	4616      	mov	r6, r2
 8007ab4:	e7ba      	b.n	8007a2c <_printf_i+0x150>
 8007ab6:	680b      	ldr	r3, [r1, #0]
 8007ab8:	1d1a      	adds	r2, r3, #4
 8007aba:	600a      	str	r2, [r1, #0]
 8007abc:	681e      	ldr	r6, [r3, #0]
 8007abe:	6862      	ldr	r2, [r4, #4]
 8007ac0:	2100      	movs	r1, #0
 8007ac2:	4630      	mov	r0, r6
 8007ac4:	f7f8 fb94 	bl	80001f0 <memchr>
 8007ac8:	b108      	cbz	r0, 8007ace <_printf_i+0x1f2>
 8007aca:	1b80      	subs	r0, r0, r6
 8007acc:	6060      	str	r0, [r4, #4]
 8007ace:	6863      	ldr	r3, [r4, #4]
 8007ad0:	6123      	str	r3, [r4, #16]
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ad8:	e7a8      	b.n	8007a2c <_printf_i+0x150>
 8007ada:	6923      	ldr	r3, [r4, #16]
 8007adc:	4632      	mov	r2, r6
 8007ade:	4649      	mov	r1, r9
 8007ae0:	4640      	mov	r0, r8
 8007ae2:	47d0      	blx	sl
 8007ae4:	3001      	adds	r0, #1
 8007ae6:	d0ab      	beq.n	8007a40 <_printf_i+0x164>
 8007ae8:	6823      	ldr	r3, [r4, #0]
 8007aea:	079b      	lsls	r3, r3, #30
 8007aec:	d413      	bmi.n	8007b16 <_printf_i+0x23a>
 8007aee:	68e0      	ldr	r0, [r4, #12]
 8007af0:	9b03      	ldr	r3, [sp, #12]
 8007af2:	4298      	cmp	r0, r3
 8007af4:	bfb8      	it	lt
 8007af6:	4618      	movlt	r0, r3
 8007af8:	e7a4      	b.n	8007a44 <_printf_i+0x168>
 8007afa:	2301      	movs	r3, #1
 8007afc:	4632      	mov	r2, r6
 8007afe:	4649      	mov	r1, r9
 8007b00:	4640      	mov	r0, r8
 8007b02:	47d0      	blx	sl
 8007b04:	3001      	adds	r0, #1
 8007b06:	d09b      	beq.n	8007a40 <_printf_i+0x164>
 8007b08:	3501      	adds	r5, #1
 8007b0a:	68e3      	ldr	r3, [r4, #12]
 8007b0c:	9903      	ldr	r1, [sp, #12]
 8007b0e:	1a5b      	subs	r3, r3, r1
 8007b10:	42ab      	cmp	r3, r5
 8007b12:	dcf2      	bgt.n	8007afa <_printf_i+0x21e>
 8007b14:	e7eb      	b.n	8007aee <_printf_i+0x212>
 8007b16:	2500      	movs	r5, #0
 8007b18:	f104 0619 	add.w	r6, r4, #25
 8007b1c:	e7f5      	b.n	8007b0a <_printf_i+0x22e>
 8007b1e:	bf00      	nop
 8007b20:	08007e31 	.word	0x08007e31
 8007b24:	08007e42 	.word	0x08007e42

08007b28 <memcpy>:
 8007b28:	440a      	add	r2, r1
 8007b2a:	4291      	cmp	r1, r2
 8007b2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b30:	d100      	bne.n	8007b34 <memcpy+0xc>
 8007b32:	4770      	bx	lr
 8007b34:	b510      	push	{r4, lr}
 8007b36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b3e:	4291      	cmp	r1, r2
 8007b40:	d1f9      	bne.n	8007b36 <memcpy+0xe>
 8007b42:	bd10      	pop	{r4, pc}

08007b44 <memmove>:
 8007b44:	4288      	cmp	r0, r1
 8007b46:	b510      	push	{r4, lr}
 8007b48:	eb01 0402 	add.w	r4, r1, r2
 8007b4c:	d902      	bls.n	8007b54 <memmove+0x10>
 8007b4e:	4284      	cmp	r4, r0
 8007b50:	4623      	mov	r3, r4
 8007b52:	d807      	bhi.n	8007b64 <memmove+0x20>
 8007b54:	1e43      	subs	r3, r0, #1
 8007b56:	42a1      	cmp	r1, r4
 8007b58:	d008      	beq.n	8007b6c <memmove+0x28>
 8007b5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b62:	e7f8      	b.n	8007b56 <memmove+0x12>
 8007b64:	4402      	add	r2, r0
 8007b66:	4601      	mov	r1, r0
 8007b68:	428a      	cmp	r2, r1
 8007b6a:	d100      	bne.n	8007b6e <memmove+0x2a>
 8007b6c:	bd10      	pop	{r4, pc}
 8007b6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b76:	e7f7      	b.n	8007b68 <memmove+0x24>

08007b78 <_free_r>:
 8007b78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b7a:	2900      	cmp	r1, #0
 8007b7c:	d048      	beq.n	8007c10 <_free_r+0x98>
 8007b7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b82:	9001      	str	r0, [sp, #4]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f1a1 0404 	sub.w	r4, r1, #4
 8007b8a:	bfb8      	it	lt
 8007b8c:	18e4      	addlt	r4, r4, r3
 8007b8e:	f000 f8d3 	bl	8007d38 <__malloc_lock>
 8007b92:	4a20      	ldr	r2, [pc, #128]	; (8007c14 <_free_r+0x9c>)
 8007b94:	9801      	ldr	r0, [sp, #4]
 8007b96:	6813      	ldr	r3, [r2, #0]
 8007b98:	4615      	mov	r5, r2
 8007b9a:	b933      	cbnz	r3, 8007baa <_free_r+0x32>
 8007b9c:	6063      	str	r3, [r4, #4]
 8007b9e:	6014      	str	r4, [r2, #0]
 8007ba0:	b003      	add	sp, #12
 8007ba2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ba6:	f000 b8cd 	b.w	8007d44 <__malloc_unlock>
 8007baa:	42a3      	cmp	r3, r4
 8007bac:	d90b      	bls.n	8007bc6 <_free_r+0x4e>
 8007bae:	6821      	ldr	r1, [r4, #0]
 8007bb0:	1862      	adds	r2, r4, r1
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	bf04      	itt	eq
 8007bb6:	681a      	ldreq	r2, [r3, #0]
 8007bb8:	685b      	ldreq	r3, [r3, #4]
 8007bba:	6063      	str	r3, [r4, #4]
 8007bbc:	bf04      	itt	eq
 8007bbe:	1852      	addeq	r2, r2, r1
 8007bc0:	6022      	streq	r2, [r4, #0]
 8007bc2:	602c      	str	r4, [r5, #0]
 8007bc4:	e7ec      	b.n	8007ba0 <_free_r+0x28>
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	b10b      	cbz	r3, 8007bd0 <_free_r+0x58>
 8007bcc:	42a3      	cmp	r3, r4
 8007bce:	d9fa      	bls.n	8007bc6 <_free_r+0x4e>
 8007bd0:	6811      	ldr	r1, [r2, #0]
 8007bd2:	1855      	adds	r5, r2, r1
 8007bd4:	42a5      	cmp	r5, r4
 8007bd6:	d10b      	bne.n	8007bf0 <_free_r+0x78>
 8007bd8:	6824      	ldr	r4, [r4, #0]
 8007bda:	4421      	add	r1, r4
 8007bdc:	1854      	adds	r4, r2, r1
 8007bde:	42a3      	cmp	r3, r4
 8007be0:	6011      	str	r1, [r2, #0]
 8007be2:	d1dd      	bne.n	8007ba0 <_free_r+0x28>
 8007be4:	681c      	ldr	r4, [r3, #0]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	6053      	str	r3, [r2, #4]
 8007bea:	4421      	add	r1, r4
 8007bec:	6011      	str	r1, [r2, #0]
 8007bee:	e7d7      	b.n	8007ba0 <_free_r+0x28>
 8007bf0:	d902      	bls.n	8007bf8 <_free_r+0x80>
 8007bf2:	230c      	movs	r3, #12
 8007bf4:	6003      	str	r3, [r0, #0]
 8007bf6:	e7d3      	b.n	8007ba0 <_free_r+0x28>
 8007bf8:	6825      	ldr	r5, [r4, #0]
 8007bfa:	1961      	adds	r1, r4, r5
 8007bfc:	428b      	cmp	r3, r1
 8007bfe:	bf04      	itt	eq
 8007c00:	6819      	ldreq	r1, [r3, #0]
 8007c02:	685b      	ldreq	r3, [r3, #4]
 8007c04:	6063      	str	r3, [r4, #4]
 8007c06:	bf04      	itt	eq
 8007c08:	1949      	addeq	r1, r1, r5
 8007c0a:	6021      	streq	r1, [r4, #0]
 8007c0c:	6054      	str	r4, [r2, #4]
 8007c0e:	e7c7      	b.n	8007ba0 <_free_r+0x28>
 8007c10:	b003      	add	sp, #12
 8007c12:	bd30      	pop	{r4, r5, pc}
 8007c14:	2000023c 	.word	0x2000023c

08007c18 <_malloc_r>:
 8007c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c1a:	1ccd      	adds	r5, r1, #3
 8007c1c:	f025 0503 	bic.w	r5, r5, #3
 8007c20:	3508      	adds	r5, #8
 8007c22:	2d0c      	cmp	r5, #12
 8007c24:	bf38      	it	cc
 8007c26:	250c      	movcc	r5, #12
 8007c28:	2d00      	cmp	r5, #0
 8007c2a:	4606      	mov	r6, r0
 8007c2c:	db01      	blt.n	8007c32 <_malloc_r+0x1a>
 8007c2e:	42a9      	cmp	r1, r5
 8007c30:	d903      	bls.n	8007c3a <_malloc_r+0x22>
 8007c32:	230c      	movs	r3, #12
 8007c34:	6033      	str	r3, [r6, #0]
 8007c36:	2000      	movs	r0, #0
 8007c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c3a:	f000 f87d 	bl	8007d38 <__malloc_lock>
 8007c3e:	4921      	ldr	r1, [pc, #132]	; (8007cc4 <_malloc_r+0xac>)
 8007c40:	680a      	ldr	r2, [r1, #0]
 8007c42:	4614      	mov	r4, r2
 8007c44:	b99c      	cbnz	r4, 8007c6e <_malloc_r+0x56>
 8007c46:	4f20      	ldr	r7, [pc, #128]	; (8007cc8 <_malloc_r+0xb0>)
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	b923      	cbnz	r3, 8007c56 <_malloc_r+0x3e>
 8007c4c:	4621      	mov	r1, r4
 8007c4e:	4630      	mov	r0, r6
 8007c50:	f000 f862 	bl	8007d18 <_sbrk_r>
 8007c54:	6038      	str	r0, [r7, #0]
 8007c56:	4629      	mov	r1, r5
 8007c58:	4630      	mov	r0, r6
 8007c5a:	f000 f85d 	bl	8007d18 <_sbrk_r>
 8007c5e:	1c43      	adds	r3, r0, #1
 8007c60:	d123      	bne.n	8007caa <_malloc_r+0x92>
 8007c62:	230c      	movs	r3, #12
 8007c64:	6033      	str	r3, [r6, #0]
 8007c66:	4630      	mov	r0, r6
 8007c68:	f000 f86c 	bl	8007d44 <__malloc_unlock>
 8007c6c:	e7e3      	b.n	8007c36 <_malloc_r+0x1e>
 8007c6e:	6823      	ldr	r3, [r4, #0]
 8007c70:	1b5b      	subs	r3, r3, r5
 8007c72:	d417      	bmi.n	8007ca4 <_malloc_r+0x8c>
 8007c74:	2b0b      	cmp	r3, #11
 8007c76:	d903      	bls.n	8007c80 <_malloc_r+0x68>
 8007c78:	6023      	str	r3, [r4, #0]
 8007c7a:	441c      	add	r4, r3
 8007c7c:	6025      	str	r5, [r4, #0]
 8007c7e:	e004      	b.n	8007c8a <_malloc_r+0x72>
 8007c80:	6863      	ldr	r3, [r4, #4]
 8007c82:	42a2      	cmp	r2, r4
 8007c84:	bf0c      	ite	eq
 8007c86:	600b      	streq	r3, [r1, #0]
 8007c88:	6053      	strne	r3, [r2, #4]
 8007c8a:	4630      	mov	r0, r6
 8007c8c:	f000 f85a 	bl	8007d44 <__malloc_unlock>
 8007c90:	f104 000b 	add.w	r0, r4, #11
 8007c94:	1d23      	adds	r3, r4, #4
 8007c96:	f020 0007 	bic.w	r0, r0, #7
 8007c9a:	1ac2      	subs	r2, r0, r3
 8007c9c:	d0cc      	beq.n	8007c38 <_malloc_r+0x20>
 8007c9e:	1a1b      	subs	r3, r3, r0
 8007ca0:	50a3      	str	r3, [r4, r2]
 8007ca2:	e7c9      	b.n	8007c38 <_malloc_r+0x20>
 8007ca4:	4622      	mov	r2, r4
 8007ca6:	6864      	ldr	r4, [r4, #4]
 8007ca8:	e7cc      	b.n	8007c44 <_malloc_r+0x2c>
 8007caa:	1cc4      	adds	r4, r0, #3
 8007cac:	f024 0403 	bic.w	r4, r4, #3
 8007cb0:	42a0      	cmp	r0, r4
 8007cb2:	d0e3      	beq.n	8007c7c <_malloc_r+0x64>
 8007cb4:	1a21      	subs	r1, r4, r0
 8007cb6:	4630      	mov	r0, r6
 8007cb8:	f000 f82e 	bl	8007d18 <_sbrk_r>
 8007cbc:	3001      	adds	r0, #1
 8007cbe:	d1dd      	bne.n	8007c7c <_malloc_r+0x64>
 8007cc0:	e7cf      	b.n	8007c62 <_malloc_r+0x4a>
 8007cc2:	bf00      	nop
 8007cc4:	2000023c 	.word	0x2000023c
 8007cc8:	20000240 	.word	0x20000240

08007ccc <_realloc_r>:
 8007ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cce:	4607      	mov	r7, r0
 8007cd0:	4614      	mov	r4, r2
 8007cd2:	460e      	mov	r6, r1
 8007cd4:	b921      	cbnz	r1, 8007ce0 <_realloc_r+0x14>
 8007cd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007cda:	4611      	mov	r1, r2
 8007cdc:	f7ff bf9c 	b.w	8007c18 <_malloc_r>
 8007ce0:	b922      	cbnz	r2, 8007cec <_realloc_r+0x20>
 8007ce2:	f7ff ff49 	bl	8007b78 <_free_r>
 8007ce6:	4625      	mov	r5, r4
 8007ce8:	4628      	mov	r0, r5
 8007cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cec:	f000 f830 	bl	8007d50 <_malloc_usable_size_r>
 8007cf0:	42a0      	cmp	r0, r4
 8007cf2:	d20f      	bcs.n	8007d14 <_realloc_r+0x48>
 8007cf4:	4621      	mov	r1, r4
 8007cf6:	4638      	mov	r0, r7
 8007cf8:	f7ff ff8e 	bl	8007c18 <_malloc_r>
 8007cfc:	4605      	mov	r5, r0
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	d0f2      	beq.n	8007ce8 <_realloc_r+0x1c>
 8007d02:	4631      	mov	r1, r6
 8007d04:	4622      	mov	r2, r4
 8007d06:	f7ff ff0f 	bl	8007b28 <memcpy>
 8007d0a:	4631      	mov	r1, r6
 8007d0c:	4638      	mov	r0, r7
 8007d0e:	f7ff ff33 	bl	8007b78 <_free_r>
 8007d12:	e7e9      	b.n	8007ce8 <_realloc_r+0x1c>
 8007d14:	4635      	mov	r5, r6
 8007d16:	e7e7      	b.n	8007ce8 <_realloc_r+0x1c>

08007d18 <_sbrk_r>:
 8007d18:	b538      	push	{r3, r4, r5, lr}
 8007d1a:	4d06      	ldr	r5, [pc, #24]	; (8007d34 <_sbrk_r+0x1c>)
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	4604      	mov	r4, r0
 8007d20:	4608      	mov	r0, r1
 8007d22:	602b      	str	r3, [r5, #0]
 8007d24:	f7f9 fbf4 	bl	8001510 <_sbrk>
 8007d28:	1c43      	adds	r3, r0, #1
 8007d2a:	d102      	bne.n	8007d32 <_sbrk_r+0x1a>
 8007d2c:	682b      	ldr	r3, [r5, #0]
 8007d2e:	b103      	cbz	r3, 8007d32 <_sbrk_r+0x1a>
 8007d30:	6023      	str	r3, [r4, #0]
 8007d32:	bd38      	pop	{r3, r4, r5, pc}
 8007d34:	200004d4 	.word	0x200004d4

08007d38 <__malloc_lock>:
 8007d38:	4801      	ldr	r0, [pc, #4]	; (8007d40 <__malloc_lock+0x8>)
 8007d3a:	f000 b811 	b.w	8007d60 <__retarget_lock_acquire_recursive>
 8007d3e:	bf00      	nop
 8007d40:	200004dc 	.word	0x200004dc

08007d44 <__malloc_unlock>:
 8007d44:	4801      	ldr	r0, [pc, #4]	; (8007d4c <__malloc_unlock+0x8>)
 8007d46:	f000 b80c 	b.w	8007d62 <__retarget_lock_release_recursive>
 8007d4a:	bf00      	nop
 8007d4c:	200004dc 	.word	0x200004dc

08007d50 <_malloc_usable_size_r>:
 8007d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d54:	1f18      	subs	r0, r3, #4
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	bfbc      	itt	lt
 8007d5a:	580b      	ldrlt	r3, [r1, r0]
 8007d5c:	18c0      	addlt	r0, r0, r3
 8007d5e:	4770      	bx	lr

08007d60 <__retarget_lock_acquire_recursive>:
 8007d60:	4770      	bx	lr

08007d62 <__retarget_lock_release_recursive>:
 8007d62:	4770      	bx	lr

08007d64 <_init>:
 8007d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d66:	bf00      	nop
 8007d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d6a:	bc08      	pop	{r3}
 8007d6c:	469e      	mov	lr, r3
 8007d6e:	4770      	bx	lr

08007d70 <_fini>:
 8007d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d72:	bf00      	nop
 8007d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d76:	bc08      	pop	{r3}
 8007d78:	469e      	mov	lr, r3
 8007d7a:	4770      	bx	lr
