
FRA222_com3_6333.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000877c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800891c  0800891c  0001891c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089f4  080089f4  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  080089f4  080089f4  000189f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089fc  080089fc  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089fc  080089fc  000189fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a00  08008a00  00018a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  08008a04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  20000168  08008b6c  00020168  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000568  08008b6c  00020568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .debug_info   000151cc  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000251f  00000000  00000000  00035364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001238  00000000  00000000  00037888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001188  00000000  00000000  00038ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185e7  00000000  00000000  00039c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015051  00000000  00000000  0005222f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e7c5  00000000  00000000  00067280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00105a45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053a4  00000000  00000000  00105a98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000168 	.word	0x20000168
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008904 	.word	0x08008904

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000016c 	.word	0x2000016c
 80001dc:	08008904 	.word	0x08008904

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b96e 	b.w	8000d60 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468c      	mov	ip, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	f040 8083 	bne.w	8000bb2 <__udivmoddi4+0x116>
 8000aac:	428a      	cmp	r2, r1
 8000aae:	4617      	mov	r7, r2
 8000ab0:	d947      	bls.n	8000b42 <__udivmoddi4+0xa6>
 8000ab2:	fab2 f282 	clz	r2, r2
 8000ab6:	b142      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab8:	f1c2 0020 	rsb	r0, r2, #32
 8000abc:	fa24 f000 	lsr.w	r0, r4, r0
 8000ac0:	4091      	lsls	r1, r2
 8000ac2:	4097      	lsls	r7, r2
 8000ac4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ac8:	4094      	lsls	r4, r2
 8000aca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ace:	0c23      	lsrs	r3, r4, #16
 8000ad0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ad4:	fa1f fe87 	uxth.w	lr, r7
 8000ad8:	fb08 c116 	mls	r1, r8, r6, ip
 8000adc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d909      	bls.n	8000afc <__udivmoddi4+0x60>
 8000ae8:	18fb      	adds	r3, r7, r3
 8000aea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000aee:	f080 8119 	bcs.w	8000d24 <__udivmoddi4+0x288>
 8000af2:	4299      	cmp	r1, r3
 8000af4:	f240 8116 	bls.w	8000d24 <__udivmoddi4+0x288>
 8000af8:	3e02      	subs	r6, #2
 8000afa:	443b      	add	r3, r7
 8000afc:	1a5b      	subs	r3, r3, r1
 8000afe:	b2a4      	uxth	r4, r4
 8000b00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b04:	fb08 3310 	mls	r3, r8, r0, r3
 8000b08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b10:	45a6      	cmp	lr, r4
 8000b12:	d909      	bls.n	8000b28 <__udivmoddi4+0x8c>
 8000b14:	193c      	adds	r4, r7, r4
 8000b16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b1a:	f080 8105 	bcs.w	8000d28 <__udivmoddi4+0x28c>
 8000b1e:	45a6      	cmp	lr, r4
 8000b20:	f240 8102 	bls.w	8000d28 <__udivmoddi4+0x28c>
 8000b24:	3802      	subs	r0, #2
 8000b26:	443c      	add	r4, r7
 8000b28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b2c:	eba4 040e 	sub.w	r4, r4, lr
 8000b30:	2600      	movs	r6, #0
 8000b32:	b11d      	cbz	r5, 8000b3c <__udivmoddi4+0xa0>
 8000b34:	40d4      	lsrs	r4, r2
 8000b36:	2300      	movs	r3, #0
 8000b38:	e9c5 4300 	strd	r4, r3, [r5]
 8000b3c:	4631      	mov	r1, r6
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	b902      	cbnz	r2, 8000b46 <__udivmoddi4+0xaa>
 8000b44:	deff      	udf	#255	; 0xff
 8000b46:	fab2 f282 	clz	r2, r2
 8000b4a:	2a00      	cmp	r2, #0
 8000b4c:	d150      	bne.n	8000bf0 <__udivmoddi4+0x154>
 8000b4e:	1bcb      	subs	r3, r1, r7
 8000b50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b54:	fa1f f887 	uxth.w	r8, r7
 8000b58:	2601      	movs	r6, #1
 8000b5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b5e:	0c21      	lsrs	r1, r4, #16
 8000b60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b68:	fb08 f30c 	mul.w	r3, r8, ip
 8000b6c:	428b      	cmp	r3, r1
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0xe4>
 8000b70:	1879      	adds	r1, r7, r1
 8000b72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0xe2>
 8000b78:	428b      	cmp	r3, r1
 8000b7a:	f200 80e9 	bhi.w	8000d50 <__udivmoddi4+0x2b4>
 8000b7e:	4684      	mov	ip, r0
 8000b80:	1ac9      	subs	r1, r1, r3
 8000b82:	b2a3      	uxth	r3, r4
 8000b84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b90:	fb08 f800 	mul.w	r8, r8, r0
 8000b94:	45a0      	cmp	r8, r4
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x10c>
 8000b98:	193c      	adds	r4, r7, r4
 8000b9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x10a>
 8000ba0:	45a0      	cmp	r8, r4
 8000ba2:	f200 80d9 	bhi.w	8000d58 <__udivmoddi4+0x2bc>
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	eba4 0408 	sub.w	r4, r4, r8
 8000bac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bb0:	e7bf      	b.n	8000b32 <__udivmoddi4+0x96>
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d909      	bls.n	8000bca <__udivmoddi4+0x12e>
 8000bb6:	2d00      	cmp	r5, #0
 8000bb8:	f000 80b1 	beq.w	8000d1e <__udivmoddi4+0x282>
 8000bbc:	2600      	movs	r6, #0
 8000bbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc2:	4630      	mov	r0, r6
 8000bc4:	4631      	mov	r1, r6
 8000bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bca:	fab3 f683 	clz	r6, r3
 8000bce:	2e00      	cmp	r6, #0
 8000bd0:	d14a      	bne.n	8000c68 <__udivmoddi4+0x1cc>
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d302      	bcc.n	8000bdc <__udivmoddi4+0x140>
 8000bd6:	4282      	cmp	r2, r0
 8000bd8:	f200 80b8 	bhi.w	8000d4c <__udivmoddi4+0x2b0>
 8000bdc:	1a84      	subs	r4, r0, r2
 8000bde:	eb61 0103 	sbc.w	r1, r1, r3
 8000be2:	2001      	movs	r0, #1
 8000be4:	468c      	mov	ip, r1
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	d0a8      	beq.n	8000b3c <__udivmoddi4+0xa0>
 8000bea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bee:	e7a5      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000bf0:	f1c2 0320 	rsb	r3, r2, #32
 8000bf4:	fa20 f603 	lsr.w	r6, r0, r3
 8000bf8:	4097      	lsls	r7, r2
 8000bfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000bfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c02:	40d9      	lsrs	r1, r3
 8000c04:	4330      	orrs	r0, r6
 8000c06:	0c03      	lsrs	r3, r0, #16
 8000c08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c0c:	fa1f f887 	uxth.w	r8, r7
 8000c10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c18:	fb06 f108 	mul.w	r1, r6, r8
 8000c1c:	4299      	cmp	r1, r3
 8000c1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x19c>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c2a:	f080 808d 	bcs.w	8000d48 <__udivmoddi4+0x2ac>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 808a 	bls.w	8000d48 <__udivmoddi4+0x2ac>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b281      	uxth	r1, r0
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c48:	fb00 f308 	mul.w	r3, r0, r8
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x1c4>
 8000c50:	1879      	adds	r1, r7, r1
 8000c52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c56:	d273      	bcs.n	8000d40 <__udivmoddi4+0x2a4>
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	d971      	bls.n	8000d40 <__udivmoddi4+0x2a4>
 8000c5c:	3802      	subs	r0, #2
 8000c5e:	4439      	add	r1, r7
 8000c60:	1acb      	subs	r3, r1, r3
 8000c62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c66:	e778      	b.n	8000b5a <__udivmoddi4+0xbe>
 8000c68:	f1c6 0c20 	rsb	ip, r6, #32
 8000c6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c74:	431c      	orrs	r4, r3
 8000c76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c86:	431f      	orrs	r7, r3
 8000c88:	0c3b      	lsrs	r3, r7, #16
 8000c8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c8e:	fa1f f884 	uxth.w	r8, r4
 8000c92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c9e:	458a      	cmp	sl, r1
 8000ca0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ca4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ca8:	d908      	bls.n	8000cbc <__udivmoddi4+0x220>
 8000caa:	1861      	adds	r1, r4, r1
 8000cac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cb0:	d248      	bcs.n	8000d44 <__udivmoddi4+0x2a8>
 8000cb2:	458a      	cmp	sl, r1
 8000cb4:	d946      	bls.n	8000d44 <__udivmoddi4+0x2a8>
 8000cb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cba:	4421      	add	r1, r4
 8000cbc:	eba1 010a 	sub.w	r1, r1, sl
 8000cc0:	b2bf      	uxth	r7, r7
 8000cc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cce:	fb00 f808 	mul.w	r8, r0, r8
 8000cd2:	45b8      	cmp	r8, r7
 8000cd4:	d907      	bls.n	8000ce6 <__udivmoddi4+0x24a>
 8000cd6:	19e7      	adds	r7, r4, r7
 8000cd8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cdc:	d22e      	bcs.n	8000d3c <__udivmoddi4+0x2a0>
 8000cde:	45b8      	cmp	r8, r7
 8000ce0:	d92c      	bls.n	8000d3c <__udivmoddi4+0x2a0>
 8000ce2:	3802      	subs	r0, #2
 8000ce4:	4427      	add	r7, r4
 8000ce6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cea:	eba7 0708 	sub.w	r7, r7, r8
 8000cee:	fba0 8902 	umull	r8, r9, r0, r2
 8000cf2:	454f      	cmp	r7, r9
 8000cf4:	46c6      	mov	lr, r8
 8000cf6:	4649      	mov	r1, r9
 8000cf8:	d31a      	bcc.n	8000d30 <__udivmoddi4+0x294>
 8000cfa:	d017      	beq.n	8000d2c <__udivmoddi4+0x290>
 8000cfc:	b15d      	cbz	r5, 8000d16 <__udivmoddi4+0x27a>
 8000cfe:	ebb3 020e 	subs.w	r2, r3, lr
 8000d02:	eb67 0701 	sbc.w	r7, r7, r1
 8000d06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d0a:	40f2      	lsrs	r2, r6
 8000d0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d10:	40f7      	lsrs	r7, r6
 8000d12:	e9c5 2700 	strd	r2, r7, [r5]
 8000d16:	2600      	movs	r6, #0
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e70b      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e9      	b.n	8000afc <__udivmoddi4+0x60>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6fd      	b.n	8000b28 <__udivmoddi4+0x8c>
 8000d2c:	4543      	cmp	r3, r8
 8000d2e:	d2e5      	bcs.n	8000cfc <__udivmoddi4+0x260>
 8000d30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d34:	eb69 0104 	sbc.w	r1, r9, r4
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7df      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e7d2      	b.n	8000ce6 <__udivmoddi4+0x24a>
 8000d40:	4660      	mov	r0, ip
 8000d42:	e78d      	b.n	8000c60 <__udivmoddi4+0x1c4>
 8000d44:	4681      	mov	r9, r0
 8000d46:	e7b9      	b.n	8000cbc <__udivmoddi4+0x220>
 8000d48:	4666      	mov	r6, ip
 8000d4a:	e775      	b.n	8000c38 <__udivmoddi4+0x19c>
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	e74a      	b.n	8000be6 <__udivmoddi4+0x14a>
 8000d50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d54:	4439      	add	r1, r7
 8000d56:	e713      	b.n	8000b80 <__udivmoddi4+0xe4>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	443c      	add	r4, r7
 8000d5c:	e724      	b.n	8000ba8 <__udivmoddi4+0x10c>
 8000d5e:	bf00      	nop

08000d60 <__aeabi_idiv0>:
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop

08000d64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d68:	f001 f894 	bl	8001e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d6c:	f000 f848 	bl	8000e00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8000d70:	f000 fa24 	bl	80011bc <MX_DMA_Init>
  MX_GPIO_Init();
 8000d74:	f000 fa42 	bl	80011fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d78:	f000 f9f6 	bl	8001168 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d7c:	f000 f8a8 	bl	8000ed0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000d80:	f000 f8fa 	bl	8000f78 <MX_I2C1_Init>
  MX_SPI3_Init();
 8000d84:	f000 f926 	bl	8000fd4 <MX_SPI3_Init>
  MX_TIM11_Init();
 8000d88:	f000 f9ca 	bl	8001120 <MX_TIM11_Init>
  MX_TIM2_Init();
 8000d8c:	f000 f958 	bl	8001040 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim11);
 8000d90:	4814      	ldr	r0, [pc, #80]	; (8000de4 <main+0x80>)
 8000d92:	f005 f8cf 	bl	8005f34 <HAL_TIM_Base_Start_IT>
	HAL_UART_Transmit(&huart2, (uint8_t*) H0, strlen(H0), 1000);
 8000d96:	4814      	ldr	r0, [pc, #80]	; (8000de8 <main+0x84>)
 8000d98:	f7ff fa22 	bl	80001e0 <strlen>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da4:	4910      	ldr	r1, [pc, #64]	; (8000de8 <main+0x84>)
 8000da6:	4811      	ldr	r0, [pc, #68]	; (8000dec <main+0x88>)
 8000da8:	f006 f9d1 	bl	800714e <HAL_UART_Transmit>
	IOExpenderInit();
 8000dac:	f000 fd00 	bl	80017b0 <IOExpenderInit>
	HAL_TIM_Base_Start(&htim2);
 8000db0:	480f      	ldr	r0, [pc, #60]	; (8000df0 <main+0x8c>)
 8000db2:	f005 f865 	bl	8005e80 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) &capturedata,
 8000db6:	230a      	movs	r3, #10
 8000db8:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <main+0x90>)
 8000dba:	2100      	movs	r1, #0
 8000dbc:	480c      	ldr	r0, [pc, #48]	; (8000df0 <main+0x8c>)
 8000dbe:	f005 f975 	bl	80060ac <HAL_TIM_IC_Start_DMA>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		EEPROMWrite();
 8000dc2:	f000 fc99 	bl	80016f8 <EEPROMWrite>
		EEPROMRead(eepromDataReadBack, 3);
 8000dc6:	2103      	movs	r1, #3
 8000dc8:	480b      	ldr	r0, [pc, #44]	; (8000df8 <main+0x94>)
 8000dca:	f000 fccb 	bl	8001764 <EEPROMRead>
		HAL_UART_Receive_IT(&huart2, RxDataBuffer, 1);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	490a      	ldr	r1, [pc, #40]	; (8000dfc <main+0x98>)
 8000dd2:	4806      	ldr	r0, [pc, #24]	; (8000dec <main+0x88>)
 8000dd4:	f006 fa4d 	bl	8007272 <HAL_UART_Receive_IT>

		ADCPollingMethodUpdate();
 8000dd8:	f000 fcf2 	bl	80017c0 <ADCPollingMethodUpdate>
		buttonReaderCycle();
 8000ddc:	f000 fc30 	bl	8001640 <buttonReaderCycle>
		EEPROMWrite();
 8000de0:	e7ef      	b.n	8000dc2 <main+0x5e>
 8000de2:	bf00      	nop
 8000de4:	20000480 	.word	0x20000480
 8000de8:	20000004 	.word	0x20000004
 8000dec:	20000510 	.word	0x20000510
 8000df0:	200004c8 	.word	0x200004c8
 8000df4:	20000254 	.word	0x20000254
 8000df8:	20000434 	.word	0x20000434
 8000dfc:	200002ec 	.word	0x200002ec

08000e00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b094      	sub	sp, #80	; 0x50
 8000e04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e06:	f107 0320 	add.w	r3, r7, #32
 8000e0a:	2230      	movs	r2, #48	; 0x30
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f007 f942 	bl	8008098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e24:	2300      	movs	r3, #0
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	4b27      	ldr	r3, [pc, #156]	; (8000ec8 <SystemClock_Config+0xc8>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	4a26      	ldr	r2, [pc, #152]	; (8000ec8 <SystemClock_Config+0xc8>)
 8000e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e32:	6413      	str	r3, [r2, #64]	; 0x40
 8000e34:	4b24      	ldr	r3, [pc, #144]	; (8000ec8 <SystemClock_Config+0xc8>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e40:	2300      	movs	r3, #0
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <SystemClock_Config+0xcc>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a20      	ldr	r2, [pc, #128]	; (8000ecc <SystemClock_Config+0xcc>)
 8000e4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <SystemClock_Config+0xcc>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e60:	2301      	movs	r3, #1
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e64:	2310      	movs	r3, #16
 8000e66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e70:	2308      	movs	r3, #8
 8000e72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000e74:	2364      	movs	r3, #100	; 0x64
 8000e76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e7c:	2304      	movs	r3, #4
 8000e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e80:	f107 0320 	add.w	r3, r7, #32
 8000e84:	4618      	mov	r0, r3
 8000e86:	f004 faaf 	bl	80053e8 <HAL_RCC_OscConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e90:	f000 fd48 	bl	8001924 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e94:	230f      	movs	r3, #15
 8000e96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000eaa:	f107 030c 	add.w	r3, r7, #12
 8000eae:	2103      	movs	r1, #3
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f004 fd11 	bl	80058d8 <HAL_RCC_ClockConfig>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ebc:	f000 fd32 	bl	8001924 <Error_Handler>
  }
}
 8000ec0:	bf00      	nop
 8000ec2:	3750      	adds	r7, #80	; 0x50
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40007000 	.word	0x40007000

08000ed0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ee2:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000ee4:	4a21      	ldr	r2, [pc, #132]	; (8000f6c <MX_ADC1_Init+0x9c>)
 8000ee6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ee8:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000eea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000efc:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f02:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f0a:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f10:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f12:	4a17      	ldr	r2, [pc, #92]	; (8000f70 <MX_ADC1_Init+0xa0>)
 8000f14:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f30:	480d      	ldr	r0, [pc, #52]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f32:	f001 f821 	bl	8001f78 <HAL_ADC_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f3c:	f000 fcf2 	bl	8001924 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <MX_ADC1_Init+0xa4>)
 8000f42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f44:	2301      	movs	r3, #1
 8000f46:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4805      	ldr	r0, [pc, #20]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f52:	f001 f9d5 	bl	8002300 <HAL_ADC_ConfigChannel>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f5c:	f000 fce2 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000438 	.word	0x20000438
 8000f6c:	40012000 	.word	0x40012000
 8000f70:	0f000001 	.word	0x0f000001
 8000f74:	10000012 	.word	0x10000012

08000f78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <MX_I2C1_Init+0x50>)
 8000f7e:	4a13      	ldr	r2, [pc, #76]	; (8000fcc <MX_I2C1_Init+0x54>)
 8000f80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <MX_I2C1_Init+0x50>)
 8000f84:	4a12      	ldr	r2, [pc, #72]	; (8000fd0 <MX_I2C1_Init+0x58>)
 8000f86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f88:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <MX_I2C1_Init+0x50>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MX_I2C1_Init+0x50>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_I2C1_Init+0x50>)
 8000f96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <MX_I2C1_Init+0x50>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_I2C1_Init+0x50>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fa8:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <MX_I2C1_Init+0x50>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <MX_I2C1_Init+0x50>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fb4:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <MX_I2C1_Init+0x50>)
 8000fb6:	f002 fa91 	bl	80034dc <HAL_I2C_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fc0:	f000 fcb0 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000388 	.word	0x20000388
 8000fcc:	40005400 	.word	0x40005400
 8000fd0:	00061a80 	.word	0x00061a80

08000fd4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000fd8:	4b17      	ldr	r3, [pc, #92]	; (8001038 <MX_SPI3_Init+0x64>)
 8000fda:	4a18      	ldr	r2, [pc, #96]	; (800103c <MX_SPI3_Init+0x68>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000fde:	4b16      	ldr	r3, [pc, #88]	; (8001038 <MX_SPI3_Init+0x64>)
 8000fe0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fe4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000fe6:	4b14      	ldr	r3, [pc, #80]	; (8001038 <MX_SPI3_Init+0x64>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <MX_SPI3_Init+0x64>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_SPI3_Init+0x64>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <MX_SPI3_Init+0x64>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <MX_SPI3_Init+0x64>)
 8001000:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001004:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_SPI3_Init+0x64>)
 8001008:	2218      	movs	r2, #24
 800100a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <MX_SPI3_Init+0x64>)
 800100e:	2200      	movs	r2, #0
 8001010:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_SPI3_Init+0x64>)
 8001014:	2200      	movs	r2, #0
 8001016:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001018:	4b07      	ldr	r3, [pc, #28]	; (8001038 <MX_SPI3_Init+0x64>)
 800101a:	2200      	movs	r2, #0
 800101c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_SPI3_Init+0x64>)
 8001020:	220a      	movs	r2, #10
 8001022:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001024:	4804      	ldr	r0, [pc, #16]	; (8001038 <MX_SPI3_Init+0x64>)
 8001026:	f004 fe53 	bl	8005cd0 <HAL_SPI_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001030:	f000 fc78 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	200003dc 	.word	0x200003dc
 800103c:	40003c00 	.word	0x40003c00

08001040 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001046:	f107 0318 	add.w	r3, r7, #24
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001054:	f107 0310 	add.w	r3, r7, #16
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800105e:	463b      	mov	r3, r7
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800106a:	4b2c      	ldr	r3, [pc, #176]	; (800111c <MX_TIM2_Init+0xdc>)
 800106c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001070:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001072:	4b2a      	ldr	r3, [pc, #168]	; (800111c <MX_TIM2_Init+0xdc>)
 8001074:	2263      	movs	r2, #99	; 0x63
 8001076:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001078:	4b28      	ldr	r3, [pc, #160]	; (800111c <MX_TIM2_Init+0xdc>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800107e:	4b27      	ldr	r3, [pc, #156]	; (800111c <MX_TIM2_Init+0xdc>)
 8001080:	f04f 32ff 	mov.w	r2, #4294967295
 8001084:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001086:	4b25      	ldr	r3, [pc, #148]	; (800111c <MX_TIM2_Init+0xdc>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108c:	4b23      	ldr	r3, [pc, #140]	; (800111c <MX_TIM2_Init+0xdc>)
 800108e:	2200      	movs	r2, #0
 8001090:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001092:	4822      	ldr	r0, [pc, #136]	; (800111c <MX_TIM2_Init+0xdc>)
 8001094:	f004 fea5 	bl	8005de2 <HAL_TIM_Base_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800109e:	f000 fc41 	bl	8001924 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010a8:	f107 0318 	add.w	r3, r7, #24
 80010ac:	4619      	mov	r1, r3
 80010ae:	481b      	ldr	r0, [pc, #108]	; (800111c <MX_TIM2_Init+0xdc>)
 80010b0:	f005 fb3c 	bl	800672c <HAL_TIM_ConfigClockSource>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80010ba:	f000 fc33 	bl	8001924 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80010be:	4817      	ldr	r0, [pc, #92]	; (800111c <MX_TIM2_Init+0xdc>)
 80010c0:	f004 ff9a 	bl	8005ff8 <HAL_TIM_IC_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80010ca:	f000 fc2b 	bl	8001924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010d6:	f107 0310 	add.w	r3, r7, #16
 80010da:	4619      	mov	r1, r3
 80010dc:	480f      	ldr	r0, [pc, #60]	; (800111c <MX_TIM2_Init+0xdc>)
 80010de:	f005 ff67 	bl	8006fb0 <HAL_TIMEx_MasterConfigSynchronization>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80010e8:	f000 fc1c 	bl	8001924 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010ec:	2300      	movs	r3, #0
 80010ee:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010f0:	2301      	movs	r3, #1
 80010f2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010fc:	463b      	mov	r3, r7
 80010fe:	2200      	movs	r2, #0
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	; (800111c <MX_TIM2_Init+0xdc>)
 8001104:	f005 fa76 	bl	80065f4 <HAL_TIM_IC_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800110e:	f000 fc09 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	3728      	adds	r7, #40	; 0x28
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200004c8 	.word	0x200004c8

08001120 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001124:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <MX_TIM11_Init+0x40>)
 8001126:	4a0f      	ldr	r2, [pc, #60]	; (8001164 <MX_TIM11_Init+0x44>)
 8001128:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 800112a:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <MX_TIM11_Init+0x40>)
 800112c:	2263      	movs	r2, #99	; 0x63
 800112e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <MX_TIM11_Init+0x40>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <MX_TIM11_Init+0x40>)
 8001138:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800113c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <MX_TIM11_Init+0x40>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <MX_TIM11_Init+0x40>)
 8001146:	2200      	movs	r2, #0
 8001148:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800114a:	4805      	ldr	r0, [pc, #20]	; (8001160 <MX_TIM11_Init+0x40>)
 800114c:	f004 fe49 	bl	8005de2 <HAL_TIM_Base_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001156:	f000 fbe5 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000480 	.word	0x20000480
 8001164:	40014800 	.word	0x40014800

08001168 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 800116e:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <MX_USART2_UART_Init+0x50>)
 8001170:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 8001174:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001178:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800118c:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 800118e:	220c      	movs	r2, #12
 8001190:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001192:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 800119a:	2200      	movs	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 80011a0:	f005 ff88 	bl	80070b4 <HAL_UART_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011aa:	f000 fbbb 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000510 	.word	0x20000510
 80011b8:	40004400 	.word	0x40004400

080011bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MX_DMA_Init+0x3c>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a0b      	ldr	r2, [pc, #44]	; (80011f8 <MX_DMA_Init+0x3c>)
 80011cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_DMA_Init+0x3c>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	2010      	movs	r0, #16
 80011e4:	f001 fb95 	bl	8002912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80011e8:	2010      	movs	r0, #16
 80011ea:	f001 fbae 	bl	800294a <HAL_NVIC_EnableIRQ>

}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800

080011fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	; 0x28
 8001200:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	4b3e      	ldr	r3, [pc, #248]	; (8001310 <MX_GPIO_Init+0x114>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a3d      	ldr	r2, [pc, #244]	; (8001310 <MX_GPIO_Init+0x114>)
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b3b      	ldr	r3, [pc, #236]	; (8001310 <MX_GPIO_Init+0x114>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b37      	ldr	r3, [pc, #220]	; (8001310 <MX_GPIO_Init+0x114>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a36      	ldr	r2, [pc, #216]	; (8001310 <MX_GPIO_Init+0x114>)
 8001238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b34      	ldr	r3, [pc, #208]	; (8001310 <MX_GPIO_Init+0x114>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	4b30      	ldr	r3, [pc, #192]	; (8001310 <MX_GPIO_Init+0x114>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a2f      	ldr	r2, [pc, #188]	; (8001310 <MX_GPIO_Init+0x114>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <MX_GPIO_Init+0x114>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	4b29      	ldr	r3, [pc, #164]	; (8001310 <MX_GPIO_Init+0x114>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a28      	ldr	r2, [pc, #160]	; (8001310 <MX_GPIO_Init+0x114>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b26      	ldr	r3, [pc, #152]	; (8001310 <MX_GPIO_Init+0x114>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	2120      	movs	r1, #32
 8001286:	4823      	ldr	r0, [pc, #140]	; (8001314 <MX_GPIO_Init+0x118>)
 8001288:	f002 f90e 	bl	80034a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 800128c:	2200      	movs	r2, #0
 800128e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001292:	4821      	ldr	r0, [pc, #132]	; (8001318 <MX_GPIO_Init+0x11c>)
 8001294:	f002 f908 	bl	80034a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001298:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800129c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800129e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	481b      	ldr	r0, [pc, #108]	; (800131c <MX_GPIO_Init+0x120>)
 80012b0:	f001 ff76 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012b4:	2302      	movs	r3, #2
 80012b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	4813      	ldr	r0, [pc, #76]	; (8001314 <MX_GPIO_Init+0x118>)
 80012c8:	f001 ff6a 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012cc:	2320      	movs	r3, #32
 80012ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4619      	mov	r1, r3
 80012e2:	480c      	ldr	r0, [pc, #48]	; (8001314 <MX_GPIO_Init+0x118>)
 80012e4:	f001 ff5c 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 80012e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ee:	2301      	movs	r3, #1
 80012f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	4619      	mov	r1, r3
 8001300:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_GPIO_Init+0x11c>)
 8001302:	f001 ff4d 	bl	80031a0 <HAL_GPIO_Init>

}
 8001306:	bf00      	nop
 8001308:	3728      	adds	r7, #40	; 0x28
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800
 8001314:	40020000 	.word	0x40020000
 8001318:	40020400 	.word	0x40020400
 800131c:	40020800 	.word	0x40020800

08001320 <UI_UART>:

/* USER CODE BEGIN 4 */

void UI_UART() {
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
	static uint8_t n_state = 0;
	switch (n_state) {
 8001324:	4bac      	ldr	r3, [pc, #688]	; (80015d8 <UI_UART+0x2b8>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b04      	cmp	r3, #4
 800132a:	f200 817c 	bhi.w	8001626 <UI_UART+0x306>
 800132e:	a201      	add	r2, pc, #4	; (adr r2, 8001334 <UI_UART+0x14>)
 8001330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001334:	08001349 	.word	0x08001349
 8001338:	08001387 	.word	0x08001387
 800133c:	08001451 	.word	0x08001451
 8001340:	0800151b 	.word	0x0800151b
 8001344:	080015c5 	.word	0x080015c5
	case 0:
		HAL_UART_Transmit(&huart2, (uint8_t*) H1, strlen(H1), 10);
 8001348:	48a4      	ldr	r0, [pc, #656]	; (80015dc <UI_UART+0x2bc>)
 800134a:	f7fe ff49 	bl	80001e0 <strlen>
 800134e:	4603      	mov	r3, r0
 8001350:	b29a      	uxth	r2, r3
 8001352:	230a      	movs	r3, #10
 8001354:	49a1      	ldr	r1, [pc, #644]	; (80015dc <UI_UART+0x2bc>)
 8001356:	48a2      	ldr	r0, [pc, #648]	; (80015e0 <UI_UART+0x2c0>)
 8001358:	f005 fef9 	bl	800714e <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "now station_goal:[%d]\r\n", station_goal);
 800135c:	4ba1      	ldr	r3, [pc, #644]	; (80015e4 <UI_UART+0x2c4>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	49a1      	ldr	r1, [pc, #644]	; (80015e8 <UI_UART+0x2c8>)
 8001364:	48a1      	ldr	r0, [pc, #644]	; (80015ec <UI_UART+0x2cc>)
 8001366:	f006 fe9f 	bl	80080a8 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) TxDataBuffer,
				strlen(TxDataBuffer), 1000);
 800136a:	48a0      	ldr	r0, [pc, #640]	; (80015ec <UI_UART+0x2cc>)
 800136c:	f7fe ff38 	bl	80001e0 <strlen>
 8001370:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart2, (uint8_t*) TxDataBuffer,
 8001372:	b29a      	uxth	r2, r3
 8001374:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001378:	499c      	ldr	r1, [pc, #624]	; (80015ec <UI_UART+0x2cc>)
 800137a:	4899      	ldr	r0, [pc, #612]	; (80015e0 <UI_UART+0x2c0>)
 800137c:	f005 fee7 	bl	800714e <HAL_UART_Transmit>
		n_state = 1;
 8001380:	4b95      	ldr	r3, [pc, #596]	; (80015d8 <UI_UART+0x2b8>)
 8001382:	2201      	movs	r2, #1
 8001384:	701a      	strb	r2, [r3, #0]
	case 1:
		switch (RxDataBuffer[0]) {
 8001386:	4b9a      	ldr	r3, [pc, #616]	; (80015f0 <UI_UART+0x2d0>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b77      	cmp	r3, #119	; 0x77
 800138c:	d007      	beq.n	800139e <UI_UART+0x7e>
 800138e:	2b77      	cmp	r3, #119	; 0x77
 8001390:	f300 8120 	bgt.w	80015d4 <UI_UART+0x2b4>
 8001394:	2b65      	cmp	r3, #101	; 0x65
 8001396:	d03a      	beq.n	800140e <UI_UART+0xee>
 8001398:	2b73      	cmp	r3, #115	; 0x73
 800139a:	d01c      	beq.n	80013d6 <UI_UART+0xb6>
			HAL_UART_Transmit(&huart2, (uint8_t*) TxDataBuffer,
					strlen(TxDataBuffer), 1000);
			n_state = 2;
			break;
		}
		break;
 800139c:	e11a      	b.n	80015d4 <UI_UART+0x2b4>
			station_goal += 1;
 800139e:	4b91      	ldr	r3, [pc, #580]	; (80015e4 <UI_UART+0x2c4>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	3301      	adds	r3, #1
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4b8f      	ldr	r3, [pc, #572]	; (80015e4 <UI_UART+0x2c4>)
 80013a8:	701a      	strb	r2, [r3, #0]
			sprintf(TxDataBuffer, "station_goal:[%d]\r\n", station_goal);
 80013aa:	4b8e      	ldr	r3, [pc, #568]	; (80015e4 <UI_UART+0x2c4>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	4990      	ldr	r1, [pc, #576]	; (80015f4 <UI_UART+0x2d4>)
 80013b2:	488e      	ldr	r0, [pc, #568]	; (80015ec <UI_UART+0x2cc>)
 80013b4:	f006 fe78 	bl	80080a8 <siprintf>
					strlen(TxDataBuffer), 1000);
 80013b8:	488c      	ldr	r0, [pc, #560]	; (80015ec <UI_UART+0x2cc>)
 80013ba:	f7fe ff11 	bl	80001e0 <strlen>
 80013be:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) TxDataBuffer,
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c6:	4989      	ldr	r1, [pc, #548]	; (80015ec <UI_UART+0x2cc>)
 80013c8:	4885      	ldr	r0, [pc, #532]	; (80015e0 <UI_UART+0x2c0>)
 80013ca:	f005 fec0 	bl	800714e <HAL_UART_Transmit>
			RxDataBuffer[0] = 0;
 80013ce:	4b88      	ldr	r3, [pc, #544]	; (80015f0 <UI_UART+0x2d0>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	701a      	strb	r2, [r3, #0]
			break;
 80013d4:	e03b      	b.n	800144e <UI_UART+0x12e>
			station_goal -= 1;
 80013d6:	4b83      	ldr	r3, [pc, #524]	; (80015e4 <UI_UART+0x2c4>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	3b01      	subs	r3, #1
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	4b81      	ldr	r3, [pc, #516]	; (80015e4 <UI_UART+0x2c4>)
 80013e0:	701a      	strb	r2, [r3, #0]
			sprintf(TxDataBuffer, "station_goal:[%d]\r\n", station_goal);
 80013e2:	4b80      	ldr	r3, [pc, #512]	; (80015e4 <UI_UART+0x2c4>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	4982      	ldr	r1, [pc, #520]	; (80015f4 <UI_UART+0x2d4>)
 80013ea:	4880      	ldr	r0, [pc, #512]	; (80015ec <UI_UART+0x2cc>)
 80013ec:	f006 fe5c 	bl	80080a8 <siprintf>
					strlen(TxDataBuffer), 1000);
 80013f0:	487e      	ldr	r0, [pc, #504]	; (80015ec <UI_UART+0x2cc>)
 80013f2:	f7fe fef5 	bl	80001e0 <strlen>
 80013f6:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) TxDataBuffer,
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fe:	497b      	ldr	r1, [pc, #492]	; (80015ec <UI_UART+0x2cc>)
 8001400:	4877      	ldr	r0, [pc, #476]	; (80015e0 <UI_UART+0x2c0>)
 8001402:	f005 fea4 	bl	800714e <HAL_UART_Transmit>
			RxDataBuffer[0] = 0;
 8001406:	4b7a      	ldr	r3, [pc, #488]	; (80015f0 <UI_UART+0x2d0>)
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
			break;
 800140c:	e01f      	b.n	800144e <UI_UART+0x12e>
			HAL_UART_Transmit(&huart2, (uint8_t*) H2, strlen(H2), 10);
 800140e:	487a      	ldr	r0, [pc, #488]	; (80015f8 <UI_UART+0x2d8>)
 8001410:	f7fe fee6 	bl	80001e0 <strlen>
 8001414:	4603      	mov	r3, r0
 8001416:	b29a      	uxth	r2, r3
 8001418:	230a      	movs	r3, #10
 800141a:	4977      	ldr	r1, [pc, #476]	; (80015f8 <UI_UART+0x2d8>)
 800141c:	4870      	ldr	r0, [pc, #448]	; (80015e0 <UI_UART+0x2c0>)
 800141e:	f005 fe96 	bl	800714e <HAL_UART_Transmit>
			sprintf(TxDataBuffer, "now time_wait:[%d]\r\n", time_wait);
 8001422:	4b76      	ldr	r3, [pc, #472]	; (80015fc <UI_UART+0x2dc>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	4975      	ldr	r1, [pc, #468]	; (8001600 <UI_UART+0x2e0>)
 800142a:	4870      	ldr	r0, [pc, #448]	; (80015ec <UI_UART+0x2cc>)
 800142c:	f006 fe3c 	bl	80080a8 <siprintf>
					strlen(TxDataBuffer), 1000);
 8001430:	486e      	ldr	r0, [pc, #440]	; (80015ec <UI_UART+0x2cc>)
 8001432:	f7fe fed5 	bl	80001e0 <strlen>
 8001436:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) TxDataBuffer,
 8001438:	b29a      	uxth	r2, r3
 800143a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800143e:	496b      	ldr	r1, [pc, #428]	; (80015ec <UI_UART+0x2cc>)
 8001440:	4867      	ldr	r0, [pc, #412]	; (80015e0 <UI_UART+0x2c0>)
 8001442:	f005 fe84 	bl	800714e <HAL_UART_Transmit>
			n_state = 2;
 8001446:	4b64      	ldr	r3, [pc, #400]	; (80015d8 <UI_UART+0x2b8>)
 8001448:	2202      	movs	r2, #2
 800144a:	701a      	strb	r2, [r3, #0]
			break;
 800144c:	bf00      	nop
		break;
 800144e:	e0c1      	b.n	80015d4 <UI_UART+0x2b4>
	case 2:
		switch (RxDataBuffer[0]) {
 8001450:	4b67      	ldr	r3, [pc, #412]	; (80015f0 <UI_UART+0x2d0>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b77      	cmp	r3, #119	; 0x77
 8001456:	d007      	beq.n	8001468 <UI_UART+0x148>
 8001458:	2b77      	cmp	r3, #119	; 0x77
 800145a:	f300 80e1 	bgt.w	8001620 <UI_UART+0x300>
 800145e:	2b65      	cmp	r3, #101	; 0x65
 8001460:	d03a      	beq.n	80014d8 <UI_UART+0x1b8>
 8001462:	2b73      	cmp	r3, #115	; 0x73
 8001464:	d01c      	beq.n	80014a0 <UI_UART+0x180>
			HAL_UART_Transmit(&huart2, (uint8_t*) TxDataBuffer,
					strlen(TxDataBuffer), 1000);
			n_state = 3;
			break;
		}
		break;
 8001466:	e0db      	b.n	8001620 <UI_UART+0x300>
			time_wait += 1;
 8001468:	4b64      	ldr	r3, [pc, #400]	; (80015fc <UI_UART+0x2dc>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	3301      	adds	r3, #1
 800146e:	b2da      	uxtb	r2, r3
 8001470:	4b62      	ldr	r3, [pc, #392]	; (80015fc <UI_UART+0x2dc>)
 8001472:	701a      	strb	r2, [r3, #0]
			sprintf(TxDataBuffer, "time_wait:[%d]\r\n", time_wait);
 8001474:	4b61      	ldr	r3, [pc, #388]	; (80015fc <UI_UART+0x2dc>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	4962      	ldr	r1, [pc, #392]	; (8001604 <UI_UART+0x2e4>)
 800147c:	485b      	ldr	r0, [pc, #364]	; (80015ec <UI_UART+0x2cc>)
 800147e:	f006 fe13 	bl	80080a8 <siprintf>
					strlen(TxDataBuffer), 1000);
 8001482:	485a      	ldr	r0, [pc, #360]	; (80015ec <UI_UART+0x2cc>)
 8001484:	f7fe feac 	bl	80001e0 <strlen>
 8001488:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) TxDataBuffer,
 800148a:	b29a      	uxth	r2, r3
 800148c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001490:	4956      	ldr	r1, [pc, #344]	; (80015ec <UI_UART+0x2cc>)
 8001492:	4853      	ldr	r0, [pc, #332]	; (80015e0 <UI_UART+0x2c0>)
 8001494:	f005 fe5b 	bl	800714e <HAL_UART_Transmit>
			RxDataBuffer[0] = 0;
 8001498:	4b55      	ldr	r3, [pc, #340]	; (80015f0 <UI_UART+0x2d0>)
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
			break;
 800149e:	e03b      	b.n	8001518 <UI_UART+0x1f8>
			time_wait -= 1;
 80014a0:	4b56      	ldr	r3, [pc, #344]	; (80015fc <UI_UART+0x2dc>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	3b01      	subs	r3, #1
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	4b54      	ldr	r3, [pc, #336]	; (80015fc <UI_UART+0x2dc>)
 80014aa:	701a      	strb	r2, [r3, #0]
			sprintf(TxDataBuffer, "time_wait:[%d]\r\n", time_wait);
 80014ac:	4b53      	ldr	r3, [pc, #332]	; (80015fc <UI_UART+0x2dc>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4954      	ldr	r1, [pc, #336]	; (8001604 <UI_UART+0x2e4>)
 80014b4:	484d      	ldr	r0, [pc, #308]	; (80015ec <UI_UART+0x2cc>)
 80014b6:	f006 fdf7 	bl	80080a8 <siprintf>
					strlen(TxDataBuffer), 1000);
 80014ba:	484c      	ldr	r0, [pc, #304]	; (80015ec <UI_UART+0x2cc>)
 80014bc:	f7fe fe90 	bl	80001e0 <strlen>
 80014c0:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) TxDataBuffer,
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c8:	4948      	ldr	r1, [pc, #288]	; (80015ec <UI_UART+0x2cc>)
 80014ca:	4845      	ldr	r0, [pc, #276]	; (80015e0 <UI_UART+0x2c0>)
 80014cc:	f005 fe3f 	bl	800714e <HAL_UART_Transmit>
			RxDataBuffer[0] = 0;
 80014d0:	4b47      	ldr	r3, [pc, #284]	; (80015f0 <UI_UART+0x2d0>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
			break;
 80014d6:	e01f      	b.n	8001518 <UI_UART+0x1f8>
			HAL_UART_Transmit(&huart2, (uint8_t*) H3, strlen(H3), 10);
 80014d8:	484b      	ldr	r0, [pc, #300]	; (8001608 <UI_UART+0x2e8>)
 80014da:	f7fe fe81 	bl	80001e0 <strlen>
 80014de:	4603      	mov	r3, r0
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	230a      	movs	r3, #10
 80014e4:	4948      	ldr	r1, [pc, #288]	; (8001608 <UI_UART+0x2e8>)
 80014e6:	483e      	ldr	r0, [pc, #248]	; (80015e0 <UI_UART+0x2c0>)
 80014e8:	f005 fe31 	bl	800714e <HAL_UART_Transmit>
			sprintf(TxDataBuffer, "now time_work:[%d]\r\n", time_work);
 80014ec:	4b47      	ldr	r3, [pc, #284]	; (800160c <UI_UART+0x2ec>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	4947      	ldr	r1, [pc, #284]	; (8001610 <UI_UART+0x2f0>)
 80014f4:	483d      	ldr	r0, [pc, #244]	; (80015ec <UI_UART+0x2cc>)
 80014f6:	f006 fdd7 	bl	80080a8 <siprintf>
					strlen(TxDataBuffer), 1000);
 80014fa:	483c      	ldr	r0, [pc, #240]	; (80015ec <UI_UART+0x2cc>)
 80014fc:	f7fe fe70 	bl	80001e0 <strlen>
 8001500:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) TxDataBuffer,
 8001502:	b29a      	uxth	r2, r3
 8001504:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001508:	4938      	ldr	r1, [pc, #224]	; (80015ec <UI_UART+0x2cc>)
 800150a:	4835      	ldr	r0, [pc, #212]	; (80015e0 <UI_UART+0x2c0>)
 800150c:	f005 fe1f 	bl	800714e <HAL_UART_Transmit>
			n_state = 3;
 8001510:	4b31      	ldr	r3, [pc, #196]	; (80015d8 <UI_UART+0x2b8>)
 8001512:	2203      	movs	r2, #3
 8001514:	701a      	strb	r2, [r3, #0]
			break;
 8001516:	bf00      	nop
		break;
 8001518:	e082      	b.n	8001620 <UI_UART+0x300>
	case 3:
		switch (RxDataBuffer[0]) {
 800151a:	4b35      	ldr	r3, [pc, #212]	; (80015f0 <UI_UART+0x2d0>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b77      	cmp	r3, #119	; 0x77
 8001520:	d006      	beq.n	8001530 <UI_UART+0x210>
 8001522:	2b77      	cmp	r3, #119	; 0x77
 8001524:	dc7e      	bgt.n	8001624 <UI_UART+0x304>
 8001526:	2b65      	cmp	r3, #101	; 0x65
 8001528:	d03a      	beq.n	80015a0 <UI_UART+0x280>
 800152a:	2b73      	cmp	r3, #115	; 0x73
 800152c:	d01c      	beq.n	8001568 <UI_UART+0x248>
			HAL_UART_Transmit(&huart2, (uint8_t*) H4, strlen(H4), 10);
			eepromWriteFlag = 1;
			n_state = 0;
			break;
		}
		break;
 800152e:	e079      	b.n	8001624 <UI_UART+0x304>
			time_work += 1;
 8001530:	4b36      	ldr	r3, [pc, #216]	; (800160c <UI_UART+0x2ec>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	3301      	adds	r3, #1
 8001536:	b2da      	uxtb	r2, r3
 8001538:	4b34      	ldr	r3, [pc, #208]	; (800160c <UI_UART+0x2ec>)
 800153a:	701a      	strb	r2, [r3, #0]
			sprintf(TxDataBuffer, "time_work:[%d]\r\n", time_work);
 800153c:	4b33      	ldr	r3, [pc, #204]	; (800160c <UI_UART+0x2ec>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	461a      	mov	r2, r3
 8001542:	4934      	ldr	r1, [pc, #208]	; (8001614 <UI_UART+0x2f4>)
 8001544:	4829      	ldr	r0, [pc, #164]	; (80015ec <UI_UART+0x2cc>)
 8001546:	f006 fdaf 	bl	80080a8 <siprintf>
					strlen(TxDataBuffer), 1000);
 800154a:	4828      	ldr	r0, [pc, #160]	; (80015ec <UI_UART+0x2cc>)
 800154c:	f7fe fe48 	bl	80001e0 <strlen>
 8001550:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) TxDataBuffer,
 8001552:	b29a      	uxth	r2, r3
 8001554:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001558:	4924      	ldr	r1, [pc, #144]	; (80015ec <UI_UART+0x2cc>)
 800155a:	4821      	ldr	r0, [pc, #132]	; (80015e0 <UI_UART+0x2c0>)
 800155c:	f005 fdf7 	bl	800714e <HAL_UART_Transmit>
			RxDataBuffer[0] = 0;
 8001560:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <UI_UART+0x2d0>)
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
			break;
 8001566:	e02c      	b.n	80015c2 <UI_UART+0x2a2>
			time_work -= 1;
 8001568:	4b28      	ldr	r3, [pc, #160]	; (800160c <UI_UART+0x2ec>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	3b01      	subs	r3, #1
 800156e:	b2da      	uxtb	r2, r3
 8001570:	4b26      	ldr	r3, [pc, #152]	; (800160c <UI_UART+0x2ec>)
 8001572:	701a      	strb	r2, [r3, #0]
			sprintf(TxDataBuffer, "time_work:[%d]\r\n", time_work);
 8001574:	4b25      	ldr	r3, [pc, #148]	; (800160c <UI_UART+0x2ec>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	461a      	mov	r2, r3
 800157a:	4926      	ldr	r1, [pc, #152]	; (8001614 <UI_UART+0x2f4>)
 800157c:	481b      	ldr	r0, [pc, #108]	; (80015ec <UI_UART+0x2cc>)
 800157e:	f006 fd93 	bl	80080a8 <siprintf>
					strlen(TxDataBuffer), 1000);
 8001582:	481a      	ldr	r0, [pc, #104]	; (80015ec <UI_UART+0x2cc>)
 8001584:	f7fe fe2c 	bl	80001e0 <strlen>
 8001588:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) TxDataBuffer,
 800158a:	b29a      	uxth	r2, r3
 800158c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001590:	4916      	ldr	r1, [pc, #88]	; (80015ec <UI_UART+0x2cc>)
 8001592:	4813      	ldr	r0, [pc, #76]	; (80015e0 <UI_UART+0x2c0>)
 8001594:	f005 fddb 	bl	800714e <HAL_UART_Transmit>
			RxDataBuffer[0] = 0;
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <UI_UART+0x2d0>)
 800159a:	2200      	movs	r2, #0
 800159c:	701a      	strb	r2, [r3, #0]
			break;
 800159e:	e010      	b.n	80015c2 <UI_UART+0x2a2>
			HAL_UART_Transmit(&huart2, (uint8_t*) H4, strlen(H4), 10);
 80015a0:	481d      	ldr	r0, [pc, #116]	; (8001618 <UI_UART+0x2f8>)
 80015a2:	f7fe fe1d 	bl	80001e0 <strlen>
 80015a6:	4603      	mov	r3, r0
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	230a      	movs	r3, #10
 80015ac:	491a      	ldr	r1, [pc, #104]	; (8001618 <UI_UART+0x2f8>)
 80015ae:	480c      	ldr	r0, [pc, #48]	; (80015e0 <UI_UART+0x2c0>)
 80015b0:	f005 fdcd 	bl	800714e <HAL_UART_Transmit>
			eepromWriteFlag = 1;
 80015b4:	4b19      	ldr	r3, [pc, #100]	; (800161c <UI_UART+0x2fc>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]
			n_state = 0;
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <UI_UART+0x2b8>)
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]
			break;
 80015c0:	bf00      	nop
		break;
 80015c2:	e02f      	b.n	8001624 <UI_UART+0x304>
		 }
		 }
		 else if(micros() - time_wait > time_wait){

		 }*/
		switch (RxDataBuffer[0]) {
 80015c4:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <UI_UART+0x2d0>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b71      	cmp	r3, #113	; 0x71
 80015ca:	d12c      	bne.n	8001626 <UI_UART+0x306>
		case 'q':
			n_state = 0;
 80015cc:	4b02      	ldr	r3, [pc, #8]	; (80015d8 <UI_UART+0x2b8>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80015d2:	e028      	b.n	8001626 <UI_UART+0x306>
		break;
 80015d4:	bf00      	nop
 80015d6:	e026      	b.n	8001626 <UI_UART+0x306>
 80015d8:	20000300 	.word	0x20000300
 80015dc:	2000005c 	.word	0x2000005c
 80015e0:	20000510 	.word	0x20000510
 80015e4:	20000002 	.word	0x20000002
 80015e8:	0800891c 	.word	0x0800891c
 80015ec:	200002cc 	.word	0x200002cc
 80015f0:	200002ec 	.word	0x200002ec
 80015f4:	08008934 	.word	0x08008934
 80015f8:	20000074 	.word	0x20000074
 80015fc:	20000000 	.word	0x20000000
 8001600:	08008948 	.word	0x08008948
 8001604:	08008960 	.word	0x08008960
 8001608:	2000009c 	.word	0x2000009c
 800160c:	20000001 	.word	0x20000001
 8001610:	08008974 	.word	0x08008974
 8001614:	0800898c 	.word	0x0800898c
 8001618:	200000c8 	.word	0x200000c8
 800161c:	200002ef 	.word	0x200002ef
		break;
 8001620:	bf00      	nop
 8001622:	e000      	b.n	8001626 <UI_UART+0x306>
		break;
 8001624:	bf00      	nop
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop

0800162c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
	UI_UART();
 8001634:	f7ff fe74 	bl	8001320 <UI_UART>
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <buttonReaderCycle>:

void buttonReaderCycle() {
 8001640:	b490      	push	{r4, r7}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
	uint32_t CapPos = CAPTURENUM
			- __HAL_DMA_GET_COUNTER(htim2.hdma[TIM_DMA_ID_CC1]);
 8001646:	4b27      	ldr	r3, [pc, #156]	; (80016e4 <buttonReaderCycle+0xa4>)
 8001648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
	uint32_t CapPos = CAPTURENUM
 800164e:	f1c3 030a 	rsb	r3, r3, #10
 8001652:	603b      	str	r3, [r7, #0]
	uint32_t sum = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	607b      	str	r3, [r7, #4]

	for (register int i = 2; i < CAPTURENUM - 1; i++) {
 8001658:	2402      	movs	r4, #2
 800165a:	e030      	b.n	80016be <buttonReaderCycle+0x7e>
		DiffTime[i] = capturedata[(CapPos + 1 + i) % CAPTURENUM]
 800165c:	4622      	mov	r2, r4
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	4413      	add	r3, r2
 8001662:	1c59      	adds	r1, r3, #1
 8001664:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <buttonReaderCycle+0xa8>)
 8001666:	fba3 2301 	umull	r2, r3, r3, r1
 800166a:	08da      	lsrs	r2, r3, #3
 800166c:	4613      	mov	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	1aca      	subs	r2, r1, r3
 8001676:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <buttonReaderCycle+0xac>)
 8001678:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
				- capturedata[(CapPos + i) % CAPTURENUM];
 800167c:	4622      	mov	r2, r4
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	18d1      	adds	r1, r2, r3
 8001682:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <buttonReaderCycle+0xa8>)
 8001684:	fba3 2301 	umull	r2, r3, r3, r1
 8001688:	08da      	lsrs	r2, r3, #3
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	1aca      	subs	r2, r1, r3
 8001694:	4b15      	ldr	r3, [pc, #84]	; (80016ec <buttonReaderCycle+0xac>)
 8001696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800169a:	1ac3      	subs	r3, r0, r3
 800169c:	461a      	mov	r2, r3
 800169e:	f04f 0300 	mov.w	r3, #0
		DiffTime[i] = capturedata[(CapPos + 1 + i) % CAPTURENUM]
 80016a2:	4813      	ldr	r0, [pc, #76]	; (80016f0 <buttonReaderCycle+0xb0>)
 80016a4:	00e1      	lsls	r1, r4, #3
 80016a6:	4401      	add	r1, r0
 80016a8:	e9c1 2300 	strd	r2, r3, [r1]
		//Sum all  Diff
		sum += DiffTime[i];
 80016ac:	4a10      	ldr	r2, [pc, #64]	; (80016f0 <buttonReaderCycle+0xb0>)
 80016ae:	00e3      	lsls	r3, r4, #3
 80016b0:	4413      	add	r3, r2
 80016b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	607b      	str	r3, [r7, #4]
	for (register int i = 2; i < CAPTURENUM - 1; i++) {
 80016bc:	3401      	adds	r4, #1
 80016be:	2c08      	cmp	r4, #8
 80016c0:	ddcc      	ble.n	800165c <buttonReaderCycle+0x1c>
	}

	MeanTime = sum / (float) (CAPTURENUM - 3);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	ee07 3a90 	vmov	s15, r3
 80016c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016cc:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
 80016d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016d4:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <buttonReaderCycle+0xb4>)
 80016d6:	edc3 7a00 	vstr	s15, [r3]
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc90      	pop	{r4, r7}
 80016e2:	4770      	bx	lr
 80016e4:	200004c8 	.word	0x200004c8
 80016e8:	cccccccd 	.word	0xcccccccd
 80016ec:	20000254 	.word	0x20000254
 80016f0:	20000280 	.word	0x20000280
 80016f4:	200002c8 	.word	0x200002c8

080016f8 <EEPROMWrite>:

void EEPROMWrite() {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af02      	add	r7, sp, #8
	if (eepromWriteFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 80016fe:	4b13      	ldr	r3, [pc, #76]	; (800174c <EEPROMWrite+0x54>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d01e      	beq.n	8001744 <EEPROMWrite+0x4c>
 8001706:	4b12      	ldr	r3, [pc, #72]	; (8001750 <EEPROMWrite+0x58>)
 8001708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b20      	cmp	r3, #32
 8001710:	d118      	bne.n	8001744 <EEPROMWrite+0x4c>

		static uint8_t data[3] = { 0 };
		data[0] = station_goal;
 8001712:	4b10      	ldr	r3, [pc, #64]	; (8001754 <EEPROMWrite+0x5c>)
 8001714:	781a      	ldrb	r2, [r3, #0]
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <EEPROMWrite+0x60>)
 8001718:	701a      	strb	r2, [r3, #0]
		data[1] = time_wait;
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <EEPROMWrite+0x64>)
 800171c:	781a      	ldrb	r2, [r3, #0]
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <EEPROMWrite+0x60>)
 8001720:	705a      	strb	r2, [r3, #1]
		data[2] = time_work;
 8001722:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <EEPROMWrite+0x68>)
 8001724:	781a      	ldrb	r2, [r3, #0]
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <EEPROMWrite+0x60>)
 8001728:	709a      	strb	r2, [r3, #2]

		HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, 0x1A, I2C_MEMADD_SIZE_16BIT,
 800172a:	2303      	movs	r3, #3
 800172c:	9301      	str	r3, [sp, #4]
 800172e:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <EEPROMWrite+0x60>)
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	2310      	movs	r3, #16
 8001734:	221a      	movs	r2, #26
 8001736:	21a0      	movs	r1, #160	; 0xa0
 8001738:	4805      	ldr	r0, [pc, #20]	; (8001750 <EEPROMWrite+0x58>)
 800173a:	f002 f813 	bl	8003764 <HAL_I2C_Mem_Write_IT>
				data, 3);

		eepromWriteFlag = 0;
 800173e:	4b03      	ldr	r3, [pc, #12]	; (800174c <EEPROMWrite+0x54>)
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
	}
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200002ef 	.word	0x200002ef
 8001750:	20000388 	.word	0x20000388
 8001754:	20000002 	.word	0x20000002
 8001758:	20000304 	.word	0x20000304
 800175c:	20000000 	.word	0x20000000
 8001760:	20000001 	.word	0x20000001

08001764 <EEPROMRead>:

void EEPROMRead(uint8_t *Rdata, uint16_t len) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af02      	add	r7, sp, #8
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	807b      	strh	r3, [r7, #2]
	if (eepromReadFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8001770:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <EEPROMRead+0x44>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d012      	beq.n	800179e <EEPROMRead+0x3a>
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <EEPROMRead+0x48>)
 800177a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2b20      	cmp	r3, #32
 8001782:	d10c      	bne.n	800179e <EEPROMRead+0x3a>

		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, 0x1a, I2C_MEMADD_SIZE_16BIT,
 8001784:	887b      	ldrh	r3, [r7, #2]
 8001786:	9301      	str	r3, [sp, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	2310      	movs	r3, #16
 800178e:	221a      	movs	r2, #26
 8001790:	21a0      	movs	r1, #160	; 0xa0
 8001792:	4806      	ldr	r0, [pc, #24]	; (80017ac <EEPROMRead+0x48>)
 8001794:	f002 f898 	bl	80038c8 <HAL_I2C_Mem_Read_IT>
				Rdata, len);

		eepromReadFlag = 0;
 8001798:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <EEPROMRead+0x44>)
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]
	}
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200002f0 	.word	0x200002f0
 80017ac:	20000388 	.word	0x20000388

080017b0 <IOExpenderInit>:

void IOExpenderInit() {
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
	 0x00, 0x00, 0x00, 0x00 };
	 for_spi[0] = 0b01000000;
	 for_spi[1] = Setting;
	 HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
	 HAL_SPI_Transmit_IT(&hspi3, Setting, 16);*/
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
	...

080017c0 <ADCPollingMethodUpdate>:
 &data, 1);
 IOExpdreWriteFlag = 0;
 }
 */

void ADCPollingMethodUpdate() {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	static uint8_t num = 0;
	static ADC_ChannelConfTypeDef sConfig;
	sConfig.Channel = ADC_CHANNEL_0;
 80017c4:	4b3e      	ldr	r3, [pc, #248]	; (80018c0 <ADCPollingMethodUpdate+0x100>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 80017ca:	4b3d      	ldr	r3, [pc, #244]	; (80018c0 <ADCPollingMethodUpdate+0x100>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017d0:	4b3b      	ldr	r3, [pc, #236]	; (80018c0 <ADCPollingMethodUpdate+0x100>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]

	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80017d6:	493a      	ldr	r1, [pc, #232]	; (80018c0 <ADCPollingMethodUpdate+0x100>)
 80017d8:	483a      	ldr	r0, [pc, #232]	; (80018c4 <ADCPollingMethodUpdate+0x104>)
 80017da:	f000 fd91 	bl	8002300 <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(&hadc1);
 80017de:	4839      	ldr	r0, [pc, #228]	; (80018c4 <ADCPollingMethodUpdate+0x104>)
 80017e0:	f000 fc0e 	bl	8002000 <HAL_ADC_Start>

	if (HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK)
 80017e4:	4938      	ldr	r1, [pc, #224]	; (80018c8 <ADCPollingMethodUpdate+0x108>)
 80017e6:	4837      	ldr	r0, [pc, #220]	; (80018c4 <ADCPollingMethodUpdate+0x104>)
 80017e8:	f000 fcf1 	bl	80021ce <HAL_ADC_PollForConversion>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d158      	bne.n	80018a4 <ADCPollingMethodUpdate+0xe4>
	{
			Temp = HAL_ADC_GetValue(&hadc1);
 80017f2:	4834      	ldr	r0, [pc, #208]	; (80018c4 <ADCPollingMethodUpdate+0x104>)
 80017f4:	f000 fd76 	bl	80022e4 <HAL_ADC_GetValue>
 80017f8:	4603      	mov	r3, r0
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	4b33      	ldr	r3, [pc, #204]	; (80018cc <ADCPollingMethodUpdate+0x10c>)
 80017fe:	701a      	strb	r2, [r3, #0]
			TempOld[num] = Temp;
 8001800:	4b32      	ldr	r3, [pc, #200]	; (80018cc <ADCPollingMethodUpdate+0x10c>)
 8001802:	7819      	ldrb	r1, [r3, #0]
 8001804:	4b32      	ldr	r3, [pc, #200]	; (80018d0 <ADCPollingMethodUpdate+0x110>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	b289      	uxth	r1, r1
 800180c:	4b31      	ldr	r3, [pc, #196]	; (80018d4 <ADCPollingMethodUpdate+0x114>)
 800180e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			TempNow = (((TempOld[num] * 3.6 / 256) - 0.76) / 2.5) + 25;
 8001812:	4b2f      	ldr	r3, [pc, #188]	; (80018d0 <ADCPollingMethodUpdate+0x110>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	461a      	mov	r2, r3
 8001818:	4b2e      	ldr	r3, [pc, #184]	; (80018d4 <ADCPollingMethodUpdate+0x114>)
 800181a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe fe88 	bl	8000534 <__aeabi_i2d>
 8001824:	a322      	add	r3, pc, #136	; (adr r3, 80018b0 <ADCPollingMethodUpdate+0xf0>)
 8001826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182a:	f7fe feed 	bl	8000608 <__aeabi_dmul>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4610      	mov	r0, r2
 8001834:	4619      	mov	r1, r3
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	4b27      	ldr	r3, [pc, #156]	; (80018d8 <ADCPollingMethodUpdate+0x118>)
 800183c:	f7ff f80e 	bl	800085c <__aeabi_ddiv>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	a31b      	add	r3, pc, #108	; (adr r3, 80018b8 <ADCPollingMethodUpdate+0xf8>)
 800184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184e:	f7fe fd23 	bl	8000298 <__aeabi_dsub>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4610      	mov	r0, r2
 8001858:	4619      	mov	r1, r3
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	4b1f      	ldr	r3, [pc, #124]	; (80018dc <ADCPollingMethodUpdate+0x11c>)
 8001860:	f7fe fffc 	bl	800085c <__aeabi_ddiv>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4610      	mov	r0, r2
 800186a:	4619      	mov	r1, r3
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <ADCPollingMethodUpdate+0x120>)
 8001872:	f7fe fd13 	bl	800029c <__adddf3>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4610      	mov	r0, r2
 800187c:	4619      	mov	r1, r3
 800187e:	f7ff f8d5 	bl	8000a2c <__aeabi_d2uiz>
 8001882:	4603      	mov	r3, r0
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <ADCPollingMethodUpdate+0x124>)
 8001888:	701a      	strb	r2, [r3, #0]
			num++;
 800188a:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <ADCPollingMethodUpdate+0x110>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	3301      	adds	r3, #1
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <ADCPollingMethodUpdate+0x110>)
 8001894:	701a      	strb	r2, [r3, #0]
			if (num == 100) {
 8001896:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <ADCPollingMethodUpdate+0x110>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b64      	cmp	r3, #100	; 0x64
 800189c:	d102      	bne.n	80018a4 <ADCPollingMethodUpdate+0xe4>
				num = 0;
 800189e:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <ADCPollingMethodUpdate+0x110>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
			}
	}

		HAL_ADC_Stop(&hadc1);
 80018a4:	4807      	ldr	r0, [pc, #28]	; (80018c4 <ADCPollingMethodUpdate+0x104>)
 80018a6:	f000 fc5f 	bl	8002168 <HAL_ADC_Stop>

}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	cccccccd 	.word	0xcccccccd
 80018b4:	400ccccc 	.word	0x400ccccc
 80018b8:	851eb852 	.word	0x851eb852
 80018bc:	3fe851eb 	.word	0x3fe851eb
 80018c0:	20000308 	.word	0x20000308
 80018c4:	20000438 	.word	0x20000438
 80018c8:	000f4240 	.word	0x000f4240
 80018cc:	20000184 	.word	0x20000184
 80018d0:	20000318 	.word	0x20000318
 80018d4:	20000188 	.word	0x20000188
 80018d8:	40700000 	.word	0x40700000
 80018dc:	40040000 	.word	0x40040000
 80018e0:	40390000 	.word	0x40390000
 80018e4:	20000250 	.word	0x20000250

080018e8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80018e8:	b4b0      	push	{r4, r5, r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a0a      	ldr	r2, [pc, #40]	; (800191c <HAL_TIM_PeriodElapsedCallback+0x34>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d10c      	bne.n	8001912 <HAL_TIM_PeriodElapsedCallback+0x2a>
		_micro += 65535;
 80018f8:	4b09      	ldr	r3, [pc, #36]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80018fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001902:	f04f 0100 	mov.w	r1, #0
 8001906:	1814      	adds	r4, r2, r0
 8001908:	eb43 0501 	adc.w	r5, r3, r1
 800190c:	4b04      	ldr	r3, [pc, #16]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800190e:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	bcb0      	pop	{r4, r5, r7}
 800191a:	4770      	bx	lr
 800191c:	20000480 	.word	0x20000480
 8001920:	200002f8 	.word	0x200002f8

08001924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001928:	b672      	cpsid	i
}
 800192a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800192c:	e7fe      	b.n	800192c <Error_Handler+0x8>
	...

08001930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	607b      	str	r3, [r7, #4]
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <HAL_MspInit+0x4c>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	4a0f      	ldr	r2, [pc, #60]	; (800197c <HAL_MspInit+0x4c>)
 8001940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001944:	6453      	str	r3, [r2, #68]	; 0x44
 8001946:	4b0d      	ldr	r3, [pc, #52]	; (800197c <HAL_MspInit+0x4c>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800194e:	607b      	str	r3, [r7, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	603b      	str	r3, [r7, #0]
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <HAL_MspInit+0x4c>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	4a08      	ldr	r2, [pc, #32]	; (800197c <HAL_MspInit+0x4c>)
 800195c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001960:	6413      	str	r3, [r2, #64]	; 0x40
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_MspInit+0x4c>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196a:	603b      	str	r3, [r7, #0]
 800196c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800196e:	2007      	movs	r0, #7
 8001970:	f000 ffc4 	bl	80028fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40023800 	.word	0x40023800

08001980 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0b      	ldr	r2, [pc, #44]	; (80019bc <HAL_ADC_MspInit+0x3c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d10d      	bne.n	80019ae <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <HAL_ADC_MspInit+0x40>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	4a09      	ldr	r2, [pc, #36]	; (80019c0 <HAL_ADC_MspInit+0x40>)
 800199c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a0:	6453      	str	r3, [r2, #68]	; 0x44
 80019a2:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <HAL_ADC_MspInit+0x40>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40012000 	.word	0x40012000
 80019c0:	40023800 	.word	0x40023800

080019c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08a      	sub	sp, #40	; 0x28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a21      	ldr	r2, [pc, #132]	; (8001a68 <HAL_I2C_MspInit+0xa4>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d13c      	bne.n	8001a60 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <HAL_I2C_MspInit+0xa8>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4a1f      	ldr	r2, [pc, #124]	; (8001a6c <HAL_I2C_MspInit+0xa8>)
 80019f0:	f043 0302 	orr.w	r3, r3, #2
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <HAL_I2C_MspInit+0xa8>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a08:	2312      	movs	r3, #18
 8001a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a10:	2303      	movs	r3, #3
 8001a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a14:	2304      	movs	r3, #4
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4814      	ldr	r0, [pc, #80]	; (8001a70 <HAL_I2C_MspInit+0xac>)
 8001a20:	f001 fbbe 	bl	80031a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <HAL_I2C_MspInit+0xa8>)
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	4a0f      	ldr	r2, [pc, #60]	; (8001a6c <HAL_I2C_MspInit+0xa8>)
 8001a2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a32:	6413      	str	r3, [r2, #64]	; 0x40
 8001a34:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <HAL_I2C_MspInit+0xa8>)
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2100      	movs	r1, #0
 8001a44:	201f      	movs	r0, #31
 8001a46:	f000 ff64 	bl	8002912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a4a:	201f      	movs	r0, #31
 8001a4c:	f000 ff7d 	bl	800294a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2100      	movs	r1, #0
 8001a54:	2020      	movs	r0, #32
 8001a56:	f000 ff5c 	bl	8002912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001a5a:	2020      	movs	r0, #32
 8001a5c:	f000 ff75 	bl	800294a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a60:	bf00      	nop
 8001a62:	3728      	adds	r7, #40	; 0x28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40005400 	.word	0x40005400
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40020400 	.word	0x40020400

08001a74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	; 0x28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a19      	ldr	r2, [pc, #100]	; (8001af8 <HAL_SPI_MspInit+0x84>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d12b      	bne.n	8001aee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	4b18      	ldr	r3, [pc, #96]	; (8001afc <HAL_SPI_MspInit+0x88>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	4a17      	ldr	r2, [pc, #92]	; (8001afc <HAL_SPI_MspInit+0x88>)
 8001aa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <HAL_SPI_MspInit+0x88>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	4b11      	ldr	r3, [pc, #68]	; (8001afc <HAL_SPI_MspInit+0x88>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a10      	ldr	r2, [pc, #64]	; (8001afc <HAL_SPI_MspInit+0x88>)
 8001abc:	f043 0302 	orr.w	r3, r3, #2
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <HAL_SPI_MspInit+0x88>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001ace:	2338      	movs	r3, #56	; 0x38
 8001ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ada:	2303      	movs	r3, #3
 8001adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ade:	2306      	movs	r3, #6
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae2:	f107 0314 	add.w	r3, r7, #20
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4805      	ldr	r0, [pc, #20]	; (8001b00 <HAL_SPI_MspInit+0x8c>)
 8001aea:	f001 fb59 	bl	80031a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001aee:	bf00      	nop
 8001af0:	3728      	adds	r7, #40	; 0x28
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40003c00 	.word	0x40003c00
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40020400 	.word	0x40020400

08001b04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	; 0x28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b24:	d165      	bne.n	8001bf2 <HAL_TIM_Base_MspInit+0xee>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	4b41      	ldr	r3, [pc, #260]	; (8001c30 <HAL_TIM_Base_MspInit+0x12c>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	4a40      	ldr	r2, [pc, #256]	; (8001c30 <HAL_TIM_Base_MspInit+0x12c>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6413      	str	r3, [r2, #64]	; 0x40
 8001b36:	4b3e      	ldr	r3, [pc, #248]	; (8001c30 <HAL_TIM_Base_MspInit+0x12c>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	4b3a      	ldr	r3, [pc, #232]	; (8001c30 <HAL_TIM_Base_MspInit+0x12c>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	4a39      	ldr	r2, [pc, #228]	; (8001c30 <HAL_TIM_Base_MspInit+0x12c>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
 8001b52:	4b37      	ldr	r3, [pc, #220]	; (8001c30 <HAL_TIM_Base_MspInit+0x12c>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	2302      	movs	r3, #2
 8001b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	4619      	mov	r1, r3
 8001b78:	482e      	ldr	r0, [pc, #184]	; (8001c34 <HAL_TIM_Base_MspInit+0x130>)
 8001b7a:	f001 fb11 	bl	80031a0 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8001b7e:	4b2e      	ldr	r3, [pc, #184]	; (8001c38 <HAL_TIM_Base_MspInit+0x134>)
 8001b80:	4a2e      	ldr	r2, [pc, #184]	; (8001c3c <HAL_TIM_Base_MspInit+0x138>)
 8001b82:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8001b84:	4b2c      	ldr	r3, [pc, #176]	; (8001c38 <HAL_TIM_Base_MspInit+0x134>)
 8001b86:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001b8a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b8c:	4b2a      	ldr	r3, [pc, #168]	; (8001c38 <HAL_TIM_Base_MspInit+0x134>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b92:	4b29      	ldr	r3, [pc, #164]	; (8001c38 <HAL_TIM_Base_MspInit+0x134>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001b98:	4b27      	ldr	r3, [pc, #156]	; (8001c38 <HAL_TIM_Base_MspInit+0x134>)
 8001b9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b9e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ba0:	4b25      	ldr	r3, [pc, #148]	; (8001c38 <HAL_TIM_Base_MspInit+0x134>)
 8001ba2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ba6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ba8:	4b23      	ldr	r3, [pc, #140]	; (8001c38 <HAL_TIM_Base_MspInit+0x134>)
 8001baa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bae:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001bb0:	4b21      	ldr	r3, [pc, #132]	; (8001c38 <HAL_TIM_Base_MspInit+0x134>)
 8001bb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bb6:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001bb8:	4b1f      	ldr	r3, [pc, #124]	; (8001c38 <HAL_TIM_Base_MspInit+0x134>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bbe:	4b1e      	ldr	r3, [pc, #120]	; (8001c38 <HAL_TIM_Base_MspInit+0x134>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001bc4:	481c      	ldr	r0, [pc, #112]	; (8001c38 <HAL_TIM_Base_MspInit+0x134>)
 8001bc6:	f000 fedb 	bl	8002980 <HAL_DMA_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 8001bd0:	f7ff fea8 	bl	8001924 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a18      	ldr	r2, [pc, #96]	; (8001c38 <HAL_TIM_Base_MspInit+0x134>)
 8001bd8:	625a      	str	r2, [r3, #36]	; 0x24
 8001bda:	4a17      	ldr	r2, [pc, #92]	; (8001c38 <HAL_TIM_Base_MspInit+0x134>)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2100      	movs	r1, #0
 8001be4:	201c      	movs	r0, #28
 8001be6:	f000 fe94 	bl	8002912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bea:	201c      	movs	r0, #28
 8001bec:	f000 fead 	bl	800294a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001bf0:	e01a      	b.n	8001c28 <HAL_TIM_Base_MspInit+0x124>
  else if(htim_base->Instance==TIM11)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a12      	ldr	r2, [pc, #72]	; (8001c40 <HAL_TIM_Base_MspInit+0x13c>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d115      	bne.n	8001c28 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <HAL_TIM_Base_MspInit+0x12c>)
 8001c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c04:	4a0a      	ldr	r2, [pc, #40]	; (8001c30 <HAL_TIM_Base_MspInit+0x12c>)
 8001c06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c0a:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0c:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <HAL_TIM_Base_MspInit+0x12c>)
 8001c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	201a      	movs	r0, #26
 8001c1e:	f000 fe78 	bl	8002912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001c22:	201a      	movs	r0, #26
 8001c24:	f000 fe91 	bl	800294a <HAL_NVIC_EnableIRQ>
}
 8001c28:	bf00      	nop
 8001c2a:	3728      	adds	r7, #40	; 0x28
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40020000 	.word	0x40020000
 8001c38:	20000328 	.word	0x20000328
 8001c3c:	40026088 	.word	0x40026088
 8001c40:	40014800 	.word	0x40014800

08001c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a1d      	ldr	r2, [pc, #116]	; (8001cd8 <HAL_UART_MspInit+0x94>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d133      	bne.n	8001cce <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	4b1c      	ldr	r3, [pc, #112]	; (8001cdc <HAL_UART_MspInit+0x98>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	4a1b      	ldr	r2, [pc, #108]	; (8001cdc <HAL_UART_MspInit+0x98>)
 8001c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c74:	6413      	str	r3, [r2, #64]	; 0x40
 8001c76:	4b19      	ldr	r3, [pc, #100]	; (8001cdc <HAL_UART_MspInit+0x98>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <HAL_UART_MspInit+0x98>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a14      	ldr	r2, [pc, #80]	; (8001cdc <HAL_UART_MspInit+0x98>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <HAL_UART_MspInit+0x98>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c9e:	230c      	movs	r3, #12
 8001ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001caa:	2303      	movs	r3, #3
 8001cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cae:	2307      	movs	r3, #7
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb2:	f107 0314 	add.w	r3, r7, #20
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4809      	ldr	r0, [pc, #36]	; (8001ce0 <HAL_UART_MspInit+0x9c>)
 8001cba:	f001 fa71 	bl	80031a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	2026      	movs	r0, #38	; 0x26
 8001cc4:	f000 fe25 	bl	8002912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cc8:	2026      	movs	r0, #38	; 0x26
 8001cca:	f000 fe3e 	bl	800294a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cce:	bf00      	nop
 8001cd0:	3728      	adds	r7, #40	; 0x28
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40004400 	.word	0x40004400
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40020000 	.word	0x40020000

08001ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <NMI_Handler+0x4>

08001cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cee:	e7fe      	b.n	8001cee <HardFault_Handler+0x4>

08001cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <MemManage_Handler+0x4>

08001cf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cfa:	e7fe      	b.n	8001cfa <BusFault_Handler+0x4>

08001cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d00:	e7fe      	b.n	8001d00 <UsageFault_Handler+0x4>

08001d02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d30:	f000 f902 	bl	8001f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001d3c:	4802      	ldr	r0, [pc, #8]	; (8001d48 <DMA1_Stream5_IRQHandler+0x10>)
 8001d3e:	f000 ffb7 	bl	8002cb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000328 	.word	0x20000328

08001d4c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001d50:	4802      	ldr	r0, [pc, #8]	; (8001d5c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001d52:	f004 fb47 	bl	80063e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000480 	.word	0x20000480

08001d60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d64:	4802      	ldr	r0, [pc, #8]	; (8001d70 <TIM2_IRQHandler+0x10>)
 8001d66:	f004 fb3d 	bl	80063e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200004c8 	.word	0x200004c8

08001d74 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001d78:	4802      	ldr	r0, [pc, #8]	; (8001d84 <I2C1_EV_IRQHandler+0x10>)
 8001d7a:	f001 fe63 	bl	8003a44 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000388 	.word	0x20000388

08001d88 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001d8c:	4802      	ldr	r0, [pc, #8]	; (8001d98 <I2C1_ER_IRQHandler+0x10>)
 8001d8e:	f001 ffca 	bl	8003d26 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000388 	.word	0x20000388

08001d9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001da0:	4802      	ldr	r0, [pc, #8]	; (8001dac <USART2_IRQHandler+0x10>)
 8001da2:	f005 fa97 	bl	80072d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000510 	.word	0x20000510

08001db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001db8:	4a14      	ldr	r2, [pc, #80]	; (8001e0c <_sbrk+0x5c>)
 8001dba:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <_sbrk+0x60>)
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dc4:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <_sbrk+0x64>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d102      	bne.n	8001dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dcc:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <_sbrk+0x64>)
 8001dce:	4a12      	ldr	r2, [pc, #72]	; (8001e18 <_sbrk+0x68>)
 8001dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dd2:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <_sbrk+0x64>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d207      	bcs.n	8001df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001de0:	f006 f930 	bl	8008044 <__errno>
 8001de4:	4603      	mov	r3, r0
 8001de6:	220c      	movs	r2, #12
 8001de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dea:	f04f 33ff 	mov.w	r3, #4294967295
 8001dee:	e009      	b.n	8001e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001df0:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <_sbrk+0x64>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001df6:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <_sbrk+0x64>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	4a05      	ldr	r2, [pc, #20]	; (8001e14 <_sbrk+0x64>)
 8001e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e02:	68fb      	ldr	r3, [r7, #12]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20020000 	.word	0x20020000
 8001e10:	00000400 	.word	0x00000400
 8001e14:	2000031c 	.word	0x2000031c
 8001e18:	20000568 	.word	0x20000568

08001e1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e20:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <SystemInit+0x20>)
 8001e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e26:	4a05      	ldr	r2, [pc, #20]	; (8001e3c <SystemInit+0x20>)
 8001e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e44:	480d      	ldr	r0, [pc, #52]	; (8001e7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e46:	490e      	ldr	r1, [pc, #56]	; (8001e80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e48:	4a0e      	ldr	r2, [pc, #56]	; (8001e84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e4c:	e002      	b.n	8001e54 <LoopCopyDataInit>

08001e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e52:	3304      	adds	r3, #4

08001e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e58:	d3f9      	bcc.n	8001e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e5a:	4a0b      	ldr	r2, [pc, #44]	; (8001e88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e5c:	4c0b      	ldr	r4, [pc, #44]	; (8001e8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e60:	e001      	b.n	8001e66 <LoopFillZerobss>

08001e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e64:	3204      	adds	r2, #4

08001e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e68:	d3fb      	bcc.n	8001e62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e6a:	f7ff ffd7 	bl	8001e1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e6e:	f006 f8ef 	bl	8008050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e72:	f7fe ff77 	bl	8000d64 <main>
  bx  lr    
 8001e76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e80:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8001e84:	08008a04 	.word	0x08008a04
  ldr r2, =_sbss
 8001e88:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8001e8c:	20000568 	.word	0x20000568

08001e90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e90:	e7fe      	b.n	8001e90 <ADC_IRQHandler>
	...

08001e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e98:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <HAL_Init+0x40>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a0d      	ldr	r2, [pc, #52]	; (8001ed4 <HAL_Init+0x40>)
 8001e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ea2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_Init+0x40>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0a      	ldr	r2, [pc, #40]	; (8001ed4 <HAL_Init+0x40>)
 8001eaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <HAL_Init+0x40>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a07      	ldr	r2, [pc, #28]	; (8001ed4 <HAL_Init+0x40>)
 8001eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ebc:	2003      	movs	r0, #3
 8001ebe:	f000 fd1d 	bl	80028fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	f000 f808 	bl	8001ed8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ec8:	f7ff fd32 	bl	8001930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40023c00 	.word	0x40023c00

08001ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ee0:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <HAL_InitTick+0x54>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <HAL_InitTick+0x58>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 fd35 	bl	8002966 <HAL_SYSTICK_Config>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e00e      	b.n	8001f24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b0f      	cmp	r3, #15
 8001f0a:	d80a      	bhi.n	8001f22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	f04f 30ff 	mov.w	r0, #4294967295
 8001f14:	f000 fcfd 	bl	8002912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f18:	4a06      	ldr	r2, [pc, #24]	; (8001f34 <HAL_InitTick+0x5c>)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e000      	b.n	8001f24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	200000f8 	.word	0x200000f8
 8001f30:	20000100 	.word	0x20000100
 8001f34:	200000fc 	.word	0x200000fc

08001f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <HAL_IncTick+0x20>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	461a      	mov	r2, r3
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_IncTick+0x24>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4413      	add	r3, r2
 8001f48:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <HAL_IncTick+0x24>)
 8001f4a:	6013      	str	r3, [r2, #0]
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	20000100 	.word	0x20000100
 8001f5c:	20000554 	.word	0x20000554

08001f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return uwTick;
 8001f64:	4b03      	ldr	r3, [pc, #12]	; (8001f74 <HAL_GetTick+0x14>)
 8001f66:	681b      	ldr	r3, [r3, #0]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	20000554 	.word	0x20000554

08001f78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e033      	b.n	8001ff6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d109      	bne.n	8001faa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff fcf2 	bl	8001980 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f003 0310 	and.w	r3, r3, #16
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d118      	bne.n	8001fe8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fbe:	f023 0302 	bic.w	r3, r3, #2
 8001fc2:	f043 0202 	orr.w	r2, r3, #2
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 faca 	bl	8002564 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f023 0303 	bic.w	r3, r3, #3
 8001fde:	f043 0201 	orr.w	r2, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	641a      	str	r2, [r3, #64]	; 0x40
 8001fe6:	e001      	b.n	8001fec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002008:	2300      	movs	r3, #0
 800200a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_ADC_Start+0x1a>
 8002016:	2302      	movs	r3, #2
 8002018:	e097      	b.n	800214a <HAL_ADC_Start+0x14a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b01      	cmp	r3, #1
 800202e:	d018      	beq.n	8002062 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0201 	orr.w	r2, r2, #1
 800203e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002040:	4b45      	ldr	r3, [pc, #276]	; (8002158 <HAL_ADC_Start+0x158>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a45      	ldr	r2, [pc, #276]	; (800215c <HAL_ADC_Start+0x15c>)
 8002046:	fba2 2303 	umull	r2, r3, r2, r3
 800204a:	0c9a      	lsrs	r2, r3, #18
 800204c:	4613      	mov	r3, r2
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	4413      	add	r3, r2
 8002052:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002054:	e002      	b.n	800205c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	3b01      	subs	r3, #1
 800205a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f9      	bne.n	8002056 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b01      	cmp	r3, #1
 800206e:	d15f      	bne.n	8002130 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002078:	f023 0301 	bic.w	r3, r3, #1
 800207c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800208e:	2b00      	cmp	r3, #0
 8002090:	d007      	beq.n	80020a2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800209a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020ae:	d106      	bne.n	80020be <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b4:	f023 0206 	bic.w	r2, r3, #6
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	645a      	str	r2, [r3, #68]	; 0x44
 80020bc:	e002      	b.n	80020c4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020cc:	4b24      	ldr	r3, [pc, #144]	; (8002160 <HAL_ADC_Start+0x160>)
 80020ce:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80020d8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 031f 	and.w	r3, r3, #31
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10f      	bne.n	8002106 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d129      	bne.n	8002148 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	e020      	b.n	8002148 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a16      	ldr	r2, [pc, #88]	; (8002164 <HAL_ADC_Start+0x164>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d11b      	bne.n	8002148 <HAL_ADC_Start+0x148>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d114      	bne.n	8002148 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	e00b      	b.n	8002148 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	f043 0210 	orr.w	r2, r3, #16
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002140:	f043 0201 	orr.w	r2, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	200000f8 	.word	0x200000f8
 800215c:	431bde83 	.word	0x431bde83
 8002160:	40012300 	.word	0x40012300
 8002164:	40012000 	.word	0x40012000

08002168 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002176:	2b01      	cmp	r3, #1
 8002178:	d101      	bne.n	800217e <HAL_ADC_Stop+0x16>
 800217a:	2302      	movs	r3, #2
 800217c:	e021      	b.n	80021c2 <HAL_ADC_Stop+0x5a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0201 	bic.w	r2, r2, #1
 8002194:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d109      	bne.n	80021b8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021ac:	f023 0301 	bic.w	r3, r3, #1
 80021b0:	f043 0201 	orr.w	r2, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b084      	sub	sp, #16
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ea:	d113      	bne.n	8002214 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021fa:	d10b      	bne.n	8002214 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	f043 0220 	orr.w	r2, r3, #32
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e063      	b.n	80022dc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002214:	f7ff fea4 	bl	8001f60 <HAL_GetTick>
 8002218:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800221a:	e021      	b.n	8002260 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002222:	d01d      	beq.n	8002260 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d007      	beq.n	800223a <HAL_ADC_PollForConversion+0x6c>
 800222a:	f7ff fe99 	bl	8001f60 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d212      	bcs.n	8002260 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b02      	cmp	r3, #2
 8002246:	d00b      	beq.n	8002260 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	f043 0204 	orr.w	r2, r3, #4
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e03d      	b.n	80022dc <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b02      	cmp	r3, #2
 800226c:	d1d6      	bne.n	800221c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f06f 0212 	mvn.w	r2, #18
 8002276:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d123      	bne.n	80022da <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002296:	2b00      	cmp	r3, #0
 8002298:	d11f      	bne.n	80022da <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d006      	beq.n	80022b6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d111      	bne.n	80022da <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d105      	bne.n	80022da <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	f043 0201 	orr.w	r2, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
	...

08002300 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800230a:	2300      	movs	r3, #0
 800230c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002314:	2b01      	cmp	r3, #1
 8002316:	d101      	bne.n	800231c <HAL_ADC_ConfigChannel+0x1c>
 8002318:	2302      	movs	r3, #2
 800231a:	e113      	b.n	8002544 <HAL_ADC_ConfigChannel+0x244>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b09      	cmp	r3, #9
 800232a:	d925      	bls.n	8002378 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68d9      	ldr	r1, [r3, #12]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	b29b      	uxth	r3, r3
 8002338:	461a      	mov	r2, r3
 800233a:	4613      	mov	r3, r2
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	4413      	add	r3, r2
 8002340:	3b1e      	subs	r3, #30
 8002342:	2207      	movs	r2, #7
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43da      	mvns	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	400a      	ands	r2, r1
 8002350:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68d9      	ldr	r1, [r3, #12]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	b29b      	uxth	r3, r3
 8002362:	4618      	mov	r0, r3
 8002364:	4603      	mov	r3, r0
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4403      	add	r3, r0
 800236a:	3b1e      	subs	r3, #30
 800236c:	409a      	lsls	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	e022      	b.n	80023be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6919      	ldr	r1, [r3, #16]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	b29b      	uxth	r3, r3
 8002384:	461a      	mov	r2, r3
 8002386:	4613      	mov	r3, r2
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	4413      	add	r3, r2
 800238c:	2207      	movs	r2, #7
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43da      	mvns	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	400a      	ands	r2, r1
 800239a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6919      	ldr	r1, [r3, #16]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	4618      	mov	r0, r3
 80023ae:	4603      	mov	r3, r0
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	4403      	add	r3, r0
 80023b4:	409a      	lsls	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b06      	cmp	r3, #6
 80023c4:	d824      	bhi.n	8002410 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	3b05      	subs	r3, #5
 80023d8:	221f      	movs	r2, #31
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43da      	mvns	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	400a      	ands	r2, r1
 80023e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	4618      	mov	r0, r3
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	3b05      	subs	r3, #5
 8002402:	fa00 f203 	lsl.w	r2, r0, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	635a      	str	r2, [r3, #52]	; 0x34
 800240e:	e04c      	b.n	80024aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b0c      	cmp	r3, #12
 8002416:	d824      	bhi.n	8002462 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	3b23      	subs	r3, #35	; 0x23
 800242a:	221f      	movs	r2, #31
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43da      	mvns	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	400a      	ands	r2, r1
 8002438:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	b29b      	uxth	r3, r3
 8002446:	4618      	mov	r0, r3
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	3b23      	subs	r3, #35	; 0x23
 8002454:	fa00 f203 	lsl.w	r2, r0, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	631a      	str	r2, [r3, #48]	; 0x30
 8002460:	e023      	b.n	80024aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	4613      	mov	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	3b41      	subs	r3, #65	; 0x41
 8002474:	221f      	movs	r2, #31
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43da      	mvns	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	400a      	ands	r2, r1
 8002482:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	b29b      	uxth	r3, r3
 8002490:	4618      	mov	r0, r3
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	4613      	mov	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	3b41      	subs	r3, #65	; 0x41
 800249e:	fa00 f203 	lsl.w	r2, r0, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024aa:	4b29      	ldr	r3, [pc, #164]	; (8002550 <HAL_ADC_ConfigChannel+0x250>)
 80024ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a28      	ldr	r2, [pc, #160]	; (8002554 <HAL_ADC_ConfigChannel+0x254>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d10f      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x1d8>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b12      	cmp	r3, #18
 80024be:	d10b      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a1d      	ldr	r2, [pc, #116]	; (8002554 <HAL_ADC_ConfigChannel+0x254>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d12b      	bne.n	800253a <HAL_ADC_ConfigChannel+0x23a>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a1c      	ldr	r2, [pc, #112]	; (8002558 <HAL_ADC_ConfigChannel+0x258>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d003      	beq.n	80024f4 <HAL_ADC_ConfigChannel+0x1f4>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b11      	cmp	r3, #17
 80024f2:	d122      	bne.n	800253a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a11      	ldr	r2, [pc, #68]	; (8002558 <HAL_ADC_ConfigChannel+0x258>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d111      	bne.n	800253a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002516:	4b11      	ldr	r3, [pc, #68]	; (800255c <HAL_ADC_ConfigChannel+0x25c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a11      	ldr	r2, [pc, #68]	; (8002560 <HAL_ADC_ConfigChannel+0x260>)
 800251c:	fba2 2303 	umull	r2, r3, r2, r3
 8002520:	0c9a      	lsrs	r2, r3, #18
 8002522:	4613      	mov	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800252c:	e002      	b.n	8002534 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	3b01      	subs	r3, #1
 8002532:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f9      	bne.n	800252e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	40012300 	.word	0x40012300
 8002554:	40012000 	.word	0x40012000
 8002558:	10000012 	.word	0x10000012
 800255c:	200000f8 	.word	0x200000f8
 8002560:	431bde83 	.word	0x431bde83

08002564 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800256c:	4b79      	ldr	r3, [pc, #484]	; (8002754 <ADC_Init+0x1f0>)
 800256e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	431a      	orrs	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002598:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6859      	ldr	r1, [r3, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	021a      	lsls	r2, r3, #8
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80025bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6859      	ldr	r1, [r3, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6899      	ldr	r1, [r3, #8]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f6:	4a58      	ldr	r2, [pc, #352]	; (8002758 <ADC_Init+0x1f4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d022      	beq.n	8002642 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800260a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6899      	ldr	r1, [r3, #8]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800262c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6899      	ldr	r1, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	e00f      	b.n	8002662 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002650:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002660:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0202 	bic.w	r2, r2, #2
 8002670:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6899      	ldr	r1, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	7e1b      	ldrb	r3, [r3, #24]
 800267c:	005a      	lsls	r2, r3, #1
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 3020 	ldrb.w	r3, [r3, #32]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d01b      	beq.n	80026c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800269e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80026ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6859      	ldr	r1, [r3, #4]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	3b01      	subs	r3, #1
 80026bc:	035a      	lsls	r2, r3, #13
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	e007      	b.n	80026d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80026e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	051a      	lsls	r2, r3, #20
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800270c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6899      	ldr	r1, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800271a:	025a      	lsls	r2, r3, #9
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002732:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6899      	ldr	r1, [r3, #8]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	029a      	lsls	r2, r3, #10
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	609a      	str	r2, [r3, #8]
}
 8002748:	bf00      	nop
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	40012300 	.word	0x40012300
 8002758:	0f000001 	.word	0x0f000001

0800275c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800276c:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <__NVIC_SetPriorityGrouping+0x44>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002778:	4013      	ands	r3, r2
 800277a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002784:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800278c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800278e:	4a04      	ldr	r2, [pc, #16]	; (80027a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	60d3      	str	r3, [r2, #12]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027a8:	4b04      	ldr	r3, [pc, #16]	; (80027bc <__NVIC_GetPriorityGrouping+0x18>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	0a1b      	lsrs	r3, r3, #8
 80027ae:	f003 0307 	and.w	r3, r3, #7
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	e000ed00 	.word	0xe000ed00

080027c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	db0b      	blt.n	80027ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	f003 021f 	and.w	r2, r3, #31
 80027d8:	4907      	ldr	r1, [pc, #28]	; (80027f8 <__NVIC_EnableIRQ+0x38>)
 80027da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	2001      	movs	r0, #1
 80027e2:	fa00 f202 	lsl.w	r2, r0, r2
 80027e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	e000e100 	.word	0xe000e100

080027fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	6039      	str	r1, [r7, #0]
 8002806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280c:	2b00      	cmp	r3, #0
 800280e:	db0a      	blt.n	8002826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	b2da      	uxtb	r2, r3
 8002814:	490c      	ldr	r1, [pc, #48]	; (8002848 <__NVIC_SetPriority+0x4c>)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	0112      	lsls	r2, r2, #4
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	440b      	add	r3, r1
 8002820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002824:	e00a      	b.n	800283c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	b2da      	uxtb	r2, r3
 800282a:	4908      	ldr	r1, [pc, #32]	; (800284c <__NVIC_SetPriority+0x50>)
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	3b04      	subs	r3, #4
 8002834:	0112      	lsls	r2, r2, #4
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	440b      	add	r3, r1
 800283a:	761a      	strb	r2, [r3, #24]
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	e000e100 	.word	0xe000e100
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002850:	b480      	push	{r7}
 8002852:	b089      	sub	sp, #36	; 0x24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f1c3 0307 	rsb	r3, r3, #7
 800286a:	2b04      	cmp	r3, #4
 800286c:	bf28      	it	cs
 800286e:	2304      	movcs	r3, #4
 8002870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	3304      	adds	r3, #4
 8002876:	2b06      	cmp	r3, #6
 8002878:	d902      	bls.n	8002880 <NVIC_EncodePriority+0x30>
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3b03      	subs	r3, #3
 800287e:	e000      	b.n	8002882 <NVIC_EncodePriority+0x32>
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002884:	f04f 32ff 	mov.w	r2, #4294967295
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43da      	mvns	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	401a      	ands	r2, r3
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002898:	f04f 31ff 	mov.w	r1, #4294967295
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	fa01 f303 	lsl.w	r3, r1, r3
 80028a2:	43d9      	mvns	r1, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a8:	4313      	orrs	r3, r2
         );
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3724      	adds	r7, #36	; 0x24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
	...

080028b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028c8:	d301      	bcc.n	80028ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ca:	2301      	movs	r3, #1
 80028cc:	e00f      	b.n	80028ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ce:	4a0a      	ldr	r2, [pc, #40]	; (80028f8 <SysTick_Config+0x40>)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028d6:	210f      	movs	r1, #15
 80028d8:	f04f 30ff 	mov.w	r0, #4294967295
 80028dc:	f7ff ff8e 	bl	80027fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <SysTick_Config+0x40>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028e6:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <SysTick_Config+0x40>)
 80028e8:	2207      	movs	r2, #7
 80028ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	e000e010 	.word	0xe000e010

080028fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ff29 	bl	800275c <__NVIC_SetPriorityGrouping>
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002912:	b580      	push	{r7, lr}
 8002914:	b086      	sub	sp, #24
 8002916:	af00      	add	r7, sp, #0
 8002918:	4603      	mov	r3, r0
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	607a      	str	r2, [r7, #4]
 800291e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002924:	f7ff ff3e 	bl	80027a4 <__NVIC_GetPriorityGrouping>
 8002928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	6978      	ldr	r0, [r7, #20]
 8002930:	f7ff ff8e 	bl	8002850 <NVIC_EncodePriority>
 8002934:	4602      	mov	r2, r0
 8002936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff5d 	bl	80027fc <__NVIC_SetPriority>
}
 8002942:	bf00      	nop
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	4603      	mov	r3, r0
 8002952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ff31 	bl	80027c0 <__NVIC_EnableIRQ>
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7ff ffa2 	bl	80028b8 <SysTick_Config>
 8002974:	4603      	mov	r3, r0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800298c:	f7ff fae8 	bl	8001f60 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e099      	b.n	8002ad0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2202      	movs	r2, #2
 80029a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0201 	bic.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029bc:	e00f      	b.n	80029de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029be:	f7ff facf 	bl	8001f60 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b05      	cmp	r3, #5
 80029ca:	d908      	bls.n	80029de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2220      	movs	r2, #32
 80029d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2203      	movs	r2, #3
 80029d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e078      	b.n	8002ad0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1e8      	bne.n	80029be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	4b38      	ldr	r3, [pc, #224]	; (8002ad8 <HAL_DMA_Init+0x158>)
 80029f8:	4013      	ands	r3, r2
 80029fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	2b04      	cmp	r3, #4
 8002a36:	d107      	bne.n	8002a48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a40:	4313      	orrs	r3, r2
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f023 0307 	bic.w	r3, r3, #7
 8002a5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d117      	bne.n	8002aa2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00e      	beq.n	8002aa2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 fb0f 	bl	80030a8 <DMA_CheckFifoParam>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2240      	movs	r2, #64	; 0x40
 8002a94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e016      	b.n	8002ad0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 fac6 	bl	800303c <DMA_CalcBaseAndBitshift>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab8:	223f      	movs	r2, #63	; 0x3f
 8002aba:	409a      	lsls	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	f010803f 	.word	0xf010803f

08002adc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d101      	bne.n	8002b02 <HAL_DMA_Start_IT+0x26>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e040      	b.n	8002b84 <HAL_DMA_Start_IT+0xa8>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d12f      	bne.n	8002b76 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2202      	movs	r2, #2
 8002b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	68b9      	ldr	r1, [r7, #8]
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 fa58 	bl	8002fe0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b34:	223f      	movs	r2, #63	; 0x3f
 8002b36:	409a      	lsls	r2, r3
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0216 	orr.w	r2, r2, #22
 8002b4a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d007      	beq.n	8002b64 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 0208 	orr.w	r2, r2, #8
 8002b62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0201 	orr.w	r2, r2, #1
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	e005      	b.n	8002b82 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b98:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b9a:	f7ff f9e1 	bl	8001f60 <HAL_GetTick>
 8002b9e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d008      	beq.n	8002bbe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2280      	movs	r2, #128	; 0x80
 8002bb0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e052      	b.n	8002c64 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 0216 	bic.w	r2, r2, #22
 8002bcc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	695a      	ldr	r2, [r3, #20]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bdc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d103      	bne.n	8002bee <HAL_DMA_Abort+0x62>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d007      	beq.n	8002bfe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0208 	bic.w	r2, r2, #8
 8002bfc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0201 	bic.w	r2, r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c0e:	e013      	b.n	8002c38 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c10:	f7ff f9a6 	bl	8001f60 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b05      	cmp	r3, #5
 8002c1c:	d90c      	bls.n	8002c38 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2220      	movs	r2, #32
 8002c22:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2203      	movs	r2, #3
 8002c28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e015      	b.n	8002c64 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1e4      	bne.n	8002c10 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4a:	223f      	movs	r2, #63	; 0x3f
 8002c4c:	409a      	lsls	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d004      	beq.n	8002c8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2280      	movs	r2, #128	; 0x80
 8002c84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e00c      	b.n	8002ca4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2205      	movs	r2, #5
 8002c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0201 	bic.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cbc:	4b92      	ldr	r3, [pc, #584]	; (8002f08 <HAL_DMA_IRQHandler+0x258>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a92      	ldr	r2, [pc, #584]	; (8002f0c <HAL_DMA_IRQHandler+0x25c>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	0a9b      	lsrs	r3, r3, #10
 8002cc8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cda:	2208      	movs	r2, #8
 8002cdc:	409a      	lsls	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d01a      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d013      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0204 	bic.w	r2, r2, #4
 8002d02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d08:	2208      	movs	r2, #8
 8002d0a:	409a      	lsls	r2, r3
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d14:	f043 0201 	orr.w	r2, r3, #1
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d20:	2201      	movs	r2, #1
 8002d22:	409a      	lsls	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4013      	ands	r3, r2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d012      	beq.n	8002d52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00b      	beq.n	8002d52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3e:	2201      	movs	r2, #1
 8002d40:	409a      	lsls	r2, r3
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4a:	f043 0202 	orr.w	r2, r3, #2
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d56:	2204      	movs	r2, #4
 8002d58:	409a      	lsls	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d012      	beq.n	8002d88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00b      	beq.n	8002d88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d74:	2204      	movs	r2, #4
 8002d76:	409a      	lsls	r2, r3
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d80:	f043 0204 	orr.w	r2, r3, #4
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8c:	2210      	movs	r2, #16
 8002d8e:	409a      	lsls	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4013      	ands	r3, r2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d043      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d03c      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002daa:	2210      	movs	r2, #16
 8002dac:	409a      	lsls	r2, r3
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d018      	beq.n	8002df2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d108      	bne.n	8002de0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d024      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	4798      	blx	r3
 8002dde:	e01f      	b.n	8002e20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d01b      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	4798      	blx	r3
 8002df0:	e016      	b.n	8002e20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d107      	bne.n	8002e10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0208 	bic.w	r2, r2, #8
 8002e0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e24:	2220      	movs	r2, #32
 8002e26:	409a      	lsls	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 808e 	beq.w	8002f4e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0310 	and.w	r3, r3, #16
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 8086 	beq.w	8002f4e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e46:	2220      	movs	r2, #32
 8002e48:	409a      	lsls	r2, r3
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b05      	cmp	r3, #5
 8002e58:	d136      	bne.n	8002ec8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0216 	bic.w	r2, r2, #22
 8002e68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	695a      	ldr	r2, [r3, #20]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d103      	bne.n	8002e8a <HAL_DMA_IRQHandler+0x1da>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d007      	beq.n	8002e9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0208 	bic.w	r2, r2, #8
 8002e98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9e:	223f      	movs	r2, #63	; 0x3f
 8002ea0:	409a      	lsls	r2, r3
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d07d      	beq.n	8002fba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	4798      	blx	r3
        }
        return;
 8002ec6:	e078      	b.n	8002fba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d01c      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d108      	bne.n	8002ef6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d030      	beq.n	8002f4e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	4798      	blx	r3
 8002ef4:	e02b      	b.n	8002f4e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d027      	beq.n	8002f4e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	4798      	blx	r3
 8002f06:	e022      	b.n	8002f4e <HAL_DMA_IRQHandler+0x29e>
 8002f08:	200000f8 	.word	0x200000f8
 8002f0c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10f      	bne.n	8002f3e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0210 	bic.w	r2, r2, #16
 8002f2c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d032      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d022      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2205      	movs	r2, #5
 8002f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0201 	bic.w	r2, r2, #1
 8002f78:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	60bb      	str	r3, [r7, #8]
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d307      	bcc.n	8002f96 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1f2      	bne.n	8002f7a <HAL_DMA_IRQHandler+0x2ca>
 8002f94:	e000      	b.n	8002f98 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002f96:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d005      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	4798      	blx	r3
 8002fb8:	e000      	b.n	8002fbc <HAL_DMA_IRQHandler+0x30c>
        return;
 8002fba:	bf00      	nop
    }
  }
}
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop

08002fc4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fd2:	b2db      	uxtb	r3, r3
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
 8002fec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ffc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	2b40      	cmp	r3, #64	; 0x40
 800300c:	d108      	bne.n	8003020 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800301e:	e007      	b.n	8003030 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	60da      	str	r2, [r3, #12]
}
 8003030:	bf00      	nop
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	b2db      	uxtb	r3, r3
 800304a:	3b10      	subs	r3, #16
 800304c:	4a14      	ldr	r2, [pc, #80]	; (80030a0 <DMA_CalcBaseAndBitshift+0x64>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	091b      	lsrs	r3, r3, #4
 8003054:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003056:	4a13      	ldr	r2, [pc, #76]	; (80030a4 <DMA_CalcBaseAndBitshift+0x68>)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4413      	add	r3, r2
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	461a      	mov	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2b03      	cmp	r3, #3
 8003068:	d909      	bls.n	800307e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003072:	f023 0303 	bic.w	r3, r3, #3
 8003076:	1d1a      	adds	r2, r3, #4
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	659a      	str	r2, [r3, #88]	; 0x58
 800307c:	e007      	b.n	800308e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003086:	f023 0303 	bic.w	r3, r3, #3
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003092:	4618      	mov	r0, r3
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	aaaaaaab 	.word	0xaaaaaaab
 80030a4:	080089b8 	.word	0x080089b8

080030a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d11f      	bne.n	8003102 <DMA_CheckFifoParam+0x5a>
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d856      	bhi.n	8003176 <DMA_CheckFifoParam+0xce>
 80030c8:	a201      	add	r2, pc, #4	; (adr r2, 80030d0 <DMA_CheckFifoParam+0x28>)
 80030ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ce:	bf00      	nop
 80030d0:	080030e1 	.word	0x080030e1
 80030d4:	080030f3 	.word	0x080030f3
 80030d8:	080030e1 	.word	0x080030e1
 80030dc:	08003177 	.word	0x08003177
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d046      	beq.n	800317a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030f0:	e043      	b.n	800317a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030fa:	d140      	bne.n	800317e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003100:	e03d      	b.n	800317e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800310a:	d121      	bne.n	8003150 <DMA_CheckFifoParam+0xa8>
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2b03      	cmp	r3, #3
 8003110:	d837      	bhi.n	8003182 <DMA_CheckFifoParam+0xda>
 8003112:	a201      	add	r2, pc, #4	; (adr r2, 8003118 <DMA_CheckFifoParam+0x70>)
 8003114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003118:	08003129 	.word	0x08003129
 800311c:	0800312f 	.word	0x0800312f
 8003120:	08003129 	.word	0x08003129
 8003124:	08003141 	.word	0x08003141
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	73fb      	strb	r3, [r7, #15]
      break;
 800312c:	e030      	b.n	8003190 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003132:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d025      	beq.n	8003186 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800313e:	e022      	b.n	8003186 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003144:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003148:	d11f      	bne.n	800318a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800314e:	e01c      	b.n	800318a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d903      	bls.n	800315e <DMA_CheckFifoParam+0xb6>
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2b03      	cmp	r3, #3
 800315a:	d003      	beq.n	8003164 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800315c:	e018      	b.n	8003190 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	73fb      	strb	r3, [r7, #15]
      break;
 8003162:	e015      	b.n	8003190 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003168:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00e      	beq.n	800318e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	73fb      	strb	r3, [r7, #15]
      break;
 8003174:	e00b      	b.n	800318e <DMA_CheckFifoParam+0xe6>
      break;
 8003176:	bf00      	nop
 8003178:	e00a      	b.n	8003190 <DMA_CheckFifoParam+0xe8>
      break;
 800317a:	bf00      	nop
 800317c:	e008      	b.n	8003190 <DMA_CheckFifoParam+0xe8>
      break;
 800317e:	bf00      	nop
 8003180:	e006      	b.n	8003190 <DMA_CheckFifoParam+0xe8>
      break;
 8003182:	bf00      	nop
 8003184:	e004      	b.n	8003190 <DMA_CheckFifoParam+0xe8>
      break;
 8003186:	bf00      	nop
 8003188:	e002      	b.n	8003190 <DMA_CheckFifoParam+0xe8>
      break;   
 800318a:	bf00      	nop
 800318c:	e000      	b.n	8003190 <DMA_CheckFifoParam+0xe8>
      break;
 800318e:	bf00      	nop
    }
  } 
  
  return status; 
 8003190:	7bfb      	ldrb	r3, [r7, #15]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop

080031a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b089      	sub	sp, #36	; 0x24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031b6:	2300      	movs	r3, #0
 80031b8:	61fb      	str	r3, [r7, #28]
 80031ba:	e159      	b.n	8003470 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031bc:	2201      	movs	r2, #1
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4013      	ands	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	f040 8148 	bne.w	800346a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d005      	beq.n	80031f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d130      	bne.n	8003254 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	2203      	movs	r2, #3
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43db      	mvns	r3, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4013      	ands	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4313      	orrs	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003228:	2201      	movs	r2, #1
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	091b      	lsrs	r3, r3, #4
 800323e:	f003 0201 	and.w	r2, r3, #1
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4313      	orrs	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	2b03      	cmp	r3, #3
 800325e:	d017      	beq.n	8003290 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	2203      	movs	r2, #3
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d123      	bne.n	80032e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	08da      	lsrs	r2, r3, #3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3208      	adds	r2, #8
 80032a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	220f      	movs	r2, #15
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	43db      	mvns	r3, r3
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	4013      	ands	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	08da      	lsrs	r2, r3, #3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	3208      	adds	r2, #8
 80032de:	69b9      	ldr	r1, [r7, #24]
 80032e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	2203      	movs	r2, #3
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 0203 	and.w	r2, r3, #3
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	4313      	orrs	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 80a2 	beq.w	800346a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	4b57      	ldr	r3, [pc, #348]	; (8003488 <HAL_GPIO_Init+0x2e8>)
 800332c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332e:	4a56      	ldr	r2, [pc, #344]	; (8003488 <HAL_GPIO_Init+0x2e8>)
 8003330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003334:	6453      	str	r3, [r2, #68]	; 0x44
 8003336:	4b54      	ldr	r3, [pc, #336]	; (8003488 <HAL_GPIO_Init+0x2e8>)
 8003338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003342:	4a52      	ldr	r2, [pc, #328]	; (800348c <HAL_GPIO_Init+0x2ec>)
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	089b      	lsrs	r3, r3, #2
 8003348:	3302      	adds	r3, #2
 800334a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800334e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	220f      	movs	r2, #15
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43db      	mvns	r3, r3
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	4013      	ands	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a49      	ldr	r2, [pc, #292]	; (8003490 <HAL_GPIO_Init+0x2f0>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d019      	beq.n	80033a2 <HAL_GPIO_Init+0x202>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a48      	ldr	r2, [pc, #288]	; (8003494 <HAL_GPIO_Init+0x2f4>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d013      	beq.n	800339e <HAL_GPIO_Init+0x1fe>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a47      	ldr	r2, [pc, #284]	; (8003498 <HAL_GPIO_Init+0x2f8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d00d      	beq.n	800339a <HAL_GPIO_Init+0x1fa>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a46      	ldr	r2, [pc, #280]	; (800349c <HAL_GPIO_Init+0x2fc>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d007      	beq.n	8003396 <HAL_GPIO_Init+0x1f6>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a45      	ldr	r2, [pc, #276]	; (80034a0 <HAL_GPIO_Init+0x300>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d101      	bne.n	8003392 <HAL_GPIO_Init+0x1f2>
 800338e:	2304      	movs	r3, #4
 8003390:	e008      	b.n	80033a4 <HAL_GPIO_Init+0x204>
 8003392:	2307      	movs	r3, #7
 8003394:	e006      	b.n	80033a4 <HAL_GPIO_Init+0x204>
 8003396:	2303      	movs	r3, #3
 8003398:	e004      	b.n	80033a4 <HAL_GPIO_Init+0x204>
 800339a:	2302      	movs	r3, #2
 800339c:	e002      	b.n	80033a4 <HAL_GPIO_Init+0x204>
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <HAL_GPIO_Init+0x204>
 80033a2:	2300      	movs	r3, #0
 80033a4:	69fa      	ldr	r2, [r7, #28]
 80033a6:	f002 0203 	and.w	r2, r2, #3
 80033aa:	0092      	lsls	r2, r2, #2
 80033ac:	4093      	lsls	r3, r2
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033b4:	4935      	ldr	r1, [pc, #212]	; (800348c <HAL_GPIO_Init+0x2ec>)
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	089b      	lsrs	r3, r3, #2
 80033ba:	3302      	adds	r3, #2
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033c2:	4b38      	ldr	r3, [pc, #224]	; (80034a4 <HAL_GPIO_Init+0x304>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	43db      	mvns	r3, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4013      	ands	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033e6:	4a2f      	ldr	r2, [pc, #188]	; (80034a4 <HAL_GPIO_Init+0x304>)
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80033ec:	4b2d      	ldr	r3, [pc, #180]	; (80034a4 <HAL_GPIO_Init+0x304>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	43db      	mvns	r3, r3
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4013      	ands	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003410:	4a24      	ldr	r2, [pc, #144]	; (80034a4 <HAL_GPIO_Init+0x304>)
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003416:	4b23      	ldr	r3, [pc, #140]	; (80034a4 <HAL_GPIO_Init+0x304>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	43db      	mvns	r3, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4013      	ands	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4313      	orrs	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800343a:	4a1a      	ldr	r2, [pc, #104]	; (80034a4 <HAL_GPIO_Init+0x304>)
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003440:	4b18      	ldr	r3, [pc, #96]	; (80034a4 <HAL_GPIO_Init+0x304>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	43db      	mvns	r3, r3
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4013      	ands	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	4313      	orrs	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003464:	4a0f      	ldr	r2, [pc, #60]	; (80034a4 <HAL_GPIO_Init+0x304>)
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	3301      	adds	r3, #1
 800346e:	61fb      	str	r3, [r7, #28]
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	2b0f      	cmp	r3, #15
 8003474:	f67f aea2 	bls.w	80031bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003478:	bf00      	nop
 800347a:	bf00      	nop
 800347c:	3724      	adds	r7, #36	; 0x24
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40023800 	.word	0x40023800
 800348c:	40013800 	.word	0x40013800
 8003490:	40020000 	.word	0x40020000
 8003494:	40020400 	.word	0x40020400
 8003498:	40020800 	.word	0x40020800
 800349c:	40020c00 	.word	0x40020c00
 80034a0:	40021000 	.word	0x40021000
 80034a4:	40013c00 	.word	0x40013c00

080034a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	807b      	strh	r3, [r7, #2]
 80034b4:	4613      	mov	r3, r2
 80034b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034b8:	787b      	ldrb	r3, [r7, #1]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034be:	887a      	ldrh	r2, [r7, #2]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034c4:	e003      	b.n	80034ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034c6:	887b      	ldrh	r3, [r7, #2]
 80034c8:	041a      	lsls	r2, r3, #16
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	619a      	str	r2, [r3, #24]
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
	...

080034dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e12b      	b.n	8003746 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d106      	bne.n	8003508 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7fe fa5e 	bl	80019c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2224      	movs	r2, #36	; 0x24
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0201 	bic.w	r2, r2, #1
 800351e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800352e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800353e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003540:	f002 fb9e 	bl	8005c80 <HAL_RCC_GetPCLK1Freq>
 8003544:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	4a81      	ldr	r2, [pc, #516]	; (8003750 <HAL_I2C_Init+0x274>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d807      	bhi.n	8003560 <HAL_I2C_Init+0x84>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4a80      	ldr	r2, [pc, #512]	; (8003754 <HAL_I2C_Init+0x278>)
 8003554:	4293      	cmp	r3, r2
 8003556:	bf94      	ite	ls
 8003558:	2301      	movls	r3, #1
 800355a:	2300      	movhi	r3, #0
 800355c:	b2db      	uxtb	r3, r3
 800355e:	e006      	b.n	800356e <HAL_I2C_Init+0x92>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4a7d      	ldr	r2, [pc, #500]	; (8003758 <HAL_I2C_Init+0x27c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	bf94      	ite	ls
 8003568:	2301      	movls	r3, #1
 800356a:	2300      	movhi	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e0e7      	b.n	8003746 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	4a78      	ldr	r2, [pc, #480]	; (800375c <HAL_I2C_Init+0x280>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	0c9b      	lsrs	r3, r3, #18
 8003580:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	430a      	orrs	r2, r1
 8003594:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	4a6a      	ldr	r2, [pc, #424]	; (8003750 <HAL_I2C_Init+0x274>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d802      	bhi.n	80035b0 <HAL_I2C_Init+0xd4>
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	3301      	adds	r3, #1
 80035ae:	e009      	b.n	80035c4 <HAL_I2C_Init+0xe8>
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035b6:	fb02 f303 	mul.w	r3, r2, r3
 80035ba:	4a69      	ldr	r2, [pc, #420]	; (8003760 <HAL_I2C_Init+0x284>)
 80035bc:	fba2 2303 	umull	r2, r3, r2, r3
 80035c0:	099b      	lsrs	r3, r3, #6
 80035c2:	3301      	adds	r3, #1
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6812      	ldr	r2, [r2, #0]
 80035c8:	430b      	orrs	r3, r1
 80035ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80035d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	495c      	ldr	r1, [pc, #368]	; (8003750 <HAL_I2C_Init+0x274>)
 80035e0:	428b      	cmp	r3, r1
 80035e2:	d819      	bhi.n	8003618 <HAL_I2C_Init+0x13c>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	1e59      	subs	r1, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80035f2:	1c59      	adds	r1, r3, #1
 80035f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80035f8:	400b      	ands	r3, r1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <HAL_I2C_Init+0x138>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	1e59      	subs	r1, r3, #1
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	fbb1 f3f3 	udiv	r3, r1, r3
 800360c:	3301      	adds	r3, #1
 800360e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003612:	e051      	b.n	80036b8 <HAL_I2C_Init+0x1dc>
 8003614:	2304      	movs	r3, #4
 8003616:	e04f      	b.n	80036b8 <HAL_I2C_Init+0x1dc>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d111      	bne.n	8003644 <HAL_I2C_Init+0x168>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	1e58      	subs	r0, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6859      	ldr	r1, [r3, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	440b      	add	r3, r1
 800362e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003632:	3301      	adds	r3, #1
 8003634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003638:	2b00      	cmp	r3, #0
 800363a:	bf0c      	ite	eq
 800363c:	2301      	moveq	r3, #1
 800363e:	2300      	movne	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	e012      	b.n	800366a <HAL_I2C_Init+0x18e>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	1e58      	subs	r0, r3, #1
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6859      	ldr	r1, [r3, #4]
 800364c:	460b      	mov	r3, r1
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	0099      	lsls	r1, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	fbb0 f3f3 	udiv	r3, r0, r3
 800365a:	3301      	adds	r3, #1
 800365c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003660:	2b00      	cmp	r3, #0
 8003662:	bf0c      	ite	eq
 8003664:	2301      	moveq	r3, #1
 8003666:	2300      	movne	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <HAL_I2C_Init+0x196>
 800366e:	2301      	movs	r3, #1
 8003670:	e022      	b.n	80036b8 <HAL_I2C_Init+0x1dc>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10e      	bne.n	8003698 <HAL_I2C_Init+0x1bc>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	1e58      	subs	r0, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6859      	ldr	r1, [r3, #4]
 8003682:	460b      	mov	r3, r1
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	440b      	add	r3, r1
 8003688:	fbb0 f3f3 	udiv	r3, r0, r3
 800368c:	3301      	adds	r3, #1
 800368e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003696:	e00f      	b.n	80036b8 <HAL_I2C_Init+0x1dc>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	1e58      	subs	r0, r3, #1
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6859      	ldr	r1, [r3, #4]
 80036a0:	460b      	mov	r3, r1
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	440b      	add	r3, r1
 80036a6:	0099      	lsls	r1, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ae:	3301      	adds	r3, #1
 80036b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	6809      	ldr	r1, [r1, #0]
 80036bc:	4313      	orrs	r3, r2
 80036be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69da      	ldr	r2, [r3, #28]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6911      	ldr	r1, [r2, #16]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	68d2      	ldr	r2, [r2, #12]
 80036f2:	4311      	orrs	r1, r2
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6812      	ldr	r2, [r2, #0]
 80036f8:	430b      	orrs	r3, r1
 80036fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695a      	ldr	r2, [r3, #20]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0201 	orr.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2220      	movs	r2, #32
 8003732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	000186a0 	.word	0x000186a0
 8003754:	001e847f 	.word	0x001e847f
 8003758:	003d08ff 	.word	0x003d08ff
 800375c:	431bde83 	.word	0x431bde83
 8003760:	10624dd3 	.word	0x10624dd3

08003764 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003764:	b480      	push	{r7}
 8003766:	b087      	sub	sp, #28
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	4608      	mov	r0, r1
 800376e:	4611      	mov	r1, r2
 8003770:	461a      	mov	r2, r3
 8003772:	4603      	mov	r3, r0
 8003774:	817b      	strh	r3, [r7, #10]
 8003776:	460b      	mov	r3, r1
 8003778:	813b      	strh	r3, [r7, #8]
 800377a:	4613      	mov	r3, r2
 800377c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b20      	cmp	r3, #32
 800378c:	f040 808e 	bne.w	80038ac <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003790:	4b4a      	ldr	r3, [pc, #296]	; (80038bc <HAL_I2C_Mem_Write_IT+0x158>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	08db      	lsrs	r3, r3, #3
 8003796:	4a4a      	ldr	r2, [pc, #296]	; (80038c0 <HAL_I2C_Mem_Write_IT+0x15c>)
 8003798:	fba2 2303 	umull	r2, r3, r2, r3
 800379c:	0a1a      	lsrs	r2, r3, #8
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	009a      	lsls	r2, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	3b01      	subs	r3, #1
 80037ae:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d116      	bne.n	80037e4 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	f043 0220 	orr.w	r2, r3, #32
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e064      	b.n	80038ae <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d0db      	beq.n	80037aa <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_I2C_Mem_Write_IT+0x9c>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e056      	b.n	80038ae <HAL_I2C_Mem_Write_IT+0x14a>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b01      	cmp	r3, #1
 8003814:	d007      	beq.n	8003826 <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f042 0201 	orr.w	r2, r2, #1
 8003824:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003834:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2221      	movs	r2, #33	; 0x21
 800383a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2240      	movs	r2, #64	; 0x40
 8003842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a3a      	ldr	r2, [r7, #32]
 8003850:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003856:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4a17      	ldr	r2, [pc, #92]	; (80038c4 <HAL_I2C_Mem_Write_IT+0x160>)
 8003866:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003868:	897a      	ldrh	r2, [r7, #10]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800386e:	893a      	ldrh	r2, [r7, #8]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003874:	88fa      	ldrh	r2, [r7, #6]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800388e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80038a6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80038a8:	2300      	movs	r3, #0
 80038aa:	e000      	b.n	80038ae <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80038ac:	2302      	movs	r3, #2
  }
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	371c      	adds	r7, #28
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	200000f8 	.word	0x200000f8
 80038c0:	14f8b589 	.word	0x14f8b589
 80038c4:	ffff0000 	.word	0xffff0000

080038c8 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b087      	sub	sp, #28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	4608      	mov	r0, r1
 80038d2:	4611      	mov	r1, r2
 80038d4:	461a      	mov	r2, r3
 80038d6:	4603      	mov	r3, r0
 80038d8:	817b      	strh	r3, [r7, #10]
 80038da:	460b      	mov	r3, r1
 80038dc:	813b      	strh	r3, [r7, #8]
 80038de:	4613      	mov	r3, r2
 80038e0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b20      	cmp	r3, #32
 80038f0:	f040 809a 	bne.w	8003a28 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80038f4:	4b50      	ldr	r3, [pc, #320]	; (8003a38 <HAL_I2C_Mem_Read_IT+0x170>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	08db      	lsrs	r3, r3, #3
 80038fa:	4a50      	ldr	r2, [pc, #320]	; (8003a3c <HAL_I2C_Mem_Read_IT+0x174>)
 80038fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003900:	0a1a      	lsrs	r2, r3, #8
 8003902:	4613      	mov	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	009a      	lsls	r2, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	3b01      	subs	r3, #1
 8003912:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d116      	bne.n	8003948 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	f043 0220 	orr.w	r2, r3, #32
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e070      	b.n	8003a2a <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b02      	cmp	r3, #2
 8003954:	d0db      	beq.n	800390e <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800395c:	2b01      	cmp	r3, #1
 800395e:	d101      	bne.n	8003964 <HAL_I2C_Mem_Read_IT+0x9c>
 8003960:	2302      	movs	r3, #2
 8003962:	e062      	b.n	8003a2a <HAL_I2C_Mem_Read_IT+0x162>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b01      	cmp	r3, #1
 8003978:	d007      	beq.n	800398a <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f042 0201 	orr.w	r2, r2, #1
 8003988:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003998:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2222      	movs	r2, #34	; 0x22
 800399e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2240      	movs	r2, #64	; 0x40
 80039a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a3a      	ldr	r2, [r7, #32]
 80039b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80039ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	4a1d      	ldr	r2, [pc, #116]	; (8003a40 <HAL_I2C_Mem_Read_IT+0x178>)
 80039ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80039cc:	897a      	ldrh	r2, [r7, #10]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80039d2:	893a      	ldrh	r2, [r7, #8]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80039d8:	88fa      	ldrh	r2, [r7, #6]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039f2:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a02:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d007      	beq.n	8003a24 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003a22:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8003a24:	2300      	movs	r3, #0
 8003a26:	e000      	b.n	8003a2a <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8003a28:	2302      	movs	r3, #2
  }
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	371c      	adds	r7, #28
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	200000f8 	.word	0x200000f8
 8003a3c:	14f8b589 	.word	0x14f8b589
 8003a40:	ffff0000 	.word	0xffff0000

08003a44 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a64:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	2b10      	cmp	r3, #16
 8003a72:	d003      	beq.n	8003a7c <HAL_I2C_EV_IRQHandler+0x38>
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
 8003a76:	2b40      	cmp	r3, #64	; 0x40
 8003a78:	f040 80c1 	bne.w	8003bfe <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10d      	bne.n	8003ab2 <HAL_I2C_EV_IRQHandler+0x6e>
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003a9c:	d003      	beq.n	8003aa6 <HAL_I2C_EV_IRQHandler+0x62>
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003aa4:	d101      	bne.n	8003aaa <HAL_I2C_EV_IRQHandler+0x66>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <HAL_I2C_EV_IRQHandler+0x68>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	f000 8132 	beq.w	8003d16 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00c      	beq.n	8003ad6 <HAL_I2C_EV_IRQHandler+0x92>
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	0a5b      	lsrs	r3, r3, #9
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d006      	beq.n	8003ad6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f001 fc71 	bl	80053b0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fd79 	bl	80045c6 <I2C_Master_SB>
 8003ad4:	e092      	b.n	8003bfc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	08db      	lsrs	r3, r3, #3
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d009      	beq.n	8003af6 <HAL_I2C_EV_IRQHandler+0xb2>
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	0a5b      	lsrs	r3, r3, #9
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 fdef 	bl	80046d2 <I2C_Master_ADD10>
 8003af4:	e082      	b.n	8003bfc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	085b      	lsrs	r3, r3, #1
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d009      	beq.n	8003b16 <HAL_I2C_EV_IRQHandler+0xd2>
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	0a5b      	lsrs	r3, r3, #9
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fe09 	bl	8004726 <I2C_Master_ADDR>
 8003b14:	e072      	b.n	8003bfc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	089b      	lsrs	r3, r3, #2
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d03b      	beq.n	8003b9a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b30:	f000 80f3 	beq.w	8003d1a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	09db      	lsrs	r3, r3, #7
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00f      	beq.n	8003b60 <HAL_I2C_EV_IRQHandler+0x11c>
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	0a9b      	lsrs	r3, r3, #10
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d009      	beq.n	8003b60 <HAL_I2C_EV_IRQHandler+0x11c>
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	089b      	lsrs	r3, r3, #2
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d103      	bne.n	8003b60 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f9f3 	bl	8003f44 <I2C_MasterTransmit_TXE>
 8003b5e:	e04d      	b.n	8003bfc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	089b      	lsrs	r3, r3, #2
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 80d6 	beq.w	8003d1a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	0a5b      	lsrs	r3, r3, #9
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 80cf 	beq.w	8003d1a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003b7c:	7bbb      	ldrb	r3, [r7, #14]
 8003b7e:	2b21      	cmp	r3, #33	; 0x21
 8003b80:	d103      	bne.n	8003b8a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 fa7a 	bl	800407c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b88:	e0c7      	b.n	8003d1a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
 8003b8c:	2b40      	cmp	r3, #64	; 0x40
 8003b8e:	f040 80c4 	bne.w	8003d1a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 fae8 	bl	8004168 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b98:	e0bf      	b.n	8003d1a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ba8:	f000 80b7 	beq.w	8003d1a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	099b      	lsrs	r3, r3, #6
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00f      	beq.n	8003bd8 <HAL_I2C_EV_IRQHandler+0x194>
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	0a9b      	lsrs	r3, r3, #10
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d009      	beq.n	8003bd8 <HAL_I2C_EV_IRQHandler+0x194>
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	089b      	lsrs	r3, r3, #2
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d103      	bne.n	8003bd8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 fb5d 	bl	8004290 <I2C_MasterReceive_RXNE>
 8003bd6:	e011      	b.n	8003bfc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	089b      	lsrs	r3, r3, #2
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 809a 	beq.w	8003d1a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	0a5b      	lsrs	r3, r3, #9
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 8093 	beq.w	8003d1a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 fbfc 	bl	80043f2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bfa:	e08e      	b.n	8003d1a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003bfc:	e08d      	b.n	8003d1a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d004      	beq.n	8003c10 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	61fb      	str	r3, [r7, #28]
 8003c0e:	e007      	b.n	8003c20 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	085b      	lsrs	r3, r3, #1
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d012      	beq.n	8003c52 <HAL_I2C_EV_IRQHandler+0x20e>
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	0a5b      	lsrs	r3, r3, #9
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00c      	beq.n	8003c52 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003c48:	69b9      	ldr	r1, [r7, #24]
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 ffba 	bl	8004bc4 <I2C_Slave_ADDR>
 8003c50:	e066      	b.n	8003d20 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	091b      	lsrs	r3, r3, #4
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d009      	beq.n	8003c72 <HAL_I2C_EV_IRQHandler+0x22e>
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	0a5b      	lsrs	r3, r3, #9
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 fff4 	bl	8004c58 <I2C_Slave_STOPF>
 8003c70:	e056      	b.n	8003d20 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c72:	7bbb      	ldrb	r3, [r7, #14]
 8003c74:	2b21      	cmp	r3, #33	; 0x21
 8003c76:	d002      	beq.n	8003c7e <HAL_I2C_EV_IRQHandler+0x23a>
 8003c78:	7bbb      	ldrb	r3, [r7, #14]
 8003c7a:	2b29      	cmp	r3, #41	; 0x29
 8003c7c:	d125      	bne.n	8003cca <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	09db      	lsrs	r3, r3, #7
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00f      	beq.n	8003caa <HAL_I2C_EV_IRQHandler+0x266>
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	0a9b      	lsrs	r3, r3, #10
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d009      	beq.n	8003caa <HAL_I2C_EV_IRQHandler+0x266>
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	089b      	lsrs	r3, r3, #2
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d103      	bne.n	8003caa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 fed0 	bl	8004a48 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ca8:	e039      	b.n	8003d1e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	089b      	lsrs	r3, r3, #2
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d033      	beq.n	8003d1e <HAL_I2C_EV_IRQHandler+0x2da>
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	0a5b      	lsrs	r3, r3, #9
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d02d      	beq.n	8003d1e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 fefd 	bl	8004ac2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003cc8:	e029      	b.n	8003d1e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	099b      	lsrs	r3, r3, #6
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00f      	beq.n	8003cf6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	0a9b      	lsrs	r3, r3, #10
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d009      	beq.n	8003cf6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	089b      	lsrs	r3, r3, #2
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d103      	bne.n	8003cf6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 ff08 	bl	8004b04 <I2C_SlaveReceive_RXNE>
 8003cf4:	e014      	b.n	8003d20 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	089b      	lsrs	r3, r3, #2
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00e      	beq.n	8003d20 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	0a5b      	lsrs	r3, r3, #9
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d008      	beq.n	8003d20 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 ff36 	bl	8004b80 <I2C_SlaveReceive_BTF>
 8003d14:	e004      	b.n	8003d20 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003d16:	bf00      	nop
 8003d18:	e002      	b.n	8003d20 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d1a:	bf00      	nop
 8003d1c:	e000      	b.n	8003d20 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d1e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003d20:	3720      	adds	r7, #32
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b08a      	sub	sp, #40	; 0x28
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d48:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	0a1b      	lsrs	r3, r3, #8
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00e      	beq.n	8003d74 <HAL_I2C_ER_IRQHandler+0x4e>
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	0a1b      	lsrs	r3, r3, #8
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d008      	beq.n	8003d74 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	f043 0301 	orr.w	r3, r3, #1
 8003d68:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d72:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	0a5b      	lsrs	r3, r3, #9
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00e      	beq.n	8003d9e <HAL_I2C_ER_IRQHandler+0x78>
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	0a1b      	lsrs	r3, r3, #8
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d008      	beq.n	8003d9e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	f043 0302 	orr.w	r3, r3, #2
 8003d92:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003d9c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	0a9b      	lsrs	r3, r3, #10
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d03f      	beq.n	8003e2a <HAL_I2C_ER_IRQHandler+0x104>
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	0a1b      	lsrs	r3, r3, #8
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d039      	beq.n	8003e2a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003db6:	7efb      	ldrb	r3, [r7, #27]
 8003db8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003dd0:	7ebb      	ldrb	r3, [r7, #26]
 8003dd2:	2b20      	cmp	r3, #32
 8003dd4:	d112      	bne.n	8003dfc <HAL_I2C_ER_IRQHandler+0xd6>
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10f      	bne.n	8003dfc <HAL_I2C_ER_IRQHandler+0xd6>
 8003ddc:	7cfb      	ldrb	r3, [r7, #19]
 8003dde:	2b21      	cmp	r3, #33	; 0x21
 8003de0:	d008      	beq.n	8003df4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003de2:	7cfb      	ldrb	r3, [r7, #19]
 8003de4:	2b29      	cmp	r3, #41	; 0x29
 8003de6:	d005      	beq.n	8003df4 <HAL_I2C_ER_IRQHandler+0xce>
 8003de8:	7cfb      	ldrb	r3, [r7, #19]
 8003dea:	2b28      	cmp	r3, #40	; 0x28
 8003dec:	d106      	bne.n	8003dfc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2b21      	cmp	r3, #33	; 0x21
 8003df2:	d103      	bne.n	8003dfc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f001 f85f 	bl	8004eb8 <I2C_Slave_AF>
 8003dfa:	e016      	b.n	8003e2a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e04:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	f043 0304 	orr.w	r3, r3, #4
 8003e0c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003e0e:	7efb      	ldrb	r3, [r7, #27]
 8003e10:	2b10      	cmp	r3, #16
 8003e12:	d002      	beq.n	8003e1a <HAL_I2C_ER_IRQHandler+0xf4>
 8003e14:	7efb      	ldrb	r3, [r7, #27]
 8003e16:	2b40      	cmp	r3, #64	; 0x40
 8003e18:	d107      	bne.n	8003e2a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e28:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	0adb      	lsrs	r3, r3, #11
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00e      	beq.n	8003e54 <HAL_I2C_ER_IRQHandler+0x12e>
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	0a1b      	lsrs	r3, r3, #8
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d008      	beq.n	8003e54 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	f043 0308 	orr.w	r3, r3, #8
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003e52:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d008      	beq.n	8003e6c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	431a      	orrs	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f001 f896 	bl	8004f98 <I2C_ITError>
  }
}
 8003e6c:	bf00      	nop
 8003e6e:	3728      	adds	r7, #40	; 0x28
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	70fb      	strb	r3, [r7, #3]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f52:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f5a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d150      	bne.n	800400c <I2C_MasterTransmit_TXE+0xc8>
 8003f6a:	7bfb      	ldrb	r3, [r7, #15]
 8003f6c:	2b21      	cmp	r3, #33	; 0x21
 8003f6e:	d14d      	bne.n	800400c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b08      	cmp	r3, #8
 8003f74:	d01d      	beq.n	8003fb2 <I2C_MasterTransmit_TXE+0x6e>
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	2b20      	cmp	r3, #32
 8003f7a:	d01a      	beq.n	8003fb2 <I2C_MasterTransmit_TXE+0x6e>
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f82:	d016      	beq.n	8003fb2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f92:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2211      	movs	r2, #17
 8003f98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7ff ff62 	bl	8003e74 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003fb0:	e060      	b.n	8004074 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003fc0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fd0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b40      	cmp	r3, #64	; 0x40
 8003fea:	d107      	bne.n	8003ffc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7ff ff7d 	bl	8003ef4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ffa:	e03b      	b.n	8004074 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7ff ff35 	bl	8003e74 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800400a:	e033      	b.n	8004074 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800400c:	7bfb      	ldrb	r3, [r7, #15]
 800400e:	2b21      	cmp	r3, #33	; 0x21
 8004010:	d005      	beq.n	800401e <I2C_MasterTransmit_TXE+0xda>
 8004012:	7bbb      	ldrb	r3, [r7, #14]
 8004014:	2b40      	cmp	r3, #64	; 0x40
 8004016:	d12d      	bne.n	8004074 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004018:	7bfb      	ldrb	r3, [r7, #15]
 800401a:	2b22      	cmp	r3, #34	; 0x22
 800401c:	d12a      	bne.n	8004074 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d108      	bne.n	800403a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004036:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004038:	e01c      	b.n	8004074 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b40      	cmp	r3, #64	; 0x40
 8004044:	d103      	bne.n	800404e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f88e 	bl	8004168 <I2C_MemoryTransmit_TXE_BTF>
}
 800404c:	e012      	b.n	8004074 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	781a      	ldrb	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405e:	1c5a      	adds	r2, r3, #1
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004068:	b29b      	uxth	r3, r3
 800406a:	3b01      	subs	r3, #1
 800406c:	b29a      	uxth	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004072:	e7ff      	b.n	8004074 <I2C_MasterTransmit_TXE+0x130>
 8004074:	bf00      	nop
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004088:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b21      	cmp	r3, #33	; 0x21
 8004094:	d164      	bne.n	8004160 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409a:	b29b      	uxth	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	d012      	beq.n	80040c6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	781a      	ldrb	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80040c4:	e04c      	b.n	8004160 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d01d      	beq.n	8004108 <I2C_MasterTransmit_BTF+0x8c>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2b20      	cmp	r3, #32
 80040d0:	d01a      	beq.n	8004108 <I2C_MasterTransmit_BTF+0x8c>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040d8:	d016      	beq.n	8004108 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040e8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2211      	movs	r2, #17
 80040ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff feb7 	bl	8003e74 <HAL_I2C_MasterTxCpltCallback>
}
 8004106:	e02b      	b.n	8004160 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004116:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004126:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2220      	movs	r2, #32
 8004132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b40      	cmp	r3, #64	; 0x40
 8004140:	d107      	bne.n	8004152 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7ff fed2 	bl	8003ef4 <HAL_I2C_MemTxCpltCallback>
}
 8004150:	e006      	b.n	8004160 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7ff fe8a 	bl	8003e74 <HAL_I2C_MasterTxCpltCallback>
}
 8004160:	bf00      	nop
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004176:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800417c:	2b00      	cmp	r3, #0
 800417e:	d11d      	bne.n	80041bc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004184:	2b01      	cmp	r3, #1
 8004186:	d10b      	bne.n	80041a0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800418c:	b2da      	uxtb	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004198:	1c9a      	adds	r2, r3, #2
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800419e:	e073      	b.n	8004288 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	121b      	asrs	r3, r3, #8
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80041ba:	e065      	b.n	8004288 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d10b      	bne.n	80041dc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d4:	1c5a      	adds	r2, r3, #1
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80041da:	e055      	b.n	8004288 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d151      	bne.n	8004288 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
 80041e6:	2b22      	cmp	r3, #34	; 0x22
 80041e8:	d10d      	bne.n	8004206 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041f8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004204:	e040      	b.n	8004288 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420a:	b29b      	uxth	r3, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	d015      	beq.n	800423c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004210:	7bfb      	ldrb	r3, [r7, #15]
 8004212:	2b21      	cmp	r3, #33	; 0x21
 8004214:	d112      	bne.n	800423c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	781a      	ldrb	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	1c5a      	adds	r2, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004230:	b29b      	uxth	r3, r3
 8004232:	3b01      	subs	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800423a:	e025      	b.n	8004288 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d120      	bne.n	8004288 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004246:	7bfb      	ldrb	r3, [r7, #15]
 8004248:	2b21      	cmp	r3, #33	; 0x21
 800424a:	d11d      	bne.n	8004288 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800425a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800426a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2220      	movs	r2, #32
 8004276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7ff fe36 	bl	8003ef4 <HAL_I2C_MemTxCpltCallback>
}
 8004288:	bf00      	nop
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b22      	cmp	r3, #34	; 0x22
 80042a2:	f040 80a2 	bne.w	80043ea <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2b03      	cmp	r3, #3
 80042b2:	d921      	bls.n	80042f8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	691a      	ldr	r2, [r3, #16]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	1c5a      	adds	r2, r3, #1
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	3b01      	subs	r3, #1
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042de:	b29b      	uxth	r3, r3
 80042e0:	2b03      	cmp	r3, #3
 80042e2:	f040 8082 	bne.w	80043ea <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80042f6:	e078      	b.n	80043ea <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d074      	beq.n	80043ea <I2C_MasterReceive_RXNE+0x15a>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d002      	beq.n	800430c <I2C_MasterReceive_RXNE+0x7c>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d16e      	bne.n	80043ea <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f001 f81d 	bl	800534c <I2C_WaitOnSTOPRequestThroughIT>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d142      	bne.n	800439e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004326:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004336:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	691a      	ldr	r2, [r3, #16]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004354:	b29b      	uxth	r3, r3
 8004356:	3b01      	subs	r3, #1
 8004358:	b29a      	uxth	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2220      	movs	r2, #32
 8004362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b40      	cmp	r3, #64	; 0x40
 8004370:	d10a      	bne.n	8004388 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f7ff fdc1 	bl	8003f08 <HAL_I2C_MemRxCpltCallback>
}
 8004386:	e030      	b.n	80043ea <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2212      	movs	r2, #18
 8004394:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7ff fd76 	bl	8003e88 <HAL_I2C_MasterRxCpltCallback>
}
 800439c:	e025      	b.n	80043ea <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043ac:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	691a      	ldr	r2, [r3, #16]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	b2d2      	uxtb	r2, r2
 80043ba:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	1c5a      	adds	r2, r3, #1
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	3b01      	subs	r3, #1
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2220      	movs	r2, #32
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7ff fd99 	bl	8003f1c <HAL_I2C_ErrorCallback>
}
 80043ea:	bf00      	nop
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b084      	sub	sp, #16
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fe:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004404:	b29b      	uxth	r3, r3
 8004406:	2b04      	cmp	r3, #4
 8004408:	d11b      	bne.n	8004442 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004418:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	691a      	ldr	r2, [r3, #16]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004436:	b29b      	uxth	r3, r3
 8004438:	3b01      	subs	r3, #1
 800443a:	b29a      	uxth	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004440:	e0bd      	b.n	80045be <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004446:	b29b      	uxth	r3, r3
 8004448:	2b03      	cmp	r3, #3
 800444a:	d129      	bne.n	80044a0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800445a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2b04      	cmp	r3, #4
 8004460:	d00a      	beq.n	8004478 <I2C_MasterReceive_BTF+0x86>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b02      	cmp	r3, #2
 8004466:	d007      	beq.n	8004478 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004476:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691a      	ldr	r2, [r3, #16]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004494:	b29b      	uxth	r3, r3
 8004496:	3b01      	subs	r3, #1
 8004498:	b29a      	uxth	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800449e:	e08e      	b.n	80045be <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d176      	bne.n	8004598 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d002      	beq.n	80044b6 <I2C_MasterReceive_BTF+0xc4>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2b10      	cmp	r3, #16
 80044b4:	d108      	bne.n	80044c8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	e019      	b.n	80044fc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d002      	beq.n	80044d4 <I2C_MasterReceive_BTF+0xe2>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d108      	bne.n	80044e6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	e00a      	b.n	80044fc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2b10      	cmp	r3, #16
 80044ea:	d007      	beq.n	80044fc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044fa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	691a      	ldr	r2, [r3, #16]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450e:	1c5a      	adds	r2, r3, #1
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004518:	b29b      	uxth	r3, r3
 800451a:	3b01      	subs	r3, #1
 800451c:	b29a      	uxth	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	b2d2      	uxtb	r2, r2
 800452e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453e:	b29b      	uxth	r3, r3
 8004540:	3b01      	subs	r3, #1
 8004542:	b29a      	uxth	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004556:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2220      	movs	r2, #32
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b40      	cmp	r3, #64	; 0x40
 800456a:	d10a      	bne.n	8004582 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7ff fcc4 	bl	8003f08 <HAL_I2C_MemRxCpltCallback>
}
 8004580:	e01d      	b.n	80045be <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2212      	movs	r2, #18
 800458e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f7ff fc79 	bl	8003e88 <HAL_I2C_MasterRxCpltCallback>
}
 8004596:	e012      	b.n	80045be <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691a      	ldr	r2, [r3, #16]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80045be:	bf00      	nop
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b40      	cmp	r3, #64	; 0x40
 80045d8:	d117      	bne.n	800460a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d109      	bne.n	80045f6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	461a      	mov	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045f2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80045f4:	e067      	b.n	80046c6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	f043 0301 	orr.w	r3, r3, #1
 8004600:	b2da      	uxtb	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	611a      	str	r2, [r3, #16]
}
 8004608:	e05d      	b.n	80046c6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004612:	d133      	bne.n	800467c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b21      	cmp	r3, #33	; 0x21
 800461e:	d109      	bne.n	8004634 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004624:	b2db      	uxtb	r3, r3
 8004626:	461a      	mov	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004630:	611a      	str	r2, [r3, #16]
 8004632:	e008      	b.n	8004646 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004638:	b2db      	uxtb	r3, r3
 800463a:	f043 0301 	orr.w	r3, r3, #1
 800463e:	b2da      	uxtb	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464a:	2b00      	cmp	r3, #0
 800464c:	d004      	beq.n	8004658 <I2C_Master_SB+0x92>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004654:	2b00      	cmp	r3, #0
 8004656:	d108      	bne.n	800466a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465c:	2b00      	cmp	r3, #0
 800465e:	d032      	beq.n	80046c6 <I2C_Master_SB+0x100>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004666:	2b00      	cmp	r3, #0
 8004668:	d02d      	beq.n	80046c6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004678:	605a      	str	r2, [r3, #4]
}
 800467a:	e024      	b.n	80046c6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10e      	bne.n	80046a2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004688:	b29b      	uxth	r3, r3
 800468a:	11db      	asrs	r3, r3, #7
 800468c:	b2db      	uxtb	r3, r3
 800468e:	f003 0306 	and.w	r3, r3, #6
 8004692:	b2db      	uxtb	r3, r3
 8004694:	f063 030f 	orn	r3, r3, #15
 8004698:	b2da      	uxtb	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	611a      	str	r2, [r3, #16]
}
 80046a0:	e011      	b.n	80046c6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d10d      	bne.n	80046c6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	11db      	asrs	r3, r3, #7
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	f003 0306 	and.w	r3, r3, #6
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	f063 030e 	orn	r3, r3, #14
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	611a      	str	r2, [r3, #16]
}
 80046c6:	bf00      	nop
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b083      	sub	sp, #12
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d004      	beq.n	80046f8 <I2C_Master_ADD10+0x26>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d108      	bne.n	800470a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00c      	beq.n	800471a <I2C_Master_ADD10+0x48>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004706:	2b00      	cmp	r3, #0
 8004708:	d007      	beq.n	800471a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004718:	605a      	str	r2, [r3, #4]
  }
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004726:	b480      	push	{r7}
 8004728:	b091      	sub	sp, #68	; 0x44
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004734:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004742:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b22      	cmp	r3, #34	; 0x22
 800474e:	f040 8169 	bne.w	8004a24 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10f      	bne.n	800477a <I2C_Master_ADDR+0x54>
 800475a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800475e:	2b40      	cmp	r3, #64	; 0x40
 8004760:	d10b      	bne.n	800477a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004762:	2300      	movs	r3, #0
 8004764:	633b      	str	r3, [r7, #48]	; 0x30
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	633b      	str	r3, [r7, #48]	; 0x30
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	633b      	str	r3, [r7, #48]	; 0x30
 8004776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004778:	e160      	b.n	8004a3c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800477e:	2b00      	cmp	r3, #0
 8004780:	d11d      	bne.n	80047be <I2C_Master_ADDR+0x98>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800478a:	d118      	bne.n	80047be <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800478c:	2300      	movs	r3, #0
 800478e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047b0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b6:	1c5a      	adds	r2, r3, #1
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	651a      	str	r2, [r3, #80]	; 0x50
 80047bc:	e13e      	b.n	8004a3c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d113      	bne.n	80047f0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047c8:	2300      	movs	r3, #0
 80047ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	62bb      	str	r3, [r7, #40]	; 0x28
 80047dc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	e115      	b.n	8004a1c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	f040 808a 	bne.w	8004910 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80047fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004802:	d137      	bne.n	8004874 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004812:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800481e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004822:	d113      	bne.n	800484c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004832:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004834:	2300      	movs	r3, #0
 8004836:	627b      	str	r3, [r7, #36]	; 0x24
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	627b      	str	r3, [r7, #36]	; 0x24
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	627b      	str	r3, [r7, #36]	; 0x24
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	e0e7      	b.n	8004a1c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800484c:	2300      	movs	r3, #0
 800484e:	623b      	str	r3, [r7, #32]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	623b      	str	r3, [r7, #32]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	623b      	str	r3, [r7, #32]
 8004860:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	e0d3      	b.n	8004a1c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004876:	2b08      	cmp	r3, #8
 8004878:	d02e      	beq.n	80048d8 <I2C_Master_ADDR+0x1b2>
 800487a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487c:	2b20      	cmp	r3, #32
 800487e:	d02b      	beq.n	80048d8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004882:	2b12      	cmp	r3, #18
 8004884:	d102      	bne.n	800488c <I2C_Master_ADDR+0x166>
 8004886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004888:	2b01      	cmp	r3, #1
 800488a:	d125      	bne.n	80048d8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800488c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488e:	2b04      	cmp	r3, #4
 8004890:	d00e      	beq.n	80048b0 <I2C_Master_ADDR+0x18a>
 8004892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004894:	2b02      	cmp	r3, #2
 8004896:	d00b      	beq.n	80048b0 <I2C_Master_ADDR+0x18a>
 8004898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489a:	2b10      	cmp	r3, #16
 800489c:	d008      	beq.n	80048b0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	e007      	b.n	80048c0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048be:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048c0:	2300      	movs	r3, #0
 80048c2:	61fb      	str	r3, [r7, #28]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	61fb      	str	r3, [r7, #28]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	61fb      	str	r3, [r7, #28]
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	e0a1      	b.n	8004a1c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048e6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048e8:	2300      	movs	r3, #0
 80048ea:	61bb      	str	r3, [r7, #24]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	61bb      	str	r3, [r7, #24]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	61bb      	str	r3, [r7, #24]
 80048fc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	e085      	b.n	8004a1c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004914:	b29b      	uxth	r3, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d14d      	bne.n	80049b6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800491a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491c:	2b04      	cmp	r3, #4
 800491e:	d016      	beq.n	800494e <I2C_Master_ADDR+0x228>
 8004920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004922:	2b02      	cmp	r3, #2
 8004924:	d013      	beq.n	800494e <I2C_Master_ADDR+0x228>
 8004926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004928:	2b10      	cmp	r3, #16
 800492a:	d010      	beq.n	800494e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800493a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800494a:	601a      	str	r2, [r3, #0]
 800494c:	e007      	b.n	800495e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800495c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004968:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800496c:	d117      	bne.n	800499e <I2C_Master_ADDR+0x278>
 800496e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004970:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004974:	d00b      	beq.n	800498e <I2C_Master_ADDR+0x268>
 8004976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004978:	2b01      	cmp	r3, #1
 800497a:	d008      	beq.n	800498e <I2C_Master_ADDR+0x268>
 800497c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497e:	2b08      	cmp	r3, #8
 8004980:	d005      	beq.n	800498e <I2C_Master_ADDR+0x268>
 8004982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004984:	2b10      	cmp	r3, #16
 8004986:	d002      	beq.n	800498e <I2C_Master_ADDR+0x268>
 8004988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498a:	2b20      	cmp	r3, #32
 800498c:	d107      	bne.n	800499e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800499c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800499e:	2300      	movs	r3, #0
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	617b      	str	r3, [r7, #20]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	617b      	str	r3, [r7, #20]
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	e032      	b.n	8004a1c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049c4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049d4:	d117      	bne.n	8004a06 <I2C_Master_ADDR+0x2e0>
 80049d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049dc:	d00b      	beq.n	80049f6 <I2C_Master_ADDR+0x2d0>
 80049de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d008      	beq.n	80049f6 <I2C_Master_ADDR+0x2d0>
 80049e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d005      	beq.n	80049f6 <I2C_Master_ADDR+0x2d0>
 80049ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ec:	2b10      	cmp	r3, #16
 80049ee:	d002      	beq.n	80049f6 <I2C_Master_ADDR+0x2d0>
 80049f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f2:	2b20      	cmp	r3, #32
 80049f4:	d107      	bne.n	8004a06 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a04:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a06:	2300      	movs	r3, #0
 8004a08:	613b      	str	r3, [r7, #16]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	613b      	str	r3, [r7, #16]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	613b      	str	r3, [r7, #16]
 8004a1a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004a22:	e00b      	b.n	8004a3c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a24:	2300      	movs	r3, #0
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	60fb      	str	r3, [r7, #12]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	68fb      	ldr	r3, [r7, #12]
}
 8004a3a:	e7ff      	b.n	8004a3c <I2C_Master_ADDR+0x316>
 8004a3c:	bf00      	nop
 8004a3e:	3744      	adds	r7, #68	; 0x44
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a56:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d02b      	beq.n	8004aba <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	781a      	ldrb	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d114      	bne.n	8004aba <I2C_SlaveTransmit_TXE+0x72>
 8004a90:	7bfb      	ldrb	r3, [r7, #15]
 8004a92:	2b29      	cmp	r3, #41	; 0x29
 8004a94:	d111      	bne.n	8004aba <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aa4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2221      	movs	r2, #33	; 0x21
 8004aaa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2228      	movs	r2, #40	; 0x28
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f7ff f9f1 	bl	8003e9c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004aba:	bf00      	nop
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d011      	beq.n	8004af8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	781a      	ldrb	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	1c5a      	adds	r2, r3, #1
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	3b01      	subs	r3, #1
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b12:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d02c      	beq.n	8004b78 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	691a      	ldr	r2, [r3, #16]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b28:	b2d2      	uxtb	r2, r2
 8004b2a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	1c5a      	adds	r2, r3, #1
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d114      	bne.n	8004b78 <I2C_SlaveReceive_RXNE+0x74>
 8004b4e:	7bfb      	ldrb	r3, [r7, #15]
 8004b50:	2b2a      	cmp	r3, #42	; 0x2a
 8004b52:	d111      	bne.n	8004b78 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b62:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2222      	movs	r2, #34	; 0x22
 8004b68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2228      	movs	r2, #40	; 0x28
 8004b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7ff f99c 	bl	8003eb0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004b78:	bf00      	nop
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d012      	beq.n	8004bb8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	691a      	ldr	r2, [r3, #16]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	b2d2      	uxtb	r2, r2
 8004b9e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bde:	2b28      	cmp	r3, #40	; 0x28
 8004be0:	d127      	bne.n	8004c32 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	089b      	lsrs	r3, r3, #2
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	09db      	lsrs	r3, r3, #7
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d103      	bne.n	8004c16 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	81bb      	strh	r3, [r7, #12]
 8004c14:	e002      	b.n	8004c1c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004c24:	89ba      	ldrh	r2, [r7, #12]
 8004c26:	7bfb      	ldrb	r3, [r7, #15]
 8004c28:	4619      	mov	r1, r3
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f7ff f94a 	bl	8003ec4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004c30:	e00e      	b.n	8004c50 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c32:	2300      	movs	r3, #0
 8004c34:	60bb      	str	r3, [r7, #8]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	60bb      	str	r3, [r7, #8]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	60bb      	str	r3, [r7, #8]
 8004c46:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004c50:	bf00      	nop
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c66:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c76:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60bb      	str	r3, [r7, #8]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	60bb      	str	r3, [r7, #8]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0201 	orr.w	r2, r2, #1
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ca4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cb4:	d172      	bne.n	8004d9c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004cb6:	7bfb      	ldrb	r3, [r7, #15]
 8004cb8:	2b22      	cmp	r3, #34	; 0x22
 8004cba:	d002      	beq.n	8004cc2 <I2C_Slave_STOPF+0x6a>
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
 8004cbe:	2b2a      	cmp	r3, #42	; 0x2a
 8004cc0:	d135      	bne.n	8004d2e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d005      	beq.n	8004ce6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	f043 0204 	orr.w	r2, r3, #4
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cf4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fe f962 	bl	8002fc4 <HAL_DMA_GetState>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d049      	beq.n	8004d9a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0a:	4a69      	ldr	r2, [pc, #420]	; (8004eb0 <I2C_Slave_STOPF+0x258>)
 8004d0c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fd ffaa 	bl	8002c6c <HAL_DMA_Abort_IT>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d03d      	beq.n	8004d9a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d28:	4610      	mov	r0, r2
 8004d2a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d2c:	e035      	b.n	8004d9a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d005      	beq.n	8004d52 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	f043 0204 	orr.w	r2, r3, #4
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d60:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7fe f92c 	bl	8002fc4 <HAL_DMA_GetState>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d014      	beq.n	8004d9c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d76:	4a4e      	ldr	r2, [pc, #312]	; (8004eb0 <I2C_Slave_STOPF+0x258>)
 8004d78:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7fd ff74 	bl	8002c6c <HAL_DMA_Abort_IT>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d008      	beq.n	8004d9c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d94:	4610      	mov	r0, r2
 8004d96:	4798      	blx	r3
 8004d98:	e000      	b.n	8004d9c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d9a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d03e      	beq.n	8004e24 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	f003 0304 	and.w	r3, r3, #4
 8004db0:	2b04      	cmp	r3, #4
 8004db2:	d112      	bne.n	8004dda <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	691a      	ldr	r2, [r3, #16]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de4:	2b40      	cmp	r3, #64	; 0x40
 8004de6:	d112      	bne.n	8004e0e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	691a      	ldr	r2, [r3, #16]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	1c5a      	adds	r2, r3, #1
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d005      	beq.n	8004e24 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1c:	f043 0204 	orr.w	r2, r3, #4
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f8b3 	bl	8004f98 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004e32:	e039      	b.n	8004ea8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004e34:	7bfb      	ldrb	r3, [r7, #15]
 8004e36:	2b2a      	cmp	r3, #42	; 0x2a
 8004e38:	d109      	bne.n	8004e4e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2228      	movs	r2, #40	; 0x28
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f7ff f831 	bl	8003eb0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b28      	cmp	r3, #40	; 0x28
 8004e58:	d111      	bne.n	8004e7e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a15      	ldr	r2, [pc, #84]	; (8004eb4 <I2C_Slave_STOPF+0x25c>)
 8004e5e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7ff f832 	bl	8003ee0 <HAL_I2C_ListenCpltCallback>
}
 8004e7c:	e014      	b.n	8004ea8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e82:	2b22      	cmp	r3, #34	; 0x22
 8004e84:	d002      	beq.n	8004e8c <I2C_Slave_STOPF+0x234>
 8004e86:	7bfb      	ldrb	r3, [r7, #15]
 8004e88:	2b22      	cmp	r3, #34	; 0x22
 8004e8a:	d10d      	bne.n	8004ea8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2220      	movs	r2, #32
 8004e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7ff f804 	bl	8003eb0 <HAL_I2C_SlaveRxCpltCallback>
}
 8004ea8:	bf00      	nop
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	080051fd 	.word	0x080051fd
 8004eb4:	ffff0000 	.word	0xffff0000

08004eb8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ecc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	d002      	beq.n	8004eda <I2C_Slave_AF+0x22>
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2b20      	cmp	r3, #32
 8004ed8:	d129      	bne.n	8004f2e <I2C_Slave_AF+0x76>
 8004eda:	7bfb      	ldrb	r3, [r7, #15]
 8004edc:	2b28      	cmp	r3, #40	; 0x28
 8004ede:	d126      	bne.n	8004f2e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a2c      	ldr	r2, [pc, #176]	; (8004f94 <I2C_Slave_AF+0xdc>)
 8004ee4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ef4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004efe:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f0e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7fe ffda 	bl	8003ee0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004f2c:	e02e      	b.n	8004f8c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
 8004f30:	2b21      	cmp	r3, #33	; 0x21
 8004f32:	d126      	bne.n	8004f82 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a17      	ldr	r2, [pc, #92]	; (8004f94 <I2C_Slave_AF+0xdc>)
 8004f38:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2221      	movs	r2, #33	; 0x21
 8004f3e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2220      	movs	r2, #32
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f5e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f68:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f78:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7fe ff8e 	bl	8003e9c <HAL_I2C_SlaveTxCpltCallback>
}
 8004f80:	e004      	b.n	8004f8c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f8a:	615a      	str	r2, [r3, #20]
}
 8004f8c:	bf00      	nop
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	ffff0000 	.word	0xffff0000

08004f98 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fae:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004fb0:	7bbb      	ldrb	r3, [r7, #14]
 8004fb2:	2b10      	cmp	r3, #16
 8004fb4:	d002      	beq.n	8004fbc <I2C_ITError+0x24>
 8004fb6:	7bbb      	ldrb	r3, [r7, #14]
 8004fb8:	2b40      	cmp	r3, #64	; 0x40
 8004fba:	d10a      	bne.n	8004fd2 <I2C_ITError+0x3a>
 8004fbc:	7bfb      	ldrb	r3, [r7, #15]
 8004fbe:	2b22      	cmp	r3, #34	; 0x22
 8004fc0:	d107      	bne.n	8004fd2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fd0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004fd2:	7bfb      	ldrb	r3, [r7, #15]
 8004fd4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004fd8:	2b28      	cmp	r3, #40	; 0x28
 8004fda:	d107      	bne.n	8004fec <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2228      	movs	r2, #40	; 0x28
 8004fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004fea:	e015      	b.n	8005018 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ff6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ffa:	d00a      	beq.n	8005012 <I2C_ITError+0x7a>
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
 8004ffe:	2b60      	cmp	r3, #96	; 0x60
 8005000:	d007      	beq.n	8005012 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2220      	movs	r2, #32
 8005006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005022:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005026:	d162      	bne.n	80050ee <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005036:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800503c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b01      	cmp	r3, #1
 8005044:	d020      	beq.n	8005088 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800504a:	4a6a      	ldr	r2, [pc, #424]	; (80051f4 <I2C_ITError+0x25c>)
 800504c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005052:	4618      	mov	r0, r3
 8005054:	f7fd fe0a 	bl	8002c6c <HAL_DMA_Abort_IT>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	f000 8089 	beq.w	8005172 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 0201 	bic.w	r2, r2, #1
 800506e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2220      	movs	r2, #32
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800507c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005082:	4610      	mov	r0, r2
 8005084:	4798      	blx	r3
 8005086:	e074      	b.n	8005172 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508c:	4a59      	ldr	r2, [pc, #356]	; (80051f4 <I2C_ITError+0x25c>)
 800508e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005094:	4618      	mov	r0, r3
 8005096:	f7fd fde9 	bl	8002c6c <HAL_DMA_Abort_IT>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d068      	beq.n	8005172 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050aa:	2b40      	cmp	r3, #64	; 0x40
 80050ac:	d10b      	bne.n	80050c6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	691a      	ldr	r2, [r3, #16]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	b2d2      	uxtb	r2, r2
 80050ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	1c5a      	adds	r2, r3, #1
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0201 	bic.w	r2, r2, #1
 80050d4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2220      	movs	r2, #32
 80050da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050e8:	4610      	mov	r0, r2
 80050ea:	4798      	blx	r3
 80050ec:	e041      	b.n	8005172 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b60      	cmp	r3, #96	; 0x60
 80050f8:	d125      	bne.n	8005146 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2220      	movs	r2, #32
 80050fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005112:	2b40      	cmp	r3, #64	; 0x40
 8005114:	d10b      	bne.n	800512e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	691a      	ldr	r2, [r3, #16]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005120:	b2d2      	uxtb	r2, r2
 8005122:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005128:	1c5a      	adds	r2, r3, #1
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 0201 	bic.w	r2, r2, #1
 800513c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fe fef6 	bl	8003f30 <HAL_I2C_AbortCpltCallback>
 8005144:	e015      	b.n	8005172 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005150:	2b40      	cmp	r3, #64	; 0x40
 8005152:	d10b      	bne.n	800516c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	691a      	ldr	r2, [r3, #16]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	b2d2      	uxtb	r2, r2
 8005160:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	1c5a      	adds	r2, r3, #1
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f7fe fed5 	bl	8003f1c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10e      	bne.n	80051a0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005188:	2b00      	cmp	r3, #0
 800518a:	d109      	bne.n	80051a0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005192:	2b00      	cmp	r3, #0
 8005194:	d104      	bne.n	80051a0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800519c:	2b00      	cmp	r3, #0
 800519e:	d007      	beq.n	80051b0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051ae:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051bc:	f003 0304 	and.w	r3, r3, #4
 80051c0:	2b04      	cmp	r3, #4
 80051c2:	d113      	bne.n	80051ec <I2C_ITError+0x254>
 80051c4:	7bfb      	ldrb	r3, [r7, #15]
 80051c6:	2b28      	cmp	r3, #40	; 0x28
 80051c8:	d110      	bne.n	80051ec <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a0a      	ldr	r2, [pc, #40]	; (80051f8 <I2C_ITError+0x260>)
 80051ce:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2220      	movs	r2, #32
 80051da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7fe fe7a 	bl	8003ee0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80051ec:	bf00      	nop
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	080051fd 	.word	0x080051fd
 80051f8:	ffff0000 	.word	0xffff0000

080051fc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005204:	2300      	movs	r3, #0
 8005206:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005214:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005216:	4b4b      	ldr	r3, [pc, #300]	; (8005344 <I2C_DMAAbort+0x148>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	08db      	lsrs	r3, r3, #3
 800521c:	4a4a      	ldr	r2, [pc, #296]	; (8005348 <I2C_DMAAbort+0x14c>)
 800521e:	fba2 2303 	umull	r2, r3, r2, r3
 8005222:	0a1a      	lsrs	r2, r3, #8
 8005224:	4613      	mov	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4413      	add	r3, r2
 800522a:	00da      	lsls	r2, r3, #3
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d106      	bne.n	8005244 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	f043 0220 	orr.w	r2, r3, #32
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005242:	e00a      	b.n	800525a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	3b01      	subs	r3, #1
 8005248:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005258:	d0ea      	beq.n	8005230 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005266:	2200      	movs	r2, #0
 8005268:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005276:	2200      	movs	r2, #0
 8005278:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005288:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2200      	movs	r2, #0
 800528e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005294:	2b00      	cmp	r3, #0
 8005296:	d003      	beq.n	80052a0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800529c:	2200      	movs	r2, #0
 800529e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d003      	beq.n	80052b0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ac:	2200      	movs	r2, #0
 80052ae:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f022 0201 	bic.w	r2, r2, #1
 80052be:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b60      	cmp	r3, #96	; 0x60
 80052ca:	d10e      	bne.n	80052ea <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	2220      	movs	r2, #32
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	2200      	movs	r2, #0
 80052e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80052e2:	6978      	ldr	r0, [r7, #20]
 80052e4:	f7fe fe24 	bl	8003f30 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80052e8:	e027      	b.n	800533a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80052ea:	7cfb      	ldrb	r3, [r7, #19]
 80052ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80052f0:	2b28      	cmp	r3, #40	; 0x28
 80052f2:	d117      	bne.n	8005324 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f042 0201 	orr.w	r2, r2, #1
 8005302:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005312:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	2200      	movs	r2, #0
 8005318:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2228      	movs	r2, #40	; 0x28
 800531e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005322:	e007      	b.n	8005334 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	2220      	movs	r2, #32
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005334:	6978      	ldr	r0, [r7, #20]
 8005336:	f7fe fdf1 	bl	8003f1c <HAL_I2C_ErrorCallback>
}
 800533a:	bf00      	nop
 800533c:	3718      	adds	r7, #24
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	200000f8 	.word	0x200000f8
 8005348:	14f8b589 	.word	0x14f8b589

0800534c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005358:	4b13      	ldr	r3, [pc, #76]	; (80053a8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	08db      	lsrs	r3, r3, #3
 800535e:	4a13      	ldr	r2, [pc, #76]	; (80053ac <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005360:	fba2 2303 	umull	r2, r3, r2, r3
 8005364:	0a1a      	lsrs	r2, r3, #8
 8005366:	4613      	mov	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	3b01      	subs	r3, #1
 8005372:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d107      	bne.n	800538a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	f043 0220 	orr.w	r2, r3, #32
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e008      	b.n	800539c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005398:	d0e9      	beq.n	800536e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	200000f8 	.word	0x200000f8
 80053ac:	14f8b589 	.word	0x14f8b589

080053b0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053bc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80053c0:	d103      	bne.n	80053ca <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80053c8:	e007      	b.n	80053da <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ce:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80053d2:	d102      	bne.n	80053da <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2208      	movs	r2, #8
 80053d8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80053da:	bf00      	nop
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
	...

080053e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e264      	b.n	80058c4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b00      	cmp	r3, #0
 8005404:	d075      	beq.n	80054f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005406:	4ba3      	ldr	r3, [pc, #652]	; (8005694 <HAL_RCC_OscConfig+0x2ac>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 030c 	and.w	r3, r3, #12
 800540e:	2b04      	cmp	r3, #4
 8005410:	d00c      	beq.n	800542c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005412:	4ba0      	ldr	r3, [pc, #640]	; (8005694 <HAL_RCC_OscConfig+0x2ac>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800541a:	2b08      	cmp	r3, #8
 800541c:	d112      	bne.n	8005444 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800541e:	4b9d      	ldr	r3, [pc, #628]	; (8005694 <HAL_RCC_OscConfig+0x2ac>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005426:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800542a:	d10b      	bne.n	8005444 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800542c:	4b99      	ldr	r3, [pc, #612]	; (8005694 <HAL_RCC_OscConfig+0x2ac>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d05b      	beq.n	80054f0 <HAL_RCC_OscConfig+0x108>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d157      	bne.n	80054f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e23f      	b.n	80058c4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800544c:	d106      	bne.n	800545c <HAL_RCC_OscConfig+0x74>
 800544e:	4b91      	ldr	r3, [pc, #580]	; (8005694 <HAL_RCC_OscConfig+0x2ac>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a90      	ldr	r2, [pc, #576]	; (8005694 <HAL_RCC_OscConfig+0x2ac>)
 8005454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005458:	6013      	str	r3, [r2, #0]
 800545a:	e01d      	b.n	8005498 <HAL_RCC_OscConfig+0xb0>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005464:	d10c      	bne.n	8005480 <HAL_RCC_OscConfig+0x98>
 8005466:	4b8b      	ldr	r3, [pc, #556]	; (8005694 <HAL_RCC_OscConfig+0x2ac>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a8a      	ldr	r2, [pc, #552]	; (8005694 <HAL_RCC_OscConfig+0x2ac>)
 800546c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005470:	6013      	str	r3, [r2, #0]
 8005472:	4b88      	ldr	r3, [pc, #544]	; (8005694 <HAL_RCC_OscConfig+0x2ac>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a87      	ldr	r2, [pc, #540]	; (8005694 <HAL_RCC_OscConfig+0x2ac>)
 8005478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	e00b      	b.n	8005498 <HAL_RCC_OscConfig+0xb0>
 8005480:	4b84      	ldr	r3, [pc, #528]	; (8005694 <HAL_RCC_OscConfig+0x2ac>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a83      	ldr	r2, [pc, #524]	; (8005694 <HAL_RCC_OscConfig+0x2ac>)
 8005486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800548a:	6013      	str	r3, [r2, #0]
 800548c:	4b81      	ldr	r3, [pc, #516]	; (8005694 <HAL_RCC_OscConfig+0x2ac>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a80      	ldr	r2, [pc, #512]	; (8005694 <HAL_RCC_OscConfig+0x2ac>)
 8005492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005496:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d013      	beq.n	80054c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a0:	f7fc fd5e 	bl	8001f60 <HAL_GetTick>
 80054a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054a6:	e008      	b.n	80054ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054a8:	f7fc fd5a 	bl	8001f60 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b64      	cmp	r3, #100	; 0x64
 80054b4:	d901      	bls.n	80054ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e204      	b.n	80058c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ba:	4b76      	ldr	r3, [pc, #472]	; (8005694 <HAL_RCC_OscConfig+0x2ac>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d0f0      	beq.n	80054a8 <HAL_RCC_OscConfig+0xc0>
 80054c6:	e014      	b.n	80054f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c8:	f7fc fd4a 	bl	8001f60 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054d0:	f7fc fd46 	bl	8001f60 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b64      	cmp	r3, #100	; 0x64
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e1f0      	b.n	80058c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054e2:	4b6c      	ldr	r3, [pc, #432]	; (8005694 <HAL_RCC_OscConfig+0x2ac>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1f0      	bne.n	80054d0 <HAL_RCC_OscConfig+0xe8>
 80054ee:	e000      	b.n	80054f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d063      	beq.n	80055c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054fe:	4b65      	ldr	r3, [pc, #404]	; (8005694 <HAL_RCC_OscConfig+0x2ac>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f003 030c 	and.w	r3, r3, #12
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00b      	beq.n	8005522 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800550a:	4b62      	ldr	r3, [pc, #392]	; (8005694 <HAL_RCC_OscConfig+0x2ac>)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005512:	2b08      	cmp	r3, #8
 8005514:	d11c      	bne.n	8005550 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005516:	4b5f      	ldr	r3, [pc, #380]	; (8005694 <HAL_RCC_OscConfig+0x2ac>)
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d116      	bne.n	8005550 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005522:	4b5c      	ldr	r3, [pc, #368]	; (8005694 <HAL_RCC_OscConfig+0x2ac>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d005      	beq.n	800553a <HAL_RCC_OscConfig+0x152>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d001      	beq.n	800553a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e1c4      	b.n	80058c4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800553a:	4b56      	ldr	r3, [pc, #344]	; (8005694 <HAL_RCC_OscConfig+0x2ac>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	4952      	ldr	r1, [pc, #328]	; (8005694 <HAL_RCC_OscConfig+0x2ac>)
 800554a:	4313      	orrs	r3, r2
 800554c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800554e:	e03a      	b.n	80055c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d020      	beq.n	800559a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005558:	4b4f      	ldr	r3, [pc, #316]	; (8005698 <HAL_RCC_OscConfig+0x2b0>)
 800555a:	2201      	movs	r2, #1
 800555c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555e:	f7fc fcff 	bl	8001f60 <HAL_GetTick>
 8005562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005564:	e008      	b.n	8005578 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005566:	f7fc fcfb 	bl	8001f60 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	2b02      	cmp	r3, #2
 8005572:	d901      	bls.n	8005578 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e1a5      	b.n	80058c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005578:	4b46      	ldr	r3, [pc, #280]	; (8005694 <HAL_RCC_OscConfig+0x2ac>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0f0      	beq.n	8005566 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005584:	4b43      	ldr	r3, [pc, #268]	; (8005694 <HAL_RCC_OscConfig+0x2ac>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	00db      	lsls	r3, r3, #3
 8005592:	4940      	ldr	r1, [pc, #256]	; (8005694 <HAL_RCC_OscConfig+0x2ac>)
 8005594:	4313      	orrs	r3, r2
 8005596:	600b      	str	r3, [r1, #0]
 8005598:	e015      	b.n	80055c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800559a:	4b3f      	ldr	r3, [pc, #252]	; (8005698 <HAL_RCC_OscConfig+0x2b0>)
 800559c:	2200      	movs	r2, #0
 800559e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a0:	f7fc fcde 	bl	8001f60 <HAL_GetTick>
 80055a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055a6:	e008      	b.n	80055ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055a8:	f7fc fcda 	bl	8001f60 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e184      	b.n	80058c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055ba:	4b36      	ldr	r3, [pc, #216]	; (8005694 <HAL_RCC_OscConfig+0x2ac>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1f0      	bne.n	80055a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0308 	and.w	r3, r3, #8
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d030      	beq.n	8005634 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d016      	beq.n	8005608 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055da:	4b30      	ldr	r3, [pc, #192]	; (800569c <HAL_RCC_OscConfig+0x2b4>)
 80055dc:	2201      	movs	r2, #1
 80055de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e0:	f7fc fcbe 	bl	8001f60 <HAL_GetTick>
 80055e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055e6:	e008      	b.n	80055fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055e8:	f7fc fcba 	bl	8001f60 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e164      	b.n	80058c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055fa:	4b26      	ldr	r3, [pc, #152]	; (8005694 <HAL_RCC_OscConfig+0x2ac>)
 80055fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d0f0      	beq.n	80055e8 <HAL_RCC_OscConfig+0x200>
 8005606:	e015      	b.n	8005634 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005608:	4b24      	ldr	r3, [pc, #144]	; (800569c <HAL_RCC_OscConfig+0x2b4>)
 800560a:	2200      	movs	r2, #0
 800560c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800560e:	f7fc fca7 	bl	8001f60 <HAL_GetTick>
 8005612:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005614:	e008      	b.n	8005628 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005616:	f7fc fca3 	bl	8001f60 <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	2b02      	cmp	r3, #2
 8005622:	d901      	bls.n	8005628 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e14d      	b.n	80058c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005628:	4b1a      	ldr	r3, [pc, #104]	; (8005694 <HAL_RCC_OscConfig+0x2ac>)
 800562a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800562c:	f003 0302 	and.w	r3, r3, #2
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1f0      	bne.n	8005616 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 80a0 	beq.w	8005782 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005642:	2300      	movs	r3, #0
 8005644:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005646:	4b13      	ldr	r3, [pc, #76]	; (8005694 <HAL_RCC_OscConfig+0x2ac>)
 8005648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10f      	bne.n	8005672 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005652:	2300      	movs	r3, #0
 8005654:	60bb      	str	r3, [r7, #8]
 8005656:	4b0f      	ldr	r3, [pc, #60]	; (8005694 <HAL_RCC_OscConfig+0x2ac>)
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	4a0e      	ldr	r2, [pc, #56]	; (8005694 <HAL_RCC_OscConfig+0x2ac>)
 800565c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005660:	6413      	str	r3, [r2, #64]	; 0x40
 8005662:	4b0c      	ldr	r3, [pc, #48]	; (8005694 <HAL_RCC_OscConfig+0x2ac>)
 8005664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800566a:	60bb      	str	r3, [r7, #8]
 800566c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800566e:	2301      	movs	r3, #1
 8005670:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005672:	4b0b      	ldr	r3, [pc, #44]	; (80056a0 <HAL_RCC_OscConfig+0x2b8>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567a:	2b00      	cmp	r3, #0
 800567c:	d121      	bne.n	80056c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800567e:	4b08      	ldr	r3, [pc, #32]	; (80056a0 <HAL_RCC_OscConfig+0x2b8>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a07      	ldr	r2, [pc, #28]	; (80056a0 <HAL_RCC_OscConfig+0x2b8>)
 8005684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005688:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800568a:	f7fc fc69 	bl	8001f60 <HAL_GetTick>
 800568e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005690:	e011      	b.n	80056b6 <HAL_RCC_OscConfig+0x2ce>
 8005692:	bf00      	nop
 8005694:	40023800 	.word	0x40023800
 8005698:	42470000 	.word	0x42470000
 800569c:	42470e80 	.word	0x42470e80
 80056a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056a4:	f7fc fc5c 	bl	8001f60 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e106      	b.n	80058c4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b6:	4b85      	ldr	r3, [pc, #532]	; (80058cc <HAL_RCC_OscConfig+0x4e4>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d0f0      	beq.n	80056a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d106      	bne.n	80056d8 <HAL_RCC_OscConfig+0x2f0>
 80056ca:	4b81      	ldr	r3, [pc, #516]	; (80058d0 <HAL_RCC_OscConfig+0x4e8>)
 80056cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ce:	4a80      	ldr	r2, [pc, #512]	; (80058d0 <HAL_RCC_OscConfig+0x4e8>)
 80056d0:	f043 0301 	orr.w	r3, r3, #1
 80056d4:	6713      	str	r3, [r2, #112]	; 0x70
 80056d6:	e01c      	b.n	8005712 <HAL_RCC_OscConfig+0x32a>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	2b05      	cmp	r3, #5
 80056de:	d10c      	bne.n	80056fa <HAL_RCC_OscConfig+0x312>
 80056e0:	4b7b      	ldr	r3, [pc, #492]	; (80058d0 <HAL_RCC_OscConfig+0x4e8>)
 80056e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e4:	4a7a      	ldr	r2, [pc, #488]	; (80058d0 <HAL_RCC_OscConfig+0x4e8>)
 80056e6:	f043 0304 	orr.w	r3, r3, #4
 80056ea:	6713      	str	r3, [r2, #112]	; 0x70
 80056ec:	4b78      	ldr	r3, [pc, #480]	; (80058d0 <HAL_RCC_OscConfig+0x4e8>)
 80056ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f0:	4a77      	ldr	r2, [pc, #476]	; (80058d0 <HAL_RCC_OscConfig+0x4e8>)
 80056f2:	f043 0301 	orr.w	r3, r3, #1
 80056f6:	6713      	str	r3, [r2, #112]	; 0x70
 80056f8:	e00b      	b.n	8005712 <HAL_RCC_OscConfig+0x32a>
 80056fa:	4b75      	ldr	r3, [pc, #468]	; (80058d0 <HAL_RCC_OscConfig+0x4e8>)
 80056fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fe:	4a74      	ldr	r2, [pc, #464]	; (80058d0 <HAL_RCC_OscConfig+0x4e8>)
 8005700:	f023 0301 	bic.w	r3, r3, #1
 8005704:	6713      	str	r3, [r2, #112]	; 0x70
 8005706:	4b72      	ldr	r3, [pc, #456]	; (80058d0 <HAL_RCC_OscConfig+0x4e8>)
 8005708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570a:	4a71      	ldr	r2, [pc, #452]	; (80058d0 <HAL_RCC_OscConfig+0x4e8>)
 800570c:	f023 0304 	bic.w	r3, r3, #4
 8005710:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d015      	beq.n	8005746 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800571a:	f7fc fc21 	bl	8001f60 <HAL_GetTick>
 800571e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005720:	e00a      	b.n	8005738 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005722:	f7fc fc1d 	bl	8001f60 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005730:	4293      	cmp	r3, r2
 8005732:	d901      	bls.n	8005738 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e0c5      	b.n	80058c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005738:	4b65      	ldr	r3, [pc, #404]	; (80058d0 <HAL_RCC_OscConfig+0x4e8>)
 800573a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d0ee      	beq.n	8005722 <HAL_RCC_OscConfig+0x33a>
 8005744:	e014      	b.n	8005770 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005746:	f7fc fc0b 	bl	8001f60 <HAL_GetTick>
 800574a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800574c:	e00a      	b.n	8005764 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800574e:	f7fc fc07 	bl	8001f60 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	f241 3288 	movw	r2, #5000	; 0x1388
 800575c:	4293      	cmp	r3, r2
 800575e:	d901      	bls.n	8005764 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e0af      	b.n	80058c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005764:	4b5a      	ldr	r3, [pc, #360]	; (80058d0 <HAL_RCC_OscConfig+0x4e8>)
 8005766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1ee      	bne.n	800574e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005770:	7dfb      	ldrb	r3, [r7, #23]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d105      	bne.n	8005782 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005776:	4b56      	ldr	r3, [pc, #344]	; (80058d0 <HAL_RCC_OscConfig+0x4e8>)
 8005778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577a:	4a55      	ldr	r2, [pc, #340]	; (80058d0 <HAL_RCC_OscConfig+0x4e8>)
 800577c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005780:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	2b00      	cmp	r3, #0
 8005788:	f000 809b 	beq.w	80058c2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800578c:	4b50      	ldr	r3, [pc, #320]	; (80058d0 <HAL_RCC_OscConfig+0x4e8>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f003 030c 	and.w	r3, r3, #12
 8005794:	2b08      	cmp	r3, #8
 8005796:	d05c      	beq.n	8005852 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	2b02      	cmp	r3, #2
 800579e:	d141      	bne.n	8005824 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057a0:	4b4c      	ldr	r3, [pc, #304]	; (80058d4 <HAL_RCC_OscConfig+0x4ec>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a6:	f7fc fbdb 	bl	8001f60 <HAL_GetTick>
 80057aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ac:	e008      	b.n	80057c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057ae:	f7fc fbd7 	bl	8001f60 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d901      	bls.n	80057c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e081      	b.n	80058c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057c0:	4b43      	ldr	r3, [pc, #268]	; (80058d0 <HAL_RCC_OscConfig+0x4e8>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1f0      	bne.n	80057ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	69da      	ldr	r2, [r3, #28]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a1b      	ldr	r3, [r3, #32]
 80057d4:	431a      	orrs	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057da:	019b      	lsls	r3, r3, #6
 80057dc:	431a      	orrs	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e2:	085b      	lsrs	r3, r3, #1
 80057e4:	3b01      	subs	r3, #1
 80057e6:	041b      	lsls	r3, r3, #16
 80057e8:	431a      	orrs	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ee:	061b      	lsls	r3, r3, #24
 80057f0:	4937      	ldr	r1, [pc, #220]	; (80058d0 <HAL_RCC_OscConfig+0x4e8>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057f6:	4b37      	ldr	r3, [pc, #220]	; (80058d4 <HAL_RCC_OscConfig+0x4ec>)
 80057f8:	2201      	movs	r2, #1
 80057fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057fc:	f7fc fbb0 	bl	8001f60 <HAL_GetTick>
 8005800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005802:	e008      	b.n	8005816 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005804:	f7fc fbac 	bl	8001f60 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b02      	cmp	r3, #2
 8005810:	d901      	bls.n	8005816 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e056      	b.n	80058c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005816:	4b2e      	ldr	r3, [pc, #184]	; (80058d0 <HAL_RCC_OscConfig+0x4e8>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d0f0      	beq.n	8005804 <HAL_RCC_OscConfig+0x41c>
 8005822:	e04e      	b.n	80058c2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005824:	4b2b      	ldr	r3, [pc, #172]	; (80058d4 <HAL_RCC_OscConfig+0x4ec>)
 8005826:	2200      	movs	r2, #0
 8005828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800582a:	f7fc fb99 	bl	8001f60 <HAL_GetTick>
 800582e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005830:	e008      	b.n	8005844 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005832:	f7fc fb95 	bl	8001f60 <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	2b02      	cmp	r3, #2
 800583e:	d901      	bls.n	8005844 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e03f      	b.n	80058c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005844:	4b22      	ldr	r3, [pc, #136]	; (80058d0 <HAL_RCC_OscConfig+0x4e8>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1f0      	bne.n	8005832 <HAL_RCC_OscConfig+0x44a>
 8005850:	e037      	b.n	80058c2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d101      	bne.n	800585e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e032      	b.n	80058c4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800585e:	4b1c      	ldr	r3, [pc, #112]	; (80058d0 <HAL_RCC_OscConfig+0x4e8>)
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d028      	beq.n	80058be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005876:	429a      	cmp	r2, r3
 8005878:	d121      	bne.n	80058be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005884:	429a      	cmp	r2, r3
 8005886:	d11a      	bne.n	80058be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800588e:	4013      	ands	r3, r2
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005894:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005896:	4293      	cmp	r3, r2
 8005898:	d111      	bne.n	80058be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a4:	085b      	lsrs	r3, r3, #1
 80058a6:	3b01      	subs	r3, #1
 80058a8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d107      	bne.n	80058be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d001      	beq.n	80058c2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e000      	b.n	80058c4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3718      	adds	r7, #24
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	40007000 	.word	0x40007000
 80058d0:	40023800 	.word	0x40023800
 80058d4:	42470060 	.word	0x42470060

080058d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e0cc      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058ec:	4b68      	ldr	r3, [pc, #416]	; (8005a90 <HAL_RCC_ClockConfig+0x1b8>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d90c      	bls.n	8005914 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058fa:	4b65      	ldr	r3, [pc, #404]	; (8005a90 <HAL_RCC_ClockConfig+0x1b8>)
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	b2d2      	uxtb	r2, r2
 8005900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005902:	4b63      	ldr	r3, [pc, #396]	; (8005a90 <HAL_RCC_ClockConfig+0x1b8>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0307 	and.w	r3, r3, #7
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	429a      	cmp	r2, r3
 800590e:	d001      	beq.n	8005914 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e0b8      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d020      	beq.n	8005962 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b00      	cmp	r3, #0
 800592a:	d005      	beq.n	8005938 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800592c:	4b59      	ldr	r3, [pc, #356]	; (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	4a58      	ldr	r2, [pc, #352]	; (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 8005932:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005936:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0308 	and.w	r3, r3, #8
 8005940:	2b00      	cmp	r3, #0
 8005942:	d005      	beq.n	8005950 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005944:	4b53      	ldr	r3, [pc, #332]	; (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	4a52      	ldr	r2, [pc, #328]	; (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 800594a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800594e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005950:	4b50      	ldr	r3, [pc, #320]	; (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	494d      	ldr	r1, [pc, #308]	; (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 800595e:	4313      	orrs	r3, r2
 8005960:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	d044      	beq.n	80059f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d107      	bne.n	8005986 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005976:	4b47      	ldr	r3, [pc, #284]	; (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d119      	bne.n	80059b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e07f      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	2b02      	cmp	r3, #2
 800598c:	d003      	beq.n	8005996 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005992:	2b03      	cmp	r3, #3
 8005994:	d107      	bne.n	80059a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005996:	4b3f      	ldr	r3, [pc, #252]	; (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d109      	bne.n	80059b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e06f      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059a6:	4b3b      	ldr	r3, [pc, #236]	; (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e067      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059b6:	4b37      	ldr	r3, [pc, #220]	; (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f023 0203 	bic.w	r2, r3, #3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	4934      	ldr	r1, [pc, #208]	; (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059c8:	f7fc faca 	bl	8001f60 <HAL_GetTick>
 80059cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ce:	e00a      	b.n	80059e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059d0:	f7fc fac6 	bl	8001f60 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	f241 3288 	movw	r2, #5000	; 0x1388
 80059de:	4293      	cmp	r3, r2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e04f      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059e6:	4b2b      	ldr	r3, [pc, #172]	; (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f003 020c 	and.w	r2, r3, #12
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d1eb      	bne.n	80059d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059f8:	4b25      	ldr	r3, [pc, #148]	; (8005a90 <HAL_RCC_ClockConfig+0x1b8>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0307 	and.w	r3, r3, #7
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d20c      	bcs.n	8005a20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a06:	4b22      	ldr	r3, [pc, #136]	; (8005a90 <HAL_RCC_ClockConfig+0x1b8>)
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	b2d2      	uxtb	r2, r2
 8005a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a0e:	4b20      	ldr	r3, [pc, #128]	; (8005a90 <HAL_RCC_ClockConfig+0x1b8>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0307 	and.w	r3, r3, #7
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d001      	beq.n	8005a20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e032      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d008      	beq.n	8005a3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a2c:	4b19      	ldr	r3, [pc, #100]	; (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	4916      	ldr	r1, [pc, #88]	; (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0308 	and.w	r3, r3, #8
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d009      	beq.n	8005a5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a4a:	4b12      	ldr	r3, [pc, #72]	; (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	00db      	lsls	r3, r3, #3
 8005a58:	490e      	ldr	r1, [pc, #56]	; (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a5e:	f000 f821 	bl	8005aa4 <HAL_RCC_GetSysClockFreq>
 8005a62:	4602      	mov	r2, r0
 8005a64:	4b0b      	ldr	r3, [pc, #44]	; (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	091b      	lsrs	r3, r3, #4
 8005a6a:	f003 030f 	and.w	r3, r3, #15
 8005a6e:	490a      	ldr	r1, [pc, #40]	; (8005a98 <HAL_RCC_ClockConfig+0x1c0>)
 8005a70:	5ccb      	ldrb	r3, [r1, r3]
 8005a72:	fa22 f303 	lsr.w	r3, r2, r3
 8005a76:	4a09      	ldr	r2, [pc, #36]	; (8005a9c <HAL_RCC_ClockConfig+0x1c4>)
 8005a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a7a:	4b09      	ldr	r3, [pc, #36]	; (8005aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fc fa2a 	bl	8001ed8 <HAL_InitTick>

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	40023c00 	.word	0x40023c00
 8005a94:	40023800 	.word	0x40023800
 8005a98:	080089a0 	.word	0x080089a0
 8005a9c:	200000f8 	.word	0x200000f8
 8005aa0:	200000fc 	.word	0x200000fc

08005aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aa4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005aa8:	b084      	sub	sp, #16
 8005aaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	607b      	str	r3, [r7, #4]
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005abc:	4b67      	ldr	r3, [pc, #412]	; (8005c5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f003 030c 	and.w	r3, r3, #12
 8005ac4:	2b08      	cmp	r3, #8
 8005ac6:	d00d      	beq.n	8005ae4 <HAL_RCC_GetSysClockFreq+0x40>
 8005ac8:	2b08      	cmp	r3, #8
 8005aca:	f200 80bd 	bhi.w	8005c48 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d002      	beq.n	8005ad8 <HAL_RCC_GetSysClockFreq+0x34>
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	d003      	beq.n	8005ade <HAL_RCC_GetSysClockFreq+0x3a>
 8005ad6:	e0b7      	b.n	8005c48 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ad8:	4b61      	ldr	r3, [pc, #388]	; (8005c60 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005ada:	60bb      	str	r3, [r7, #8]
       break;
 8005adc:	e0b7      	b.n	8005c4e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ade:	4b61      	ldr	r3, [pc, #388]	; (8005c64 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005ae0:	60bb      	str	r3, [r7, #8]
      break;
 8005ae2:	e0b4      	b.n	8005c4e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ae4:	4b5d      	ldr	r3, [pc, #372]	; (8005c5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005aec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005aee:	4b5b      	ldr	r3, [pc, #364]	; (8005c5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d04d      	beq.n	8005b96 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005afa:	4b58      	ldr	r3, [pc, #352]	; (8005c5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	099b      	lsrs	r3, r3, #6
 8005b00:	461a      	mov	r2, r3
 8005b02:	f04f 0300 	mov.w	r3, #0
 8005b06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b0a:	f04f 0100 	mov.w	r1, #0
 8005b0e:	ea02 0800 	and.w	r8, r2, r0
 8005b12:	ea03 0901 	and.w	r9, r3, r1
 8005b16:	4640      	mov	r0, r8
 8005b18:	4649      	mov	r1, r9
 8005b1a:	f04f 0200 	mov.w	r2, #0
 8005b1e:	f04f 0300 	mov.w	r3, #0
 8005b22:	014b      	lsls	r3, r1, #5
 8005b24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005b28:	0142      	lsls	r2, r0, #5
 8005b2a:	4610      	mov	r0, r2
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	ebb0 0008 	subs.w	r0, r0, r8
 8005b32:	eb61 0109 	sbc.w	r1, r1, r9
 8005b36:	f04f 0200 	mov.w	r2, #0
 8005b3a:	f04f 0300 	mov.w	r3, #0
 8005b3e:	018b      	lsls	r3, r1, #6
 8005b40:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005b44:	0182      	lsls	r2, r0, #6
 8005b46:	1a12      	subs	r2, r2, r0
 8005b48:	eb63 0301 	sbc.w	r3, r3, r1
 8005b4c:	f04f 0000 	mov.w	r0, #0
 8005b50:	f04f 0100 	mov.w	r1, #0
 8005b54:	00d9      	lsls	r1, r3, #3
 8005b56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b5a:	00d0      	lsls	r0, r2, #3
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	460b      	mov	r3, r1
 8005b60:	eb12 0208 	adds.w	r2, r2, r8
 8005b64:	eb43 0309 	adc.w	r3, r3, r9
 8005b68:	f04f 0000 	mov.w	r0, #0
 8005b6c:	f04f 0100 	mov.w	r1, #0
 8005b70:	0259      	lsls	r1, r3, #9
 8005b72:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005b76:	0250      	lsls	r0, r2, #9
 8005b78:	4602      	mov	r2, r0
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	4610      	mov	r0, r2
 8005b7e:	4619      	mov	r1, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	461a      	mov	r2, r3
 8005b84:	f04f 0300 	mov.w	r3, #0
 8005b88:	f7fa ff70 	bl	8000a6c <__aeabi_uldivmod>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	460b      	mov	r3, r1
 8005b90:	4613      	mov	r3, r2
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	e04a      	b.n	8005c2c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b96:	4b31      	ldr	r3, [pc, #196]	; (8005c5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	099b      	lsrs	r3, r3, #6
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	f04f 0300 	mov.w	r3, #0
 8005ba2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ba6:	f04f 0100 	mov.w	r1, #0
 8005baa:	ea02 0400 	and.w	r4, r2, r0
 8005bae:	ea03 0501 	and.w	r5, r3, r1
 8005bb2:	4620      	mov	r0, r4
 8005bb4:	4629      	mov	r1, r5
 8005bb6:	f04f 0200 	mov.w	r2, #0
 8005bba:	f04f 0300 	mov.w	r3, #0
 8005bbe:	014b      	lsls	r3, r1, #5
 8005bc0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005bc4:	0142      	lsls	r2, r0, #5
 8005bc6:	4610      	mov	r0, r2
 8005bc8:	4619      	mov	r1, r3
 8005bca:	1b00      	subs	r0, r0, r4
 8005bcc:	eb61 0105 	sbc.w	r1, r1, r5
 8005bd0:	f04f 0200 	mov.w	r2, #0
 8005bd4:	f04f 0300 	mov.w	r3, #0
 8005bd8:	018b      	lsls	r3, r1, #6
 8005bda:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005bde:	0182      	lsls	r2, r0, #6
 8005be0:	1a12      	subs	r2, r2, r0
 8005be2:	eb63 0301 	sbc.w	r3, r3, r1
 8005be6:	f04f 0000 	mov.w	r0, #0
 8005bea:	f04f 0100 	mov.w	r1, #0
 8005bee:	00d9      	lsls	r1, r3, #3
 8005bf0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005bf4:	00d0      	lsls	r0, r2, #3
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	1912      	adds	r2, r2, r4
 8005bfc:	eb45 0303 	adc.w	r3, r5, r3
 8005c00:	f04f 0000 	mov.w	r0, #0
 8005c04:	f04f 0100 	mov.w	r1, #0
 8005c08:	0299      	lsls	r1, r3, #10
 8005c0a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005c0e:	0290      	lsls	r0, r2, #10
 8005c10:	4602      	mov	r2, r0
 8005c12:	460b      	mov	r3, r1
 8005c14:	4610      	mov	r0, r2
 8005c16:	4619      	mov	r1, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	f04f 0300 	mov.w	r3, #0
 8005c20:	f7fa ff24 	bl	8000a6c <__aeabi_uldivmod>
 8005c24:	4602      	mov	r2, r0
 8005c26:	460b      	mov	r3, r1
 8005c28:	4613      	mov	r3, r2
 8005c2a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c2c:	4b0b      	ldr	r3, [pc, #44]	; (8005c5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	0c1b      	lsrs	r3, r3, #16
 8005c32:	f003 0303 	and.w	r3, r3, #3
 8005c36:	3301      	adds	r3, #1
 8005c38:	005b      	lsls	r3, r3, #1
 8005c3a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c44:	60bb      	str	r3, [r7, #8]
      break;
 8005c46:	e002      	b.n	8005c4e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c48:	4b05      	ldr	r3, [pc, #20]	; (8005c60 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005c4a:	60bb      	str	r3, [r7, #8]
      break;
 8005c4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c4e:	68bb      	ldr	r3, [r7, #8]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005c5a:	bf00      	nop
 8005c5c:	40023800 	.word	0x40023800
 8005c60:	00f42400 	.word	0x00f42400
 8005c64:	007a1200 	.word	0x007a1200

08005c68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c6c:	4b03      	ldr	r3, [pc, #12]	; (8005c7c <HAL_RCC_GetHCLKFreq+0x14>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	200000f8 	.word	0x200000f8

08005c80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c84:	f7ff fff0 	bl	8005c68 <HAL_RCC_GetHCLKFreq>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	4b05      	ldr	r3, [pc, #20]	; (8005ca0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	0a9b      	lsrs	r3, r3, #10
 8005c90:	f003 0307 	and.w	r3, r3, #7
 8005c94:	4903      	ldr	r1, [pc, #12]	; (8005ca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c96:	5ccb      	ldrb	r3, [r1, r3]
 8005c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	40023800 	.word	0x40023800
 8005ca4:	080089b0 	.word	0x080089b0

08005ca8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005cac:	f7ff ffdc 	bl	8005c68 <HAL_RCC_GetHCLKFreq>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	4b05      	ldr	r3, [pc, #20]	; (8005cc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	0b5b      	lsrs	r3, r3, #13
 8005cb8:	f003 0307 	and.w	r3, r3, #7
 8005cbc:	4903      	ldr	r1, [pc, #12]	; (8005ccc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cbe:	5ccb      	ldrb	r3, [r1, r3]
 8005cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	40023800 	.word	0x40023800
 8005ccc:	080089b0 	.word	0x080089b0

08005cd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e07b      	b.n	8005dda <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d108      	bne.n	8005cfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cf2:	d009      	beq.n	8005d08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	61da      	str	r2, [r3, #28]
 8005cfa:	e005      	b.n	8005d08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d106      	bne.n	8005d28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7fb fea6 	bl	8001a74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d50:	431a      	orrs	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	f003 0302 	and.w	r3, r3, #2
 8005d64:	431a      	orrs	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d78:	431a      	orrs	r2, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d82:	431a      	orrs	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d8c:	ea42 0103 	orr.w	r1, r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d94:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	0c1b      	lsrs	r3, r3, #16
 8005da6:	f003 0104 	and.w	r1, r3, #4
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dae:	f003 0210 	and.w	r2, r3, #16
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	430a      	orrs	r2, r1
 8005db8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	69da      	ldr	r2, [r3, #28]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dc8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b082      	sub	sp, #8
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d101      	bne.n	8005df4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e041      	b.n	8005e78 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d106      	bne.n	8005e0e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7fb fe7b 	bl	8001b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2202      	movs	r2, #2
 8005e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	3304      	adds	r3, #4
 8005e1e:	4619      	mov	r1, r3
 8005e20:	4610      	mov	r0, r2
 8005e22:	f000 fe67 	bl	8006af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3708      	adds	r7, #8
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d001      	beq.n	8005e98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e03c      	b.n	8005f12 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a1e      	ldr	r2, [pc, #120]	; (8005f20 <HAL_TIM_Base_Start+0xa0>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d018      	beq.n	8005edc <HAL_TIM_Base_Start+0x5c>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eb2:	d013      	beq.n	8005edc <HAL_TIM_Base_Start+0x5c>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a1a      	ldr	r2, [pc, #104]	; (8005f24 <HAL_TIM_Base_Start+0xa4>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d00e      	beq.n	8005edc <HAL_TIM_Base_Start+0x5c>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a19      	ldr	r2, [pc, #100]	; (8005f28 <HAL_TIM_Base_Start+0xa8>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d009      	beq.n	8005edc <HAL_TIM_Base_Start+0x5c>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a17      	ldr	r2, [pc, #92]	; (8005f2c <HAL_TIM_Base_Start+0xac>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d004      	beq.n	8005edc <HAL_TIM_Base_Start+0x5c>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a16      	ldr	r2, [pc, #88]	; (8005f30 <HAL_TIM_Base_Start+0xb0>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d111      	bne.n	8005f00 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f003 0307 	and.w	r3, r3, #7
 8005ee6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2b06      	cmp	r3, #6
 8005eec:	d010      	beq.n	8005f10 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f042 0201 	orr.w	r2, r2, #1
 8005efc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005efe:	e007      	b.n	8005f10 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f042 0201 	orr.w	r2, r2, #1
 8005f0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	40010000 	.word	0x40010000
 8005f24:	40000400 	.word	0x40000400
 8005f28:	40000800 	.word	0x40000800
 8005f2c:	40000c00 	.word	0x40000c00
 8005f30:	40014000 	.word	0x40014000

08005f34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d001      	beq.n	8005f4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e044      	b.n	8005fd6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68da      	ldr	r2, [r3, #12]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f042 0201 	orr.w	r2, r2, #1
 8005f62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a1e      	ldr	r2, [pc, #120]	; (8005fe4 <HAL_TIM_Base_Start_IT+0xb0>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d018      	beq.n	8005fa0 <HAL_TIM_Base_Start_IT+0x6c>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f76:	d013      	beq.n	8005fa0 <HAL_TIM_Base_Start_IT+0x6c>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a1a      	ldr	r2, [pc, #104]	; (8005fe8 <HAL_TIM_Base_Start_IT+0xb4>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d00e      	beq.n	8005fa0 <HAL_TIM_Base_Start_IT+0x6c>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a19      	ldr	r2, [pc, #100]	; (8005fec <HAL_TIM_Base_Start_IT+0xb8>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d009      	beq.n	8005fa0 <HAL_TIM_Base_Start_IT+0x6c>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a17      	ldr	r2, [pc, #92]	; (8005ff0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d004      	beq.n	8005fa0 <HAL_TIM_Base_Start_IT+0x6c>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a16      	ldr	r2, [pc, #88]	; (8005ff4 <HAL_TIM_Base_Start_IT+0xc0>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d111      	bne.n	8005fc4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f003 0307 	and.w	r3, r3, #7
 8005faa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2b06      	cmp	r3, #6
 8005fb0:	d010      	beq.n	8005fd4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f042 0201 	orr.w	r2, r2, #1
 8005fc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fc2:	e007      	b.n	8005fd4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f042 0201 	orr.w	r2, r2, #1
 8005fd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	40010000 	.word	0x40010000
 8005fe8:	40000400 	.word	0x40000400
 8005fec:	40000800 	.word	0x40000800
 8005ff0:	40000c00 	.word	0x40000c00
 8005ff4:	40014000 	.word	0x40014000

08005ff8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e041      	b.n	800608e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d106      	bne.n	8006024 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f839 	bl	8006096 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2202      	movs	r2, #2
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	3304      	adds	r3, #4
 8006034:	4619      	mov	r1, r3
 8006036:	4610      	mov	r0, r2
 8006038:	f000 fd5c 	bl	8006af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006096:	b480      	push	{r7}
 8006098:	b083      	sub	sp, #12
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800609e:	bf00      	nop
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
	...

080060ac <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
 80060b8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d104      	bne.n	80060ce <HAL_TIM_IC_Start_DMA+0x22>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	e013      	b.n	80060f6 <HAL_TIM_IC_Start_DMA+0x4a>
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2b04      	cmp	r3, #4
 80060d2:	d104      	bne.n	80060de <HAL_TIM_IC_Start_DMA+0x32>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	e00b      	b.n	80060f6 <HAL_TIM_IC_Start_DMA+0x4a>
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	2b08      	cmp	r3, #8
 80060e2:	d104      	bne.n	80060ee <HAL_TIM_IC_Start_DMA+0x42>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	e003      	b.n	80060f6 <HAL_TIM_IC_Start_DMA+0x4a>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d104      	bne.n	8006108 <HAL_TIM_IC_Start_DMA+0x5c>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006104:	b2db      	uxtb	r3, r3
 8006106:	e013      	b.n	8006130 <HAL_TIM_IC_Start_DMA+0x84>
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2b04      	cmp	r3, #4
 800610c:	d104      	bne.n	8006118 <HAL_TIM_IC_Start_DMA+0x6c>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006114:	b2db      	uxtb	r3, r3
 8006116:	e00b      	b.n	8006130 <HAL_TIM_IC_Start_DMA+0x84>
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2b08      	cmp	r3, #8
 800611c:	d104      	bne.n	8006128 <HAL_TIM_IC_Start_DMA+0x7c>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006124:	b2db      	uxtb	r3, r3
 8006126:	e003      	b.n	8006130 <HAL_TIM_IC_Start_DMA+0x84>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800612e:	b2db      	uxtb	r3, r3
 8006130:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8006132:	7dbb      	ldrb	r3, [r7, #22]
 8006134:	2b02      	cmp	r3, #2
 8006136:	d002      	beq.n	800613e <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8006138:	7d7b      	ldrb	r3, [r7, #21]
 800613a:	2b02      	cmp	r3, #2
 800613c:	d101      	bne.n	8006142 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 800613e:	2302      	movs	r3, #2
 8006140:	e13c      	b.n	80063bc <HAL_TIM_IC_Start_DMA+0x310>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8006142:	7dbb      	ldrb	r3, [r7, #22]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d143      	bne.n	80061d0 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8006148:	7d7b      	ldrb	r3, [r7, #21]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d140      	bne.n	80061d0 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d104      	bne.n	800615e <HAL_TIM_IC_Start_DMA+0xb2>
 8006154:	887b      	ldrh	r3, [r7, #2]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e12e      	b.n	80063bc <HAL_TIM_IC_Start_DMA+0x310>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d104      	bne.n	800616e <HAL_TIM_IC_Start_DMA+0xc2>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2202      	movs	r2, #2
 8006168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800616c:	e013      	b.n	8006196 <HAL_TIM_IC_Start_DMA+0xea>
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2b04      	cmp	r3, #4
 8006172:	d104      	bne.n	800617e <HAL_TIM_IC_Start_DMA+0xd2>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2202      	movs	r2, #2
 8006178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800617c:	e00b      	b.n	8006196 <HAL_TIM_IC_Start_DMA+0xea>
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	2b08      	cmp	r3, #8
 8006182:	d104      	bne.n	800618e <HAL_TIM_IC_Start_DMA+0xe2>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2202      	movs	r2, #2
 8006188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800618c:	e003      	b.n	8006196 <HAL_TIM_IC_Start_DMA+0xea>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2202      	movs	r2, #2
 8006192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d104      	bne.n	80061a6 <HAL_TIM_IC_Start_DMA+0xfa>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2202      	movs	r2, #2
 80061a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 80061a4:	e016      	b.n	80061d4 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	2b04      	cmp	r3, #4
 80061aa:	d104      	bne.n	80061b6 <HAL_TIM_IC_Start_DMA+0x10a>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2202      	movs	r2, #2
 80061b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 80061b4:	e00e      	b.n	80061d4 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	2b08      	cmp	r3, #8
 80061ba:	d104      	bne.n	80061c6 <HAL_TIM_IC_Start_DMA+0x11a>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2202      	movs	r2, #2
 80061c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 80061c4:	e006      	b.n	80061d4 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2202      	movs	r2, #2
 80061ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 80061ce:	e001      	b.n	80061d4 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e0f3      	b.n	80063bc <HAL_TIM_IC_Start_DMA+0x310>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2201      	movs	r2, #1
 80061da:	68b9      	ldr	r1, [r7, #8]
 80061dc:	4618      	mov	r0, r3
 80061de:	f000 fec1 	bl	8006f64 <TIM_CCxChannelCmd>
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	2b0c      	cmp	r3, #12
 80061e6:	f200 80ad 	bhi.w	8006344 <HAL_TIM_IC_Start_DMA+0x298>
 80061ea:	a201      	add	r2, pc, #4	; (adr r2, 80061f0 <HAL_TIM_IC_Start_DMA+0x144>)
 80061ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f0:	08006225 	.word	0x08006225
 80061f4:	08006345 	.word	0x08006345
 80061f8:	08006345 	.word	0x08006345
 80061fc:	08006345 	.word	0x08006345
 8006200:	0800626d 	.word	0x0800626d
 8006204:	08006345 	.word	0x08006345
 8006208:	08006345 	.word	0x08006345
 800620c:	08006345 	.word	0x08006345
 8006210:	080062b5 	.word	0x080062b5
 8006214:	08006345 	.word	0x08006345
 8006218:	08006345 	.word	0x08006345
 800621c:	08006345 	.word	0x08006345
 8006220:	080062fd 	.word	0x080062fd
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006228:	4a66      	ldr	r2, [pc, #408]	; (80063c4 <HAL_TIM_IC_Start_DMA+0x318>)
 800622a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006230:	4a65      	ldr	r2, [pc, #404]	; (80063c8 <HAL_TIM_IC_Start_DMA+0x31c>)
 8006232:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006238:	4a64      	ldr	r2, [pc, #400]	; (80063cc <HAL_TIM_IC_Start_DMA+0x320>)
 800623a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	3334      	adds	r3, #52	; 0x34
 8006246:	4619      	mov	r1, r3
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	887b      	ldrh	r3, [r7, #2]
 800624c:	f7fc fc46 	bl	8002adc <HAL_DMA_Start_IT>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d001      	beq.n	800625a <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e0b0      	b.n	80063bc <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68da      	ldr	r2, [r3, #12]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006268:	60da      	str	r2, [r3, #12]
      break;
 800626a:	e06e      	b.n	800634a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006270:	4a54      	ldr	r2, [pc, #336]	; (80063c4 <HAL_TIM_IC_Start_DMA+0x318>)
 8006272:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006278:	4a53      	ldr	r2, [pc, #332]	; (80063c8 <HAL_TIM_IC_Start_DMA+0x31c>)
 800627a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006280:	4a52      	ldr	r2, [pc, #328]	; (80063cc <HAL_TIM_IC_Start_DMA+0x320>)
 8006282:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	3338      	adds	r3, #56	; 0x38
 800628e:	4619      	mov	r1, r3
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	887b      	ldrh	r3, [r7, #2]
 8006294:	f7fc fc22 	bl	8002adc <HAL_DMA_Start_IT>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d001      	beq.n	80062a2 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e08c      	b.n	80063bc <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68da      	ldr	r2, [r3, #12]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062b0:	60da      	str	r2, [r3, #12]
      break;
 80062b2:	e04a      	b.n	800634a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b8:	4a42      	ldr	r2, [pc, #264]	; (80063c4 <HAL_TIM_IC_Start_DMA+0x318>)
 80062ba:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c0:	4a41      	ldr	r2, [pc, #260]	; (80063c8 <HAL_TIM_IC_Start_DMA+0x31c>)
 80062c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c8:	4a40      	ldr	r2, [pc, #256]	; (80063cc <HAL_TIM_IC_Start_DMA+0x320>)
 80062ca:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	333c      	adds	r3, #60	; 0x3c
 80062d6:	4619      	mov	r1, r3
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	887b      	ldrh	r3, [r7, #2]
 80062dc:	f7fc fbfe 	bl	8002adc <HAL_DMA_Start_IT>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e068      	b.n	80063bc <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68da      	ldr	r2, [r3, #12]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062f8:	60da      	str	r2, [r3, #12]
      break;
 80062fa:	e026      	b.n	800634a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006300:	4a30      	ldr	r2, [pc, #192]	; (80063c4 <HAL_TIM_IC_Start_DMA+0x318>)
 8006302:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006308:	4a2f      	ldr	r2, [pc, #188]	; (80063c8 <HAL_TIM_IC_Start_DMA+0x31c>)
 800630a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006310:	4a2e      	ldr	r2, [pc, #184]	; (80063cc <HAL_TIM_IC_Start_DMA+0x320>)
 8006312:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	3340      	adds	r3, #64	; 0x40
 800631e:	4619      	mov	r1, r3
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	887b      	ldrh	r3, [r7, #2]
 8006324:	f7fc fbda 	bl	8002adc <HAL_DMA_Start_IT>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e044      	b.n	80063bc <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68da      	ldr	r2, [r3, #12]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006340:	60da      	str	r2, [r3, #12]
      break;
 8006342:	e002      	b.n	800634a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	75fb      	strb	r3, [r7, #23]
      break;
 8006348:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a20      	ldr	r2, [pc, #128]	; (80063d0 <HAL_TIM_IC_Start_DMA+0x324>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d018      	beq.n	8006386 <HAL_TIM_IC_Start_DMA+0x2da>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800635c:	d013      	beq.n	8006386 <HAL_TIM_IC_Start_DMA+0x2da>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a1c      	ldr	r2, [pc, #112]	; (80063d4 <HAL_TIM_IC_Start_DMA+0x328>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d00e      	beq.n	8006386 <HAL_TIM_IC_Start_DMA+0x2da>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a1a      	ldr	r2, [pc, #104]	; (80063d8 <HAL_TIM_IC_Start_DMA+0x32c>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d009      	beq.n	8006386 <HAL_TIM_IC_Start_DMA+0x2da>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a19      	ldr	r2, [pc, #100]	; (80063dc <HAL_TIM_IC_Start_DMA+0x330>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d004      	beq.n	8006386 <HAL_TIM_IC_Start_DMA+0x2da>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a17      	ldr	r2, [pc, #92]	; (80063e0 <HAL_TIM_IC_Start_DMA+0x334>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d111      	bne.n	80063aa <HAL_TIM_IC_Start_DMA+0x2fe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f003 0307 	and.w	r3, r3, #7
 8006390:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	2b06      	cmp	r3, #6
 8006396:	d010      	beq.n	80063ba <HAL_TIM_IC_Start_DMA+0x30e>
    {
      __HAL_TIM_ENABLE(htim);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f042 0201 	orr.w	r2, r2, #1
 80063a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063a8:	e007      	b.n	80063ba <HAL_TIM_IC_Start_DMA+0x30e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f042 0201 	orr.w	r2, r2, #1
 80063b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80063ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3718      	adds	r7, #24
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	080069c5 	.word	0x080069c5
 80063c8:	08006a8d 	.word	0x08006a8d
 80063cc:	08006933 	.word	0x08006933
 80063d0:	40010000 	.word	0x40010000
 80063d4:	40000400 	.word	0x40000400
 80063d8:	40000800 	.word	0x40000800
 80063dc:	40000c00 	.word	0x40000c00
 80063e0:	40014000 	.word	0x40014000

080063e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	f003 0302 	and.w	r3, r3, #2
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d122      	bne.n	8006440 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	f003 0302 	and.w	r3, r3, #2
 8006404:	2b02      	cmp	r3, #2
 8006406:	d11b      	bne.n	8006440 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f06f 0202 	mvn.w	r2, #2
 8006410:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	f003 0303 	and.w	r3, r3, #3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d003      	beq.n	800642e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fa51 	bl	80068ce <HAL_TIM_IC_CaptureCallback>
 800642c:	e005      	b.n	800643a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fa43 	bl	80068ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 fa5e 	bl	80068f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	f003 0304 	and.w	r3, r3, #4
 800644a:	2b04      	cmp	r3, #4
 800644c:	d122      	bne.n	8006494 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	f003 0304 	and.w	r3, r3, #4
 8006458:	2b04      	cmp	r3, #4
 800645a:	d11b      	bne.n	8006494 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f06f 0204 	mvn.w	r2, #4
 8006464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2202      	movs	r2, #2
 800646a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006476:	2b00      	cmp	r3, #0
 8006478:	d003      	beq.n	8006482 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fa27 	bl	80068ce <HAL_TIM_IC_CaptureCallback>
 8006480:	e005      	b.n	800648e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 fa19 	bl	80068ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 fa34 	bl	80068f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	f003 0308 	and.w	r3, r3, #8
 800649e:	2b08      	cmp	r3, #8
 80064a0:	d122      	bne.n	80064e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	f003 0308 	and.w	r3, r3, #8
 80064ac:	2b08      	cmp	r3, #8
 80064ae:	d11b      	bne.n	80064e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f06f 0208 	mvn.w	r2, #8
 80064b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2204      	movs	r2, #4
 80064be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	69db      	ldr	r3, [r3, #28]
 80064c6:	f003 0303 	and.w	r3, r3, #3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d003      	beq.n	80064d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f9fd 	bl	80068ce <HAL_TIM_IC_CaptureCallback>
 80064d4:	e005      	b.n	80064e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f9ef 	bl	80068ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 fa0a 	bl	80068f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	f003 0310 	and.w	r3, r3, #16
 80064f2:	2b10      	cmp	r3, #16
 80064f4:	d122      	bne.n	800653c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	f003 0310 	and.w	r3, r3, #16
 8006500:	2b10      	cmp	r3, #16
 8006502:	d11b      	bne.n	800653c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f06f 0210 	mvn.w	r2, #16
 800650c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2208      	movs	r2, #8
 8006512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800651e:	2b00      	cmp	r3, #0
 8006520:	d003      	beq.n	800652a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f9d3 	bl	80068ce <HAL_TIM_IC_CaptureCallback>
 8006528:	e005      	b.n	8006536 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f9c5 	bl	80068ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 f9e0 	bl	80068f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b01      	cmp	r3, #1
 8006548:	d10e      	bne.n	8006568 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	2b01      	cmp	r3, #1
 8006556:	d107      	bne.n	8006568 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f06f 0201 	mvn.w	r2, #1
 8006560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7fb f9c0 	bl	80018e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006572:	2b80      	cmp	r3, #128	; 0x80
 8006574:	d10e      	bne.n	8006594 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006580:	2b80      	cmp	r3, #128	; 0x80
 8006582:	d107      	bne.n	8006594 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800658c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fd86 	bl	80070a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659e:	2b40      	cmp	r3, #64	; 0x40
 80065a0:	d10e      	bne.n	80065c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ac:	2b40      	cmp	r3, #64	; 0x40
 80065ae:	d107      	bne.n	80065c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f9a5 	bl	800690a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	f003 0320 	and.w	r3, r3, #32
 80065ca:	2b20      	cmp	r3, #32
 80065cc:	d10e      	bne.n	80065ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f003 0320 	and.w	r3, r3, #32
 80065d8:	2b20      	cmp	r3, #32
 80065da:	d107      	bne.n	80065ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f06f 0220 	mvn.w	r2, #32
 80065e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 fd50 	bl	800708c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065ec:	bf00      	nop
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006600:	2300      	movs	r3, #0
 8006602:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800660a:	2b01      	cmp	r3, #1
 800660c:	d101      	bne.n	8006612 <HAL_TIM_IC_ConfigChannel+0x1e>
 800660e:	2302      	movs	r3, #2
 8006610:	e088      	b.n	8006724 <HAL_TIM_IC_ConfigChannel+0x130>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d11b      	bne.n	8006658 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6818      	ldr	r0, [r3, #0]
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	6819      	ldr	r1, [r3, #0]
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	f000 fae0 	bl	8006bf4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	699a      	ldr	r2, [r3, #24]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f022 020c 	bic.w	r2, r2, #12
 8006642:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6999      	ldr	r1, [r3, #24]
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	689a      	ldr	r2, [r3, #8]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	430a      	orrs	r2, r1
 8006654:	619a      	str	r2, [r3, #24]
 8006656:	e060      	b.n	800671a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b04      	cmp	r3, #4
 800665c:	d11c      	bne.n	8006698 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6818      	ldr	r0, [r3, #0]
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	6819      	ldr	r1, [r3, #0]
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	685a      	ldr	r2, [r3, #4]
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	f000 fb58 	bl	8006d22 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	699a      	ldr	r2, [r3, #24]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006680:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	6999      	ldr	r1, [r3, #24]
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	021a      	lsls	r2, r3, #8
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	430a      	orrs	r2, r1
 8006694:	619a      	str	r2, [r3, #24]
 8006696:	e040      	b.n	800671a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b08      	cmp	r3, #8
 800669c:	d11b      	bne.n	80066d6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6818      	ldr	r0, [r3, #0]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	6819      	ldr	r1, [r3, #0]
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	f000 fba5 	bl	8006dfc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	69da      	ldr	r2, [r3, #28]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 020c 	bic.w	r2, r2, #12
 80066c0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	69d9      	ldr	r1, [r3, #28]
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	689a      	ldr	r2, [r3, #8]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	430a      	orrs	r2, r1
 80066d2:	61da      	str	r2, [r3, #28]
 80066d4:	e021      	b.n	800671a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b0c      	cmp	r3, #12
 80066da:	d11c      	bne.n	8006716 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6818      	ldr	r0, [r3, #0]
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	6819      	ldr	r1, [r3, #0]
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	685a      	ldr	r2, [r3, #4]
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	f000 fbc2 	bl	8006e74 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	69da      	ldr	r2, [r3, #28]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80066fe:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	69d9      	ldr	r1, [r3, #28]
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	021a      	lsls	r2, r3, #8
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	430a      	orrs	r2, r1
 8006712:	61da      	str	r2, [r3, #28]
 8006714:	e001      	b.n	800671a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006722:	7dfb      	ldrb	r3, [r7, #23]
}
 8006724:	4618      	mov	r0, r3
 8006726:	3718      	adds	r7, #24
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006736:	2300      	movs	r3, #0
 8006738:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006740:	2b01      	cmp	r3, #1
 8006742:	d101      	bne.n	8006748 <HAL_TIM_ConfigClockSource+0x1c>
 8006744:	2302      	movs	r3, #2
 8006746:	e0b4      	b.n	80068b2 <HAL_TIM_ConfigClockSource+0x186>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006766:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800676e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006780:	d03e      	beq.n	8006800 <HAL_TIM_ConfigClockSource+0xd4>
 8006782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006786:	f200 8087 	bhi.w	8006898 <HAL_TIM_ConfigClockSource+0x16c>
 800678a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800678e:	f000 8086 	beq.w	800689e <HAL_TIM_ConfigClockSource+0x172>
 8006792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006796:	d87f      	bhi.n	8006898 <HAL_TIM_ConfigClockSource+0x16c>
 8006798:	2b70      	cmp	r3, #112	; 0x70
 800679a:	d01a      	beq.n	80067d2 <HAL_TIM_ConfigClockSource+0xa6>
 800679c:	2b70      	cmp	r3, #112	; 0x70
 800679e:	d87b      	bhi.n	8006898 <HAL_TIM_ConfigClockSource+0x16c>
 80067a0:	2b60      	cmp	r3, #96	; 0x60
 80067a2:	d050      	beq.n	8006846 <HAL_TIM_ConfigClockSource+0x11a>
 80067a4:	2b60      	cmp	r3, #96	; 0x60
 80067a6:	d877      	bhi.n	8006898 <HAL_TIM_ConfigClockSource+0x16c>
 80067a8:	2b50      	cmp	r3, #80	; 0x50
 80067aa:	d03c      	beq.n	8006826 <HAL_TIM_ConfigClockSource+0xfa>
 80067ac:	2b50      	cmp	r3, #80	; 0x50
 80067ae:	d873      	bhi.n	8006898 <HAL_TIM_ConfigClockSource+0x16c>
 80067b0:	2b40      	cmp	r3, #64	; 0x40
 80067b2:	d058      	beq.n	8006866 <HAL_TIM_ConfigClockSource+0x13a>
 80067b4:	2b40      	cmp	r3, #64	; 0x40
 80067b6:	d86f      	bhi.n	8006898 <HAL_TIM_ConfigClockSource+0x16c>
 80067b8:	2b30      	cmp	r3, #48	; 0x30
 80067ba:	d064      	beq.n	8006886 <HAL_TIM_ConfigClockSource+0x15a>
 80067bc:	2b30      	cmp	r3, #48	; 0x30
 80067be:	d86b      	bhi.n	8006898 <HAL_TIM_ConfigClockSource+0x16c>
 80067c0:	2b20      	cmp	r3, #32
 80067c2:	d060      	beq.n	8006886 <HAL_TIM_ConfigClockSource+0x15a>
 80067c4:	2b20      	cmp	r3, #32
 80067c6:	d867      	bhi.n	8006898 <HAL_TIM_ConfigClockSource+0x16c>
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d05c      	beq.n	8006886 <HAL_TIM_ConfigClockSource+0x15a>
 80067cc:	2b10      	cmp	r3, #16
 80067ce:	d05a      	beq.n	8006886 <HAL_TIM_ConfigClockSource+0x15a>
 80067d0:	e062      	b.n	8006898 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6818      	ldr	r0, [r3, #0]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	6899      	ldr	r1, [r3, #8]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	f000 fb9f 	bl	8006f24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	609a      	str	r2, [r3, #8]
      break;
 80067fe:	e04f      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6818      	ldr	r0, [r3, #0]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	6899      	ldr	r1, [r3, #8]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	685a      	ldr	r2, [r3, #4]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	f000 fb88 	bl	8006f24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689a      	ldr	r2, [r3, #8]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006822:	609a      	str	r2, [r3, #8]
      break;
 8006824:	e03c      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6818      	ldr	r0, [r3, #0]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	6859      	ldr	r1, [r3, #4]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	461a      	mov	r2, r3
 8006834:	f000 fa46 	bl	8006cc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2150      	movs	r1, #80	; 0x50
 800683e:	4618      	mov	r0, r3
 8006840:	f000 fb55 	bl	8006eee <TIM_ITRx_SetConfig>
      break;
 8006844:	e02c      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6818      	ldr	r0, [r3, #0]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	6859      	ldr	r1, [r3, #4]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	461a      	mov	r2, r3
 8006854:	f000 faa2 	bl	8006d9c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2160      	movs	r1, #96	; 0x60
 800685e:	4618      	mov	r0, r3
 8006860:	f000 fb45 	bl	8006eee <TIM_ITRx_SetConfig>
      break;
 8006864:	e01c      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6818      	ldr	r0, [r3, #0]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	6859      	ldr	r1, [r3, #4]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	461a      	mov	r2, r3
 8006874:	f000 fa26 	bl	8006cc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2140      	movs	r1, #64	; 0x40
 800687e:	4618      	mov	r0, r3
 8006880:	f000 fb35 	bl	8006eee <TIM_ITRx_SetConfig>
      break;
 8006884:	e00c      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4619      	mov	r1, r3
 8006890:	4610      	mov	r0, r2
 8006892:	f000 fb2c 	bl	8006eee <TIM_ITRx_SetConfig>
      break;
 8006896:	e003      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	73fb      	strb	r3, [r7, #15]
      break;
 800689c:	e000      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800689e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b083      	sub	sp, #12
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068c2:	bf00      	nop
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b083      	sub	sp, #12
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068d6:	bf00      	nop
 80068d8:	370c      	adds	r7, #12
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80068e2:	b480      	push	{r7}
 80068e4:	b083      	sub	sp, #12
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80068ea:	bf00      	nop
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr

080068f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b083      	sub	sp, #12
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068fe:	bf00      	nop
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800690a:	b480      	push	{r7}
 800690c:	b083      	sub	sp, #12
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006912:	bf00      	nop
 8006914:	370c      	adds	r7, #12
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr

0800691e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800691e:	b480      	push	{r7}
 8006920:	b083      	sub	sp, #12
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006926:	bf00      	nop
 8006928:	370c      	adds	r7, #12
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr

08006932 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b084      	sub	sp, #16
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	429a      	cmp	r2, r3
 8006948:	d107      	bne.n	800695a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2201      	movs	r2, #1
 800694e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006958:	e02a      	b.n	80069b0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	429a      	cmp	r2, r3
 8006962:	d107      	bne.n	8006974 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2202      	movs	r2, #2
 8006968:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006972:	e01d      	b.n	80069b0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	429a      	cmp	r2, r3
 800697c:	d107      	bne.n	800698e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2204      	movs	r2, #4
 8006982:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800698c:	e010      	b.n	80069b0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	429a      	cmp	r2, r3
 8006996:	d107      	bne.n	80069a8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2208      	movs	r2, #8
 800699c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80069a6:	e003      	b.n	80069b0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f7ff ffb4 	bl	800691e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	771a      	strb	r2, [r3, #28]
}
 80069bc:	bf00      	nop
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d10f      	bne.n	80069fc <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2201      	movs	r2, #1
 80069e0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d146      	bne.n	8006a78 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069fa:	e03d      	b.n	8006a78 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d10f      	bne.n	8006a26 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2202      	movs	r2, #2
 8006a0a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	69db      	ldr	r3, [r3, #28]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d131      	bne.n	8006a78 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a24:	e028      	b.n	8006a78 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d10f      	bne.n	8006a50 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2204      	movs	r2, #4
 8006a34:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	69db      	ldr	r3, [r3, #28]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d11c      	bne.n	8006a78 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a4e:	e013      	b.n	8006a78 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d10e      	bne.n	8006a78 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2208      	movs	r2, #8
 8006a5e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	69db      	ldr	r3, [r3, #28]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d107      	bne.n	8006a78 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f7ff ff28 	bl	80068ce <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	771a      	strb	r2, [r3, #28]
}
 8006a84:	bf00      	nop
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a98:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d103      	bne.n	8006aac <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	771a      	strb	r2, [r3, #28]
 8006aaa:	e019      	b.n	8006ae0 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d103      	bne.n	8006abe <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2202      	movs	r2, #2
 8006aba:	771a      	strb	r2, [r3, #28]
 8006abc:	e010      	b.n	8006ae0 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d103      	bne.n	8006ad0 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2204      	movs	r2, #4
 8006acc:	771a      	strb	r2, [r3, #28]
 8006ace:	e007      	b.n	8006ae0 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d102      	bne.n	8006ae0 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2208      	movs	r2, #8
 8006ade:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f7ff fefe 	bl	80068e2 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	771a      	strb	r2, [r3, #28]
}
 8006aec:	bf00      	nop
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b085      	sub	sp, #20
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a34      	ldr	r2, [pc, #208]	; (8006bd8 <TIM_Base_SetConfig+0xe4>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d00f      	beq.n	8006b2c <TIM_Base_SetConfig+0x38>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b12:	d00b      	beq.n	8006b2c <TIM_Base_SetConfig+0x38>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a31      	ldr	r2, [pc, #196]	; (8006bdc <TIM_Base_SetConfig+0xe8>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d007      	beq.n	8006b2c <TIM_Base_SetConfig+0x38>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a30      	ldr	r2, [pc, #192]	; (8006be0 <TIM_Base_SetConfig+0xec>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d003      	beq.n	8006b2c <TIM_Base_SetConfig+0x38>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a2f      	ldr	r2, [pc, #188]	; (8006be4 <TIM_Base_SetConfig+0xf0>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d108      	bne.n	8006b3e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a25      	ldr	r2, [pc, #148]	; (8006bd8 <TIM_Base_SetConfig+0xe4>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d01b      	beq.n	8006b7e <TIM_Base_SetConfig+0x8a>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b4c:	d017      	beq.n	8006b7e <TIM_Base_SetConfig+0x8a>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a22      	ldr	r2, [pc, #136]	; (8006bdc <TIM_Base_SetConfig+0xe8>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d013      	beq.n	8006b7e <TIM_Base_SetConfig+0x8a>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a21      	ldr	r2, [pc, #132]	; (8006be0 <TIM_Base_SetConfig+0xec>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d00f      	beq.n	8006b7e <TIM_Base_SetConfig+0x8a>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a20      	ldr	r2, [pc, #128]	; (8006be4 <TIM_Base_SetConfig+0xf0>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d00b      	beq.n	8006b7e <TIM_Base_SetConfig+0x8a>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a1f      	ldr	r2, [pc, #124]	; (8006be8 <TIM_Base_SetConfig+0xf4>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d007      	beq.n	8006b7e <TIM_Base_SetConfig+0x8a>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a1e      	ldr	r2, [pc, #120]	; (8006bec <TIM_Base_SetConfig+0xf8>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d003      	beq.n	8006b7e <TIM_Base_SetConfig+0x8a>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a1d      	ldr	r2, [pc, #116]	; (8006bf0 <TIM_Base_SetConfig+0xfc>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d108      	bne.n	8006b90 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	695b      	ldr	r3, [r3, #20]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	689a      	ldr	r2, [r3, #8]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a08      	ldr	r2, [pc, #32]	; (8006bd8 <TIM_Base_SetConfig+0xe4>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d103      	bne.n	8006bc4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	691a      	ldr	r2, [r3, #16]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	615a      	str	r2, [r3, #20]
}
 8006bca:	bf00      	nop
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	40010000 	.word	0x40010000
 8006bdc:	40000400 	.word	0x40000400
 8006be0:	40000800 	.word	0x40000800
 8006be4:	40000c00 	.word	0x40000c00
 8006be8:	40014000 	.word	0x40014000
 8006bec:	40014400 	.word	0x40014400
 8006bf0:	40014800 	.word	0x40014800

08006bf4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b087      	sub	sp, #28
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
 8006c00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	f023 0201 	bic.w	r2, r3, #1
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6a1b      	ldr	r3, [r3, #32]
 8006c18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	4a24      	ldr	r2, [pc, #144]	; (8006cb0 <TIM_TI1_SetConfig+0xbc>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d013      	beq.n	8006c4a <TIM_TI1_SetConfig+0x56>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c28:	d00f      	beq.n	8006c4a <TIM_TI1_SetConfig+0x56>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	4a21      	ldr	r2, [pc, #132]	; (8006cb4 <TIM_TI1_SetConfig+0xc0>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d00b      	beq.n	8006c4a <TIM_TI1_SetConfig+0x56>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	4a20      	ldr	r2, [pc, #128]	; (8006cb8 <TIM_TI1_SetConfig+0xc4>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d007      	beq.n	8006c4a <TIM_TI1_SetConfig+0x56>
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	4a1f      	ldr	r2, [pc, #124]	; (8006cbc <TIM_TI1_SetConfig+0xc8>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d003      	beq.n	8006c4a <TIM_TI1_SetConfig+0x56>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	4a1e      	ldr	r2, [pc, #120]	; (8006cc0 <TIM_TI1_SetConfig+0xcc>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d101      	bne.n	8006c4e <TIM_TI1_SetConfig+0x5a>
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e000      	b.n	8006c50 <TIM_TI1_SetConfig+0x5c>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d008      	beq.n	8006c66 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	f023 0303 	bic.w	r3, r3, #3
 8006c5a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006c5c:	697a      	ldr	r2, [r7, #20]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	617b      	str	r3, [r7, #20]
 8006c64:	e003      	b.n	8006c6e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	f043 0301 	orr.w	r3, r3, #1
 8006c6c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	011b      	lsls	r3, r3, #4
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	697a      	ldr	r2, [r7, #20]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	f023 030a 	bic.w	r3, r3, #10
 8006c88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	f003 030a 	and.w	r3, r3, #10
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	621a      	str	r2, [r3, #32]
}
 8006ca2:	bf00      	nop
 8006ca4:	371c      	adds	r7, #28
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	40010000 	.word	0x40010000
 8006cb4:	40000400 	.word	0x40000400
 8006cb8:	40000800 	.word	0x40000800
 8006cbc:	40000c00 	.word	0x40000c00
 8006cc0:	40014000 	.word	0x40014000

08006cc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b087      	sub	sp, #28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6a1b      	ldr	r3, [r3, #32]
 8006cd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6a1b      	ldr	r3, [r3, #32]
 8006cda:	f023 0201 	bic.w	r2, r3, #1
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	011b      	lsls	r3, r3, #4
 8006cf4:	693a      	ldr	r2, [r7, #16]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	f023 030a 	bic.w	r3, r3, #10
 8006d00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	621a      	str	r2, [r3, #32]
}
 8006d16:	bf00      	nop
 8006d18:	371c      	adds	r7, #28
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b087      	sub	sp, #28
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	60f8      	str	r0, [r7, #12]
 8006d2a:	60b9      	str	r1, [r7, #8]
 8006d2c:	607a      	str	r2, [r7, #4]
 8006d2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6a1b      	ldr	r3, [r3, #32]
 8006d34:	f023 0210 	bic.w	r2, r3, #16
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	699b      	ldr	r3, [r3, #24]
 8006d40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6a1b      	ldr	r3, [r3, #32]
 8006d46:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	021b      	lsls	r3, r3, #8
 8006d54:	697a      	ldr	r2, [r7, #20]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	031b      	lsls	r3, r3, #12
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d74:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	011b      	lsls	r3, r3, #4
 8006d7a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	621a      	str	r2, [r3, #32]
}
 8006d90:	bf00      	nop
 8006d92:	371c      	adds	r7, #28
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b087      	sub	sp, #28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6a1b      	ldr	r3, [r3, #32]
 8006dac:	f023 0210 	bic.w	r2, r3, #16
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006dc6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	031b      	lsls	r3, r3, #12
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006dd8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	011b      	lsls	r3, r3, #4
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	621a      	str	r2, [r3, #32]
}
 8006df0:	bf00      	nop
 8006df2:	371c      	adds	r7, #28
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b087      	sub	sp, #28
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
 8006e08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	69db      	ldr	r3, [r3, #28]
 8006e1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	f023 0303 	bic.w	r3, r3, #3
 8006e28:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e38:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	011b      	lsls	r3, r3, #4
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006e4c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	021b      	lsls	r3, r3, #8
 8006e52:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	621a      	str	r2, [r3, #32]
}
 8006e68:	bf00      	nop
 8006e6a:	371c      	adds	r7, #28
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b087      	sub	sp, #28
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
 8006e80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	69db      	ldr	r3, [r3, #28]
 8006e92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6a1b      	ldr	r3, [r3, #32]
 8006e98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ea0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	021b      	lsls	r3, r3, #8
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006eb2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	031b      	lsls	r3, r3, #12
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006ec6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	031b      	lsls	r3, r3, #12
 8006ecc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	693a      	ldr	r2, [r7, #16]
 8006ee0:	621a      	str	r2, [r3, #32]
}
 8006ee2:	bf00      	nop
 8006ee4:	371c      	adds	r7, #28
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr

08006eee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b085      	sub	sp, #20
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
 8006ef6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f06:	683a      	ldr	r2, [r7, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	f043 0307 	orr.w	r3, r3, #7
 8006f10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	609a      	str	r2, [r3, #8]
}
 8006f18:	bf00      	nop
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b087      	sub	sp, #28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
 8006f30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	021a      	lsls	r2, r3, #8
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	431a      	orrs	r2, r3
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	609a      	str	r2, [r3, #8]
}
 8006f58:	bf00      	nop
 8006f5a:	371c      	adds	r7, #28
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b087      	sub	sp, #28
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	f003 031f 	and.w	r3, r3, #31
 8006f76:	2201      	movs	r2, #1
 8006f78:	fa02 f303 	lsl.w	r3, r2, r3
 8006f7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6a1a      	ldr	r2, [r3, #32]
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	43db      	mvns	r3, r3
 8006f86:	401a      	ands	r2, r3
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6a1a      	ldr	r2, [r3, #32]
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	f003 031f 	and.w	r3, r3, #31
 8006f96:	6879      	ldr	r1, [r7, #4]
 8006f98:	fa01 f303 	lsl.w	r3, r1, r3
 8006f9c:	431a      	orrs	r2, r3
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	621a      	str	r2, [r3, #32]
}
 8006fa2:	bf00      	nop
 8006fa4:	371c      	adds	r7, #28
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
	...

08006fb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d101      	bne.n	8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	e050      	b.n	800706a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a1c      	ldr	r2, [pc, #112]	; (8007078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d018      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007014:	d013      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a18      	ldr	r2, [pc, #96]	; (800707c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d00e      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a16      	ldr	r2, [pc, #88]	; (8007080 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d009      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a15      	ldr	r2, [pc, #84]	; (8007084 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d004      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a13      	ldr	r2, [pc, #76]	; (8007088 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d10c      	bne.n	8007058 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007044:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	4313      	orrs	r3, r2
 800704e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	40010000 	.word	0x40010000
 800707c:	40000400 	.word	0x40000400
 8007080:	40000800 	.word	0x40000800
 8007084:	40000c00 	.word	0x40000c00
 8007088:	40014000 	.word	0x40014000

0800708c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070a8:	bf00      	nop
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d101      	bne.n	80070c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e03f      	b.n	8007146 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d106      	bne.n	80070e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7fa fdb2 	bl	8001c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2224      	movs	r2, #36	; 0x24
 80070e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68da      	ldr	r2, [r3, #12]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 fddb 	bl	8007cb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	691a      	ldr	r2, [r3, #16]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800710c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	695a      	ldr	r2, [r3, #20]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800711c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68da      	ldr	r2, [r3, #12]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800712c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2220      	movs	r2, #32
 8007138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2220      	movs	r2, #32
 8007140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3708      	adds	r7, #8
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b08a      	sub	sp, #40	; 0x28
 8007152:	af02      	add	r7, sp, #8
 8007154:	60f8      	str	r0, [r7, #12]
 8007156:	60b9      	str	r1, [r7, #8]
 8007158:	603b      	str	r3, [r7, #0]
 800715a:	4613      	mov	r3, r2
 800715c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800715e:	2300      	movs	r3, #0
 8007160:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b20      	cmp	r3, #32
 800716c:	d17c      	bne.n	8007268 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d002      	beq.n	800717a <HAL_UART_Transmit+0x2c>
 8007174:	88fb      	ldrh	r3, [r7, #6]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d101      	bne.n	800717e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e075      	b.n	800726a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007184:	2b01      	cmp	r3, #1
 8007186:	d101      	bne.n	800718c <HAL_UART_Transmit+0x3e>
 8007188:	2302      	movs	r3, #2
 800718a:	e06e      	b.n	800726a <HAL_UART_Transmit+0x11c>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2221      	movs	r2, #33	; 0x21
 800719e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071a2:	f7fa fedd 	bl	8001f60 <HAL_GetTick>
 80071a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	88fa      	ldrh	r2, [r7, #6]
 80071ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	88fa      	ldrh	r2, [r7, #6]
 80071b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071bc:	d108      	bne.n	80071d0 <HAL_UART_Transmit+0x82>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d104      	bne.n	80071d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80071c6:	2300      	movs	r3, #0
 80071c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	61bb      	str	r3, [r7, #24]
 80071ce:	e003      	b.n	80071d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071d4:	2300      	movs	r3, #0
 80071d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80071e0:	e02a      	b.n	8007238 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	2200      	movs	r2, #0
 80071ea:	2180      	movs	r1, #128	; 0x80
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f000 fb1f 	bl	8007830 <UART_WaitOnFlagUntilTimeout>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d001      	beq.n	80071fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e036      	b.n	800726a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10b      	bne.n	800721a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	881b      	ldrh	r3, [r3, #0]
 8007206:	461a      	mov	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007210:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	3302      	adds	r3, #2
 8007216:	61bb      	str	r3, [r7, #24]
 8007218:	e007      	b.n	800722a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	781a      	ldrb	r2, [r3, #0]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	3301      	adds	r3, #1
 8007228:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800722e:	b29b      	uxth	r3, r3
 8007230:	3b01      	subs	r3, #1
 8007232:	b29a      	uxth	r2, r3
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800723c:	b29b      	uxth	r3, r3
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1cf      	bne.n	80071e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	2200      	movs	r2, #0
 800724a:	2140      	movs	r1, #64	; 0x40
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f000 faef 	bl	8007830 <UART_WaitOnFlagUntilTimeout>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d001      	beq.n	800725c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e006      	b.n	800726a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2220      	movs	r2, #32
 8007260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007264:	2300      	movs	r3, #0
 8007266:	e000      	b.n	800726a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007268:	2302      	movs	r3, #2
  }
}
 800726a:	4618      	mov	r0, r3
 800726c:	3720      	adds	r7, #32
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b084      	sub	sp, #16
 8007276:	af00      	add	r7, sp, #0
 8007278:	60f8      	str	r0, [r7, #12]
 800727a:	60b9      	str	r1, [r7, #8]
 800727c:	4613      	mov	r3, r2
 800727e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007286:	b2db      	uxtb	r3, r3
 8007288:	2b20      	cmp	r3, #32
 800728a:	d11d      	bne.n	80072c8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d002      	beq.n	8007298 <HAL_UART_Receive_IT+0x26>
 8007292:	88fb      	ldrh	r3, [r7, #6]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d101      	bne.n	800729c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e016      	b.n	80072ca <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d101      	bne.n	80072aa <HAL_UART_Receive_IT+0x38>
 80072a6:	2302      	movs	r3, #2
 80072a8:	e00f      	b.n	80072ca <HAL_UART_Receive_IT+0x58>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80072b8:	88fb      	ldrh	r3, [r7, #6]
 80072ba:	461a      	mov	r2, r3
 80072bc:	68b9      	ldr	r1, [r7, #8]
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f000 fb24 	bl	800790c <UART_Start_Receive_IT>
 80072c4:	4603      	mov	r3, r0
 80072c6:	e000      	b.n	80072ca <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80072c8:	2302      	movs	r3, #2
  }
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
	...

080072d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b0ba      	sub	sp, #232	; 0xe8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80072fa:	2300      	movs	r3, #0
 80072fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007300:	2300      	movs	r3, #0
 8007302:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800730a:	f003 030f 	and.w	r3, r3, #15
 800730e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007312:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007316:	2b00      	cmp	r3, #0
 8007318:	d10f      	bne.n	800733a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800731a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800731e:	f003 0320 	and.w	r3, r3, #32
 8007322:	2b00      	cmp	r3, #0
 8007324:	d009      	beq.n	800733a <HAL_UART_IRQHandler+0x66>
 8007326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800732a:	f003 0320 	and.w	r3, r3, #32
 800732e:	2b00      	cmp	r3, #0
 8007330:	d003      	beq.n	800733a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fc03 	bl	8007b3e <UART_Receive_IT>
      return;
 8007338:	e256      	b.n	80077e8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800733a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800733e:	2b00      	cmp	r3, #0
 8007340:	f000 80de 	beq.w	8007500 <HAL_UART_IRQHandler+0x22c>
 8007344:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007348:	f003 0301 	and.w	r3, r3, #1
 800734c:	2b00      	cmp	r3, #0
 800734e:	d106      	bne.n	800735e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007354:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007358:	2b00      	cmp	r3, #0
 800735a:	f000 80d1 	beq.w	8007500 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800735e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007362:	f003 0301 	and.w	r3, r3, #1
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00b      	beq.n	8007382 <HAL_UART_IRQHandler+0xae>
 800736a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800736e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007372:	2b00      	cmp	r3, #0
 8007374:	d005      	beq.n	8007382 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737a:	f043 0201 	orr.w	r2, r3, #1
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007386:	f003 0304 	and.w	r3, r3, #4
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00b      	beq.n	80073a6 <HAL_UART_IRQHandler+0xd2>
 800738e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007392:	f003 0301 	and.w	r3, r3, #1
 8007396:	2b00      	cmp	r3, #0
 8007398:	d005      	beq.n	80073a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739e:	f043 0202 	orr.w	r2, r3, #2
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073aa:	f003 0302 	and.w	r3, r3, #2
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00b      	beq.n	80073ca <HAL_UART_IRQHandler+0xf6>
 80073b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073b6:	f003 0301 	and.w	r3, r3, #1
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d005      	beq.n	80073ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c2:	f043 0204 	orr.w	r2, r3, #4
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80073ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073ce:	f003 0308 	and.w	r3, r3, #8
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d011      	beq.n	80073fa <HAL_UART_IRQHandler+0x126>
 80073d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073da:	f003 0320 	and.w	r3, r3, #32
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d105      	bne.n	80073ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80073e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073e6:	f003 0301 	and.w	r3, r3, #1
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d005      	beq.n	80073fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f2:	f043 0208 	orr.w	r2, r3, #8
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fe:	2b00      	cmp	r3, #0
 8007400:	f000 81ed 	beq.w	80077de <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007408:	f003 0320 	and.w	r3, r3, #32
 800740c:	2b00      	cmp	r3, #0
 800740e:	d008      	beq.n	8007422 <HAL_UART_IRQHandler+0x14e>
 8007410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007414:	f003 0320 	and.w	r3, r3, #32
 8007418:	2b00      	cmp	r3, #0
 800741a:	d002      	beq.n	8007422 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fb8e 	bl	8007b3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	695b      	ldr	r3, [r3, #20]
 8007428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800742c:	2b40      	cmp	r3, #64	; 0x40
 800742e:	bf0c      	ite	eq
 8007430:	2301      	moveq	r3, #1
 8007432:	2300      	movne	r3, #0
 8007434:	b2db      	uxtb	r3, r3
 8007436:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743e:	f003 0308 	and.w	r3, r3, #8
 8007442:	2b00      	cmp	r3, #0
 8007444:	d103      	bne.n	800744e <HAL_UART_IRQHandler+0x17a>
 8007446:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800744a:	2b00      	cmp	r3, #0
 800744c:	d04f      	beq.n	80074ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 fa96 	bl	8007980 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800745e:	2b40      	cmp	r3, #64	; 0x40
 8007460:	d141      	bne.n	80074e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	3314      	adds	r3, #20
 8007468:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007470:	e853 3f00 	ldrex	r3, [r3]
 8007474:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007478:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800747c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007480:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	3314      	adds	r3, #20
 800748a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800748e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007492:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007496:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800749a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800749e:	e841 2300 	strex	r3, r2, [r1]
 80074a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80074a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1d9      	bne.n	8007462 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d013      	beq.n	80074de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ba:	4a7d      	ldr	r2, [pc, #500]	; (80076b0 <HAL_UART_IRQHandler+0x3dc>)
 80074bc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7fb fbd2 	bl	8002c6c <HAL_DMA_Abort_IT>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d016      	beq.n	80074fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80074d8:	4610      	mov	r0, r2
 80074da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074dc:	e00e      	b.n	80074fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f990 	bl	8007804 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074e4:	e00a      	b.n	80074fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f98c 	bl	8007804 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ec:	e006      	b.n	80074fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f988 	bl	8007804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80074fa:	e170      	b.n	80077de <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074fc:	bf00      	nop
    return;
 80074fe:	e16e      	b.n	80077de <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007504:	2b01      	cmp	r3, #1
 8007506:	f040 814a 	bne.w	800779e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800750a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800750e:	f003 0310 	and.w	r3, r3, #16
 8007512:	2b00      	cmp	r3, #0
 8007514:	f000 8143 	beq.w	800779e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800751c:	f003 0310 	and.w	r3, r3, #16
 8007520:	2b00      	cmp	r3, #0
 8007522:	f000 813c 	beq.w	800779e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007526:	2300      	movs	r3, #0
 8007528:	60bb      	str	r3, [r7, #8]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	60bb      	str	r3, [r7, #8]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	60bb      	str	r3, [r7, #8]
 800753a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007546:	2b40      	cmp	r3, #64	; 0x40
 8007548:	f040 80b4 	bne.w	80076b4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007558:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800755c:	2b00      	cmp	r3, #0
 800755e:	f000 8140 	beq.w	80077e2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007566:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800756a:	429a      	cmp	r2, r3
 800756c:	f080 8139 	bcs.w	80077e2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007576:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800757c:	69db      	ldr	r3, [r3, #28]
 800757e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007582:	f000 8088 	beq.w	8007696 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	330c      	adds	r3, #12
 800758c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007590:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007594:	e853 3f00 	ldrex	r3, [r3]
 8007598:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800759c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	330c      	adds	r3, #12
 80075ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80075b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80075b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80075be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80075c2:	e841 2300 	strex	r3, r2, [r1]
 80075c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80075ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1d9      	bne.n	8007586 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	3314      	adds	r3, #20
 80075d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075dc:	e853 3f00 	ldrex	r3, [r3]
 80075e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80075e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075e4:	f023 0301 	bic.w	r3, r3, #1
 80075e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	3314      	adds	r3, #20
 80075f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80075f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80075fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80075fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007602:	e841 2300 	strex	r3, r2, [r1]
 8007606:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007608:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1e1      	bne.n	80075d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	3314      	adds	r3, #20
 8007614:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007616:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007618:	e853 3f00 	ldrex	r3, [r3]
 800761c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800761e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007620:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007624:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	3314      	adds	r3, #20
 800762e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007632:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007634:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007636:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007638:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800763a:	e841 2300 	strex	r3, r2, [r1]
 800763e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007640:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1e3      	bne.n	800760e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2220      	movs	r2, #32
 800764a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	330c      	adds	r3, #12
 800765a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800765e:	e853 3f00 	ldrex	r3, [r3]
 8007662:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007666:	f023 0310 	bic.w	r3, r3, #16
 800766a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	330c      	adds	r3, #12
 8007674:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007678:	65ba      	str	r2, [r7, #88]	; 0x58
 800767a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800767e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007680:	e841 2300 	strex	r3, r2, [r1]
 8007684:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1e3      	bne.n	8007654 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007690:	4618      	mov	r0, r3
 8007692:	f7fb fa7b 	bl	8002b8c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800769e:	b29b      	uxth	r3, r3
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	4619      	mov	r1, r3
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f8b6 	bl	8007818 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80076ac:	e099      	b.n	80077e2 <HAL_UART_IRQHandler+0x50e>
 80076ae:	bf00      	nop
 80076b0:	08007a47 	.word	0x08007a47
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076bc:	b29b      	uxth	r3, r3
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f000 808b 	beq.w	80077e6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80076d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f000 8086 	beq.w	80077e6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	330c      	adds	r3, #12
 80076e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e4:	e853 3f00 	ldrex	r3, [r3]
 80076e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80076ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	330c      	adds	r3, #12
 80076fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80076fe:	647a      	str	r2, [r7, #68]	; 0x44
 8007700:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007702:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007704:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007706:	e841 2300 	strex	r3, r2, [r1]
 800770a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800770c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1e3      	bne.n	80076da <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	3314      	adds	r3, #20
 8007718:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771c:	e853 3f00 	ldrex	r3, [r3]
 8007720:	623b      	str	r3, [r7, #32]
   return(result);
 8007722:	6a3b      	ldr	r3, [r7, #32]
 8007724:	f023 0301 	bic.w	r3, r3, #1
 8007728:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	3314      	adds	r3, #20
 8007732:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007736:	633a      	str	r2, [r7, #48]	; 0x30
 8007738:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800773c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800773e:	e841 2300 	strex	r3, r2, [r1]
 8007742:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1e3      	bne.n	8007712 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2220      	movs	r2, #32
 800774e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	330c      	adds	r3, #12
 800775e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	e853 3f00 	ldrex	r3, [r3]
 8007766:	60fb      	str	r3, [r7, #12]
   return(result);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f023 0310 	bic.w	r3, r3, #16
 800776e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	330c      	adds	r3, #12
 8007778:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800777c:	61fa      	str	r2, [r7, #28]
 800777e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007780:	69b9      	ldr	r1, [r7, #24]
 8007782:	69fa      	ldr	r2, [r7, #28]
 8007784:	e841 2300 	strex	r3, r2, [r1]
 8007788:	617b      	str	r3, [r7, #20]
   return(result);
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1e3      	bne.n	8007758 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007790:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007794:	4619      	mov	r1, r3
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f83e 	bl	8007818 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800779c:	e023      	b.n	80077e6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800779e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d009      	beq.n	80077be <HAL_UART_IRQHandler+0x4ea>
 80077aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d003      	beq.n	80077be <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f959 	bl	8007a6e <UART_Transmit_IT>
    return;
 80077bc:	e014      	b.n	80077e8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80077be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00e      	beq.n	80077e8 <HAL_UART_IRQHandler+0x514>
 80077ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d008      	beq.n	80077e8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f999 	bl	8007b0e <UART_EndTransmit_IT>
    return;
 80077dc:	e004      	b.n	80077e8 <HAL_UART_IRQHandler+0x514>
    return;
 80077de:	bf00      	nop
 80077e0:	e002      	b.n	80077e8 <HAL_UART_IRQHandler+0x514>
      return;
 80077e2:	bf00      	nop
 80077e4:	e000      	b.n	80077e8 <HAL_UART_IRQHandler+0x514>
      return;
 80077e6:	bf00      	nop
  }
}
 80077e8:	37e8      	adds	r7, #232	; 0xe8
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop

080077f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80077f8:	bf00      	nop
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800780c:	bf00      	nop
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	460b      	mov	r3, r1
 8007822:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b090      	sub	sp, #64	; 0x40
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	603b      	str	r3, [r7, #0]
 800783c:	4613      	mov	r3, r2
 800783e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007840:	e050      	b.n	80078e4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007848:	d04c      	beq.n	80078e4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800784a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800784c:	2b00      	cmp	r3, #0
 800784e:	d007      	beq.n	8007860 <UART_WaitOnFlagUntilTimeout+0x30>
 8007850:	f7fa fb86 	bl	8001f60 <HAL_GetTick>
 8007854:	4602      	mov	r2, r0
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800785c:	429a      	cmp	r2, r3
 800785e:	d241      	bcs.n	80078e4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	330c      	adds	r3, #12
 8007866:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786a:	e853 3f00 	ldrex	r3, [r3]
 800786e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007872:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007876:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	330c      	adds	r3, #12
 800787e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007880:	637a      	str	r2, [r7, #52]	; 0x34
 8007882:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007884:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007886:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007888:	e841 2300 	strex	r3, r2, [r1]
 800788c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800788e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007890:	2b00      	cmp	r3, #0
 8007892:	d1e5      	bne.n	8007860 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	3314      	adds	r3, #20
 800789a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	e853 3f00 	ldrex	r3, [r3]
 80078a2:	613b      	str	r3, [r7, #16]
   return(result);
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	f023 0301 	bic.w	r3, r3, #1
 80078aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	3314      	adds	r3, #20
 80078b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078b4:	623a      	str	r2, [r7, #32]
 80078b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b8:	69f9      	ldr	r1, [r7, #28]
 80078ba:	6a3a      	ldr	r2, [r7, #32]
 80078bc:	e841 2300 	strex	r3, r2, [r1]
 80078c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d1e5      	bne.n	8007894 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2220      	movs	r2, #32
 80078cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2220      	movs	r2, #32
 80078d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e00f      	b.n	8007904 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	4013      	ands	r3, r2
 80078ee:	68ba      	ldr	r2, [r7, #8]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	bf0c      	ite	eq
 80078f4:	2301      	moveq	r3, #1
 80078f6:	2300      	movne	r3, #0
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	461a      	mov	r2, r3
 80078fc:	79fb      	ldrb	r3, [r7, #7]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d09f      	beq.n	8007842 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007902:	2300      	movs	r3, #0
}
 8007904:	4618      	mov	r0, r3
 8007906:	3740      	adds	r7, #64	; 0x40
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	4613      	mov	r3, r2
 8007918:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	68ba      	ldr	r2, [r7, #8]
 800791e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	88fa      	ldrh	r2, [r7, #6]
 8007924:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	88fa      	ldrh	r2, [r7, #6]
 800792a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2200      	movs	r2, #0
 8007930:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2222      	movs	r2, #34	; 0x22
 8007936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	68da      	ldr	r2, [r3, #12]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007950:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	695a      	ldr	r2, [r3, #20]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f042 0201 	orr.w	r2, r2, #1
 8007960:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68da      	ldr	r2, [r3, #12]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f042 0220 	orr.w	r2, r2, #32
 8007970:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007980:	b480      	push	{r7}
 8007982:	b095      	sub	sp, #84	; 0x54
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	330c      	adds	r3, #12
 800798e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007992:	e853 3f00 	ldrex	r3, [r3]
 8007996:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800799e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	330c      	adds	r3, #12
 80079a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079a8:	643a      	str	r2, [r7, #64]	; 0x40
 80079aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079b0:	e841 2300 	strex	r3, r2, [r1]
 80079b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1e5      	bne.n	8007988 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	3314      	adds	r3, #20
 80079c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	e853 3f00 	ldrex	r3, [r3]
 80079ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	f023 0301 	bic.w	r3, r3, #1
 80079d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	3314      	adds	r3, #20
 80079da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079e4:	e841 2300 	strex	r3, r2, [r1]
 80079e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1e5      	bne.n	80079bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d119      	bne.n	8007a2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	330c      	adds	r3, #12
 80079fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	e853 3f00 	ldrex	r3, [r3]
 8007a06:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	f023 0310 	bic.w	r3, r3, #16
 8007a0e:	647b      	str	r3, [r7, #68]	; 0x44
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	330c      	adds	r3, #12
 8007a16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a18:	61ba      	str	r2, [r7, #24]
 8007a1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1c:	6979      	ldr	r1, [r7, #20]
 8007a1e:	69ba      	ldr	r2, [r7, #24]
 8007a20:	e841 2300 	strex	r3, r2, [r1]
 8007a24:	613b      	str	r3, [r7, #16]
   return(result);
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d1e5      	bne.n	80079f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2220      	movs	r2, #32
 8007a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007a3a:	bf00      	nop
 8007a3c:	3754      	adds	r7, #84	; 0x54
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr

08007a46 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b084      	sub	sp, #16
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f7ff fecf 	bl	8007804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a66:	bf00      	nop
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b085      	sub	sp, #20
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b21      	cmp	r3, #33	; 0x21
 8007a80:	d13e      	bne.n	8007b00 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a8a:	d114      	bne.n	8007ab6 <UART_Transmit_IT+0x48>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	691b      	ldr	r3, [r3, #16]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d110      	bne.n	8007ab6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6a1b      	ldr	r3, [r3, #32]
 8007a98:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	881b      	ldrh	r3, [r3, #0]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007aa8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a1b      	ldr	r3, [r3, #32]
 8007aae:	1c9a      	adds	r2, r3, #2
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	621a      	str	r2, [r3, #32]
 8007ab4:	e008      	b.n	8007ac8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a1b      	ldr	r3, [r3, #32]
 8007aba:	1c59      	adds	r1, r3, #1
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	6211      	str	r1, [r2, #32]
 8007ac0:	781a      	ldrb	r2, [r3, #0]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10f      	bne.n	8007afc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68da      	ldr	r2, [r3, #12]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007aea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68da      	ldr	r2, [r3, #12]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007afa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	e000      	b.n	8007b02 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007b00:	2302      	movs	r3, #2
  }
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3714      	adds	r7, #20
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b082      	sub	sp, #8
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68da      	ldr	r2, [r3, #12]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2220      	movs	r2, #32
 8007b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f7ff fe5e 	bl	80077f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3708      	adds	r7, #8
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b08c      	sub	sp, #48	; 0x30
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b22      	cmp	r3, #34	; 0x22
 8007b50:	f040 80ab 	bne.w	8007caa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b5c:	d117      	bne.n	8007b8e <UART_Receive_IT+0x50>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d113      	bne.n	8007b8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007b66:	2300      	movs	r3, #0
 8007b68:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b6e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b7c:	b29a      	uxth	r2, r3
 8007b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b86:	1c9a      	adds	r2, r3, #2
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	629a      	str	r2, [r3, #40]	; 0x28
 8007b8c:	e026      	b.n	8007bdc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b92:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007b94:	2300      	movs	r3, #0
 8007b96:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ba0:	d007      	beq.n	8007bb2 <UART_Receive_IT+0x74>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10a      	bne.n	8007bc0 <UART_Receive_IT+0x82>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d106      	bne.n	8007bc0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	b2da      	uxtb	r2, r3
 8007bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bbc:	701a      	strb	r2, [r3, #0]
 8007bbe:	e008      	b.n	8007bd2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bcc:	b2da      	uxtb	r2, r3
 8007bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd6:	1c5a      	adds	r2, r3, #1
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	3b01      	subs	r3, #1
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	4619      	mov	r1, r3
 8007bea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d15a      	bne.n	8007ca6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68da      	ldr	r2, [r3, #12]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f022 0220 	bic.w	r2, r2, #32
 8007bfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68da      	ldr	r2, [r3, #12]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	695a      	ldr	r2, [r3, #20]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f022 0201 	bic.w	r2, r2, #1
 8007c1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2220      	movs	r2, #32
 8007c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d135      	bne.n	8007c9c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	330c      	adds	r3, #12
 8007c3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	e853 3f00 	ldrex	r3, [r3]
 8007c44:	613b      	str	r3, [r7, #16]
   return(result);
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	f023 0310 	bic.w	r3, r3, #16
 8007c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	330c      	adds	r3, #12
 8007c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c56:	623a      	str	r2, [r7, #32]
 8007c58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5a:	69f9      	ldr	r1, [r7, #28]
 8007c5c:	6a3a      	ldr	r2, [r7, #32]
 8007c5e:	e841 2300 	strex	r3, r2, [r1]
 8007c62:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1e5      	bne.n	8007c36 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 0310 	and.w	r3, r3, #16
 8007c74:	2b10      	cmp	r3, #16
 8007c76:	d10a      	bne.n	8007c8e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c78:	2300      	movs	r3, #0
 8007c7a:	60fb      	str	r3, [r7, #12]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	60fb      	str	r3, [r7, #12]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	60fb      	str	r3, [r7, #12]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c92:	4619      	mov	r1, r3
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f7ff fdbf 	bl	8007818 <HAL_UARTEx_RxEventCallback>
 8007c9a:	e002      	b.n	8007ca2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f7f9 fcc5 	bl	800162c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	e002      	b.n	8007cac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	e000      	b.n	8007cac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007caa:	2302      	movs	r3, #2
  }
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3730      	adds	r7, #48	; 0x30
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb8:	b09f      	sub	sp, #124	; 0x7c
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cca:	68d9      	ldr	r1, [r3, #12]
 8007ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	ea40 0301 	orr.w	r3, r0, r1
 8007cd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cd8:	689a      	ldr	r2, [r3, #8]
 8007cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	431a      	orrs	r2, r3
 8007ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ce2:	695b      	ldr	r3, [r3, #20]
 8007ce4:	431a      	orrs	r2, r3
 8007ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ce8:	69db      	ldr	r3, [r3, #28]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007cf8:	f021 010c 	bic.w	r1, r1, #12
 8007cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d02:	430b      	orrs	r3, r1
 8007d04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	695b      	ldr	r3, [r3, #20]
 8007d0c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d12:	6999      	ldr	r1, [r3, #24]
 8007d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	ea40 0301 	orr.w	r3, r0, r1
 8007d1c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	4bc5      	ldr	r3, [pc, #788]	; (8008038 <UART_SetConfig+0x384>)
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d004      	beq.n	8007d32 <UART_SetConfig+0x7e>
 8007d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	4bc3      	ldr	r3, [pc, #780]	; (800803c <UART_SetConfig+0x388>)
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d103      	bne.n	8007d3a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d32:	f7fd ffb9 	bl	8005ca8 <HAL_RCC_GetPCLK2Freq>
 8007d36:	6778      	str	r0, [r7, #116]	; 0x74
 8007d38:	e002      	b.n	8007d40 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d3a:	f7fd ffa1 	bl	8005c80 <HAL_RCC_GetPCLK1Freq>
 8007d3e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d42:	69db      	ldr	r3, [r3, #28]
 8007d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d48:	f040 80b6 	bne.w	8007eb8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d4e:	461c      	mov	r4, r3
 8007d50:	f04f 0500 	mov.w	r5, #0
 8007d54:	4622      	mov	r2, r4
 8007d56:	462b      	mov	r3, r5
 8007d58:	1891      	adds	r1, r2, r2
 8007d5a:	6439      	str	r1, [r7, #64]	; 0x40
 8007d5c:	415b      	adcs	r3, r3
 8007d5e:	647b      	str	r3, [r7, #68]	; 0x44
 8007d60:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007d64:	1912      	adds	r2, r2, r4
 8007d66:	eb45 0303 	adc.w	r3, r5, r3
 8007d6a:	f04f 0000 	mov.w	r0, #0
 8007d6e:	f04f 0100 	mov.w	r1, #0
 8007d72:	00d9      	lsls	r1, r3, #3
 8007d74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d78:	00d0      	lsls	r0, r2, #3
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	1911      	adds	r1, r2, r4
 8007d80:	6639      	str	r1, [r7, #96]	; 0x60
 8007d82:	416b      	adcs	r3, r5
 8007d84:	667b      	str	r3, [r7, #100]	; 0x64
 8007d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	f04f 0300 	mov.w	r3, #0
 8007d90:	1891      	adds	r1, r2, r2
 8007d92:	63b9      	str	r1, [r7, #56]	; 0x38
 8007d94:	415b      	adcs	r3, r3
 8007d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007d9c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007da0:	f7f8 fe64 	bl	8000a6c <__aeabi_uldivmod>
 8007da4:	4602      	mov	r2, r0
 8007da6:	460b      	mov	r3, r1
 8007da8:	4ba5      	ldr	r3, [pc, #660]	; (8008040 <UART_SetConfig+0x38c>)
 8007daa:	fba3 2302 	umull	r2, r3, r3, r2
 8007dae:	095b      	lsrs	r3, r3, #5
 8007db0:	011e      	lsls	r6, r3, #4
 8007db2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007db4:	461c      	mov	r4, r3
 8007db6:	f04f 0500 	mov.w	r5, #0
 8007dba:	4622      	mov	r2, r4
 8007dbc:	462b      	mov	r3, r5
 8007dbe:	1891      	adds	r1, r2, r2
 8007dc0:	6339      	str	r1, [r7, #48]	; 0x30
 8007dc2:	415b      	adcs	r3, r3
 8007dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8007dc6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007dca:	1912      	adds	r2, r2, r4
 8007dcc:	eb45 0303 	adc.w	r3, r5, r3
 8007dd0:	f04f 0000 	mov.w	r0, #0
 8007dd4:	f04f 0100 	mov.w	r1, #0
 8007dd8:	00d9      	lsls	r1, r3, #3
 8007dda:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007dde:	00d0      	lsls	r0, r2, #3
 8007de0:	4602      	mov	r2, r0
 8007de2:	460b      	mov	r3, r1
 8007de4:	1911      	adds	r1, r2, r4
 8007de6:	65b9      	str	r1, [r7, #88]	; 0x58
 8007de8:	416b      	adcs	r3, r5
 8007dea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	461a      	mov	r2, r3
 8007df2:	f04f 0300 	mov.w	r3, #0
 8007df6:	1891      	adds	r1, r2, r2
 8007df8:	62b9      	str	r1, [r7, #40]	; 0x28
 8007dfa:	415b      	adcs	r3, r3
 8007dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e02:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007e06:	f7f8 fe31 	bl	8000a6c <__aeabi_uldivmod>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	4b8c      	ldr	r3, [pc, #560]	; (8008040 <UART_SetConfig+0x38c>)
 8007e10:	fba3 1302 	umull	r1, r3, r3, r2
 8007e14:	095b      	lsrs	r3, r3, #5
 8007e16:	2164      	movs	r1, #100	; 0x64
 8007e18:	fb01 f303 	mul.w	r3, r1, r3
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	00db      	lsls	r3, r3, #3
 8007e20:	3332      	adds	r3, #50	; 0x32
 8007e22:	4a87      	ldr	r2, [pc, #540]	; (8008040 <UART_SetConfig+0x38c>)
 8007e24:	fba2 2303 	umull	r2, r3, r2, r3
 8007e28:	095b      	lsrs	r3, r3, #5
 8007e2a:	005b      	lsls	r3, r3, #1
 8007e2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e30:	441e      	add	r6, r3
 8007e32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e34:	4618      	mov	r0, r3
 8007e36:	f04f 0100 	mov.w	r1, #0
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	1894      	adds	r4, r2, r2
 8007e40:	623c      	str	r4, [r7, #32]
 8007e42:	415b      	adcs	r3, r3
 8007e44:	627b      	str	r3, [r7, #36]	; 0x24
 8007e46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e4a:	1812      	adds	r2, r2, r0
 8007e4c:	eb41 0303 	adc.w	r3, r1, r3
 8007e50:	f04f 0400 	mov.w	r4, #0
 8007e54:	f04f 0500 	mov.w	r5, #0
 8007e58:	00dd      	lsls	r5, r3, #3
 8007e5a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007e5e:	00d4      	lsls	r4, r2, #3
 8007e60:	4622      	mov	r2, r4
 8007e62:	462b      	mov	r3, r5
 8007e64:	1814      	adds	r4, r2, r0
 8007e66:	653c      	str	r4, [r7, #80]	; 0x50
 8007e68:	414b      	adcs	r3, r1
 8007e6a:	657b      	str	r3, [r7, #84]	; 0x54
 8007e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	461a      	mov	r2, r3
 8007e72:	f04f 0300 	mov.w	r3, #0
 8007e76:	1891      	adds	r1, r2, r2
 8007e78:	61b9      	str	r1, [r7, #24]
 8007e7a:	415b      	adcs	r3, r3
 8007e7c:	61fb      	str	r3, [r7, #28]
 8007e7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e82:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007e86:	f7f8 fdf1 	bl	8000a6c <__aeabi_uldivmod>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	4b6c      	ldr	r3, [pc, #432]	; (8008040 <UART_SetConfig+0x38c>)
 8007e90:	fba3 1302 	umull	r1, r3, r3, r2
 8007e94:	095b      	lsrs	r3, r3, #5
 8007e96:	2164      	movs	r1, #100	; 0x64
 8007e98:	fb01 f303 	mul.w	r3, r1, r3
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	00db      	lsls	r3, r3, #3
 8007ea0:	3332      	adds	r3, #50	; 0x32
 8007ea2:	4a67      	ldr	r2, [pc, #412]	; (8008040 <UART_SetConfig+0x38c>)
 8007ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ea8:	095b      	lsrs	r3, r3, #5
 8007eaa:	f003 0207 	and.w	r2, r3, #7
 8007eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4432      	add	r2, r6
 8007eb4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007eb6:	e0b9      	b.n	800802c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007eb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007eba:	461c      	mov	r4, r3
 8007ebc:	f04f 0500 	mov.w	r5, #0
 8007ec0:	4622      	mov	r2, r4
 8007ec2:	462b      	mov	r3, r5
 8007ec4:	1891      	adds	r1, r2, r2
 8007ec6:	6139      	str	r1, [r7, #16]
 8007ec8:	415b      	adcs	r3, r3
 8007eca:	617b      	str	r3, [r7, #20]
 8007ecc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007ed0:	1912      	adds	r2, r2, r4
 8007ed2:	eb45 0303 	adc.w	r3, r5, r3
 8007ed6:	f04f 0000 	mov.w	r0, #0
 8007eda:	f04f 0100 	mov.w	r1, #0
 8007ede:	00d9      	lsls	r1, r3, #3
 8007ee0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ee4:	00d0      	lsls	r0, r2, #3
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	460b      	mov	r3, r1
 8007eea:	eb12 0804 	adds.w	r8, r2, r4
 8007eee:	eb43 0905 	adc.w	r9, r3, r5
 8007ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f04f 0100 	mov.w	r1, #0
 8007efc:	f04f 0200 	mov.w	r2, #0
 8007f00:	f04f 0300 	mov.w	r3, #0
 8007f04:	008b      	lsls	r3, r1, #2
 8007f06:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007f0a:	0082      	lsls	r2, r0, #2
 8007f0c:	4640      	mov	r0, r8
 8007f0e:	4649      	mov	r1, r9
 8007f10:	f7f8 fdac 	bl	8000a6c <__aeabi_uldivmod>
 8007f14:	4602      	mov	r2, r0
 8007f16:	460b      	mov	r3, r1
 8007f18:	4b49      	ldr	r3, [pc, #292]	; (8008040 <UART_SetConfig+0x38c>)
 8007f1a:	fba3 2302 	umull	r2, r3, r3, r2
 8007f1e:	095b      	lsrs	r3, r3, #5
 8007f20:	011e      	lsls	r6, r3, #4
 8007f22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f24:	4618      	mov	r0, r3
 8007f26:	f04f 0100 	mov.w	r1, #0
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	1894      	adds	r4, r2, r2
 8007f30:	60bc      	str	r4, [r7, #8]
 8007f32:	415b      	adcs	r3, r3
 8007f34:	60fb      	str	r3, [r7, #12]
 8007f36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f3a:	1812      	adds	r2, r2, r0
 8007f3c:	eb41 0303 	adc.w	r3, r1, r3
 8007f40:	f04f 0400 	mov.w	r4, #0
 8007f44:	f04f 0500 	mov.w	r5, #0
 8007f48:	00dd      	lsls	r5, r3, #3
 8007f4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007f4e:	00d4      	lsls	r4, r2, #3
 8007f50:	4622      	mov	r2, r4
 8007f52:	462b      	mov	r3, r5
 8007f54:	1814      	adds	r4, r2, r0
 8007f56:	64bc      	str	r4, [r7, #72]	; 0x48
 8007f58:	414b      	adcs	r3, r1
 8007f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	4618      	mov	r0, r3
 8007f62:	f04f 0100 	mov.w	r1, #0
 8007f66:	f04f 0200 	mov.w	r2, #0
 8007f6a:	f04f 0300 	mov.w	r3, #0
 8007f6e:	008b      	lsls	r3, r1, #2
 8007f70:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007f74:	0082      	lsls	r2, r0, #2
 8007f76:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007f7a:	f7f8 fd77 	bl	8000a6c <__aeabi_uldivmod>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	460b      	mov	r3, r1
 8007f82:	4b2f      	ldr	r3, [pc, #188]	; (8008040 <UART_SetConfig+0x38c>)
 8007f84:	fba3 1302 	umull	r1, r3, r3, r2
 8007f88:	095b      	lsrs	r3, r3, #5
 8007f8a:	2164      	movs	r1, #100	; 0x64
 8007f8c:	fb01 f303 	mul.w	r3, r1, r3
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	011b      	lsls	r3, r3, #4
 8007f94:	3332      	adds	r3, #50	; 0x32
 8007f96:	4a2a      	ldr	r2, [pc, #168]	; (8008040 <UART_SetConfig+0x38c>)
 8007f98:	fba2 2303 	umull	r2, r3, r2, r3
 8007f9c:	095b      	lsrs	r3, r3, #5
 8007f9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fa2:	441e      	add	r6, r3
 8007fa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f04f 0100 	mov.w	r1, #0
 8007fac:	4602      	mov	r2, r0
 8007fae:	460b      	mov	r3, r1
 8007fb0:	1894      	adds	r4, r2, r2
 8007fb2:	603c      	str	r4, [r7, #0]
 8007fb4:	415b      	adcs	r3, r3
 8007fb6:	607b      	str	r3, [r7, #4]
 8007fb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fbc:	1812      	adds	r2, r2, r0
 8007fbe:	eb41 0303 	adc.w	r3, r1, r3
 8007fc2:	f04f 0400 	mov.w	r4, #0
 8007fc6:	f04f 0500 	mov.w	r5, #0
 8007fca:	00dd      	lsls	r5, r3, #3
 8007fcc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007fd0:	00d4      	lsls	r4, r2, #3
 8007fd2:	4622      	mov	r2, r4
 8007fd4:	462b      	mov	r3, r5
 8007fd6:	eb12 0a00 	adds.w	sl, r2, r0
 8007fda:	eb43 0b01 	adc.w	fp, r3, r1
 8007fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f04f 0100 	mov.w	r1, #0
 8007fe8:	f04f 0200 	mov.w	r2, #0
 8007fec:	f04f 0300 	mov.w	r3, #0
 8007ff0:	008b      	lsls	r3, r1, #2
 8007ff2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007ff6:	0082      	lsls	r2, r0, #2
 8007ff8:	4650      	mov	r0, sl
 8007ffa:	4659      	mov	r1, fp
 8007ffc:	f7f8 fd36 	bl	8000a6c <__aeabi_uldivmod>
 8008000:	4602      	mov	r2, r0
 8008002:	460b      	mov	r3, r1
 8008004:	4b0e      	ldr	r3, [pc, #56]	; (8008040 <UART_SetConfig+0x38c>)
 8008006:	fba3 1302 	umull	r1, r3, r3, r2
 800800a:	095b      	lsrs	r3, r3, #5
 800800c:	2164      	movs	r1, #100	; 0x64
 800800e:	fb01 f303 	mul.w	r3, r1, r3
 8008012:	1ad3      	subs	r3, r2, r3
 8008014:	011b      	lsls	r3, r3, #4
 8008016:	3332      	adds	r3, #50	; 0x32
 8008018:	4a09      	ldr	r2, [pc, #36]	; (8008040 <UART_SetConfig+0x38c>)
 800801a:	fba2 2303 	umull	r2, r3, r2, r3
 800801e:	095b      	lsrs	r3, r3, #5
 8008020:	f003 020f 	and.w	r2, r3, #15
 8008024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4432      	add	r2, r6
 800802a:	609a      	str	r2, [r3, #8]
}
 800802c:	bf00      	nop
 800802e:	377c      	adds	r7, #124	; 0x7c
 8008030:	46bd      	mov	sp, r7
 8008032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008036:	bf00      	nop
 8008038:	40011000 	.word	0x40011000
 800803c:	40011400 	.word	0x40011400
 8008040:	51eb851f 	.word	0x51eb851f

08008044 <__errno>:
 8008044:	4b01      	ldr	r3, [pc, #4]	; (800804c <__errno+0x8>)
 8008046:	6818      	ldr	r0, [r3, #0]
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	20000104 	.word	0x20000104

08008050 <__libc_init_array>:
 8008050:	b570      	push	{r4, r5, r6, lr}
 8008052:	4d0d      	ldr	r5, [pc, #52]	; (8008088 <__libc_init_array+0x38>)
 8008054:	4c0d      	ldr	r4, [pc, #52]	; (800808c <__libc_init_array+0x3c>)
 8008056:	1b64      	subs	r4, r4, r5
 8008058:	10a4      	asrs	r4, r4, #2
 800805a:	2600      	movs	r6, #0
 800805c:	42a6      	cmp	r6, r4
 800805e:	d109      	bne.n	8008074 <__libc_init_array+0x24>
 8008060:	4d0b      	ldr	r5, [pc, #44]	; (8008090 <__libc_init_array+0x40>)
 8008062:	4c0c      	ldr	r4, [pc, #48]	; (8008094 <__libc_init_array+0x44>)
 8008064:	f000 fc4e 	bl	8008904 <_init>
 8008068:	1b64      	subs	r4, r4, r5
 800806a:	10a4      	asrs	r4, r4, #2
 800806c:	2600      	movs	r6, #0
 800806e:	42a6      	cmp	r6, r4
 8008070:	d105      	bne.n	800807e <__libc_init_array+0x2e>
 8008072:	bd70      	pop	{r4, r5, r6, pc}
 8008074:	f855 3b04 	ldr.w	r3, [r5], #4
 8008078:	4798      	blx	r3
 800807a:	3601      	adds	r6, #1
 800807c:	e7ee      	b.n	800805c <__libc_init_array+0xc>
 800807e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008082:	4798      	blx	r3
 8008084:	3601      	adds	r6, #1
 8008086:	e7f2      	b.n	800806e <__libc_init_array+0x1e>
 8008088:	080089fc 	.word	0x080089fc
 800808c:	080089fc 	.word	0x080089fc
 8008090:	080089fc 	.word	0x080089fc
 8008094:	08008a00 	.word	0x08008a00

08008098 <memset>:
 8008098:	4402      	add	r2, r0
 800809a:	4603      	mov	r3, r0
 800809c:	4293      	cmp	r3, r2
 800809e:	d100      	bne.n	80080a2 <memset+0xa>
 80080a0:	4770      	bx	lr
 80080a2:	f803 1b01 	strb.w	r1, [r3], #1
 80080a6:	e7f9      	b.n	800809c <memset+0x4>

080080a8 <siprintf>:
 80080a8:	b40e      	push	{r1, r2, r3}
 80080aa:	b500      	push	{lr}
 80080ac:	b09c      	sub	sp, #112	; 0x70
 80080ae:	ab1d      	add	r3, sp, #116	; 0x74
 80080b0:	9002      	str	r0, [sp, #8]
 80080b2:	9006      	str	r0, [sp, #24]
 80080b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80080b8:	4809      	ldr	r0, [pc, #36]	; (80080e0 <siprintf+0x38>)
 80080ba:	9107      	str	r1, [sp, #28]
 80080bc:	9104      	str	r1, [sp, #16]
 80080be:	4909      	ldr	r1, [pc, #36]	; (80080e4 <siprintf+0x3c>)
 80080c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80080c4:	9105      	str	r1, [sp, #20]
 80080c6:	6800      	ldr	r0, [r0, #0]
 80080c8:	9301      	str	r3, [sp, #4]
 80080ca:	a902      	add	r1, sp, #8
 80080cc:	f000 f868 	bl	80081a0 <_svfiprintf_r>
 80080d0:	9b02      	ldr	r3, [sp, #8]
 80080d2:	2200      	movs	r2, #0
 80080d4:	701a      	strb	r2, [r3, #0]
 80080d6:	b01c      	add	sp, #112	; 0x70
 80080d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80080dc:	b003      	add	sp, #12
 80080de:	4770      	bx	lr
 80080e0:	20000104 	.word	0x20000104
 80080e4:	ffff0208 	.word	0xffff0208

080080e8 <__ssputs_r>:
 80080e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080ec:	688e      	ldr	r6, [r1, #8]
 80080ee:	429e      	cmp	r6, r3
 80080f0:	4682      	mov	sl, r0
 80080f2:	460c      	mov	r4, r1
 80080f4:	4690      	mov	r8, r2
 80080f6:	461f      	mov	r7, r3
 80080f8:	d838      	bhi.n	800816c <__ssputs_r+0x84>
 80080fa:	898a      	ldrh	r2, [r1, #12]
 80080fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008100:	d032      	beq.n	8008168 <__ssputs_r+0x80>
 8008102:	6825      	ldr	r5, [r4, #0]
 8008104:	6909      	ldr	r1, [r1, #16]
 8008106:	eba5 0901 	sub.w	r9, r5, r1
 800810a:	6965      	ldr	r5, [r4, #20]
 800810c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008110:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008114:	3301      	adds	r3, #1
 8008116:	444b      	add	r3, r9
 8008118:	106d      	asrs	r5, r5, #1
 800811a:	429d      	cmp	r5, r3
 800811c:	bf38      	it	cc
 800811e:	461d      	movcc	r5, r3
 8008120:	0553      	lsls	r3, r2, #21
 8008122:	d531      	bpl.n	8008188 <__ssputs_r+0xa0>
 8008124:	4629      	mov	r1, r5
 8008126:	f000 fb47 	bl	80087b8 <_malloc_r>
 800812a:	4606      	mov	r6, r0
 800812c:	b950      	cbnz	r0, 8008144 <__ssputs_r+0x5c>
 800812e:	230c      	movs	r3, #12
 8008130:	f8ca 3000 	str.w	r3, [sl]
 8008134:	89a3      	ldrh	r3, [r4, #12]
 8008136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800813a:	81a3      	strh	r3, [r4, #12]
 800813c:	f04f 30ff 	mov.w	r0, #4294967295
 8008140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008144:	6921      	ldr	r1, [r4, #16]
 8008146:	464a      	mov	r2, r9
 8008148:	f000 fabe 	bl	80086c8 <memcpy>
 800814c:	89a3      	ldrh	r3, [r4, #12]
 800814e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008156:	81a3      	strh	r3, [r4, #12]
 8008158:	6126      	str	r6, [r4, #16]
 800815a:	6165      	str	r5, [r4, #20]
 800815c:	444e      	add	r6, r9
 800815e:	eba5 0509 	sub.w	r5, r5, r9
 8008162:	6026      	str	r6, [r4, #0]
 8008164:	60a5      	str	r5, [r4, #8]
 8008166:	463e      	mov	r6, r7
 8008168:	42be      	cmp	r6, r7
 800816a:	d900      	bls.n	800816e <__ssputs_r+0x86>
 800816c:	463e      	mov	r6, r7
 800816e:	4632      	mov	r2, r6
 8008170:	6820      	ldr	r0, [r4, #0]
 8008172:	4641      	mov	r1, r8
 8008174:	f000 fab6 	bl	80086e4 <memmove>
 8008178:	68a3      	ldr	r3, [r4, #8]
 800817a:	6822      	ldr	r2, [r4, #0]
 800817c:	1b9b      	subs	r3, r3, r6
 800817e:	4432      	add	r2, r6
 8008180:	60a3      	str	r3, [r4, #8]
 8008182:	6022      	str	r2, [r4, #0]
 8008184:	2000      	movs	r0, #0
 8008186:	e7db      	b.n	8008140 <__ssputs_r+0x58>
 8008188:	462a      	mov	r2, r5
 800818a:	f000 fb6f 	bl	800886c <_realloc_r>
 800818e:	4606      	mov	r6, r0
 8008190:	2800      	cmp	r0, #0
 8008192:	d1e1      	bne.n	8008158 <__ssputs_r+0x70>
 8008194:	6921      	ldr	r1, [r4, #16]
 8008196:	4650      	mov	r0, sl
 8008198:	f000 fabe 	bl	8008718 <_free_r>
 800819c:	e7c7      	b.n	800812e <__ssputs_r+0x46>
	...

080081a0 <_svfiprintf_r>:
 80081a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a4:	4698      	mov	r8, r3
 80081a6:	898b      	ldrh	r3, [r1, #12]
 80081a8:	061b      	lsls	r3, r3, #24
 80081aa:	b09d      	sub	sp, #116	; 0x74
 80081ac:	4607      	mov	r7, r0
 80081ae:	460d      	mov	r5, r1
 80081b0:	4614      	mov	r4, r2
 80081b2:	d50e      	bpl.n	80081d2 <_svfiprintf_r+0x32>
 80081b4:	690b      	ldr	r3, [r1, #16]
 80081b6:	b963      	cbnz	r3, 80081d2 <_svfiprintf_r+0x32>
 80081b8:	2140      	movs	r1, #64	; 0x40
 80081ba:	f000 fafd 	bl	80087b8 <_malloc_r>
 80081be:	6028      	str	r0, [r5, #0]
 80081c0:	6128      	str	r0, [r5, #16]
 80081c2:	b920      	cbnz	r0, 80081ce <_svfiprintf_r+0x2e>
 80081c4:	230c      	movs	r3, #12
 80081c6:	603b      	str	r3, [r7, #0]
 80081c8:	f04f 30ff 	mov.w	r0, #4294967295
 80081cc:	e0d1      	b.n	8008372 <_svfiprintf_r+0x1d2>
 80081ce:	2340      	movs	r3, #64	; 0x40
 80081d0:	616b      	str	r3, [r5, #20]
 80081d2:	2300      	movs	r3, #0
 80081d4:	9309      	str	r3, [sp, #36]	; 0x24
 80081d6:	2320      	movs	r3, #32
 80081d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80081e0:	2330      	movs	r3, #48	; 0x30
 80081e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800838c <_svfiprintf_r+0x1ec>
 80081e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081ea:	f04f 0901 	mov.w	r9, #1
 80081ee:	4623      	mov	r3, r4
 80081f0:	469a      	mov	sl, r3
 80081f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081f6:	b10a      	cbz	r2, 80081fc <_svfiprintf_r+0x5c>
 80081f8:	2a25      	cmp	r2, #37	; 0x25
 80081fa:	d1f9      	bne.n	80081f0 <_svfiprintf_r+0x50>
 80081fc:	ebba 0b04 	subs.w	fp, sl, r4
 8008200:	d00b      	beq.n	800821a <_svfiprintf_r+0x7a>
 8008202:	465b      	mov	r3, fp
 8008204:	4622      	mov	r2, r4
 8008206:	4629      	mov	r1, r5
 8008208:	4638      	mov	r0, r7
 800820a:	f7ff ff6d 	bl	80080e8 <__ssputs_r>
 800820e:	3001      	adds	r0, #1
 8008210:	f000 80aa 	beq.w	8008368 <_svfiprintf_r+0x1c8>
 8008214:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008216:	445a      	add	r2, fp
 8008218:	9209      	str	r2, [sp, #36]	; 0x24
 800821a:	f89a 3000 	ldrb.w	r3, [sl]
 800821e:	2b00      	cmp	r3, #0
 8008220:	f000 80a2 	beq.w	8008368 <_svfiprintf_r+0x1c8>
 8008224:	2300      	movs	r3, #0
 8008226:	f04f 32ff 	mov.w	r2, #4294967295
 800822a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800822e:	f10a 0a01 	add.w	sl, sl, #1
 8008232:	9304      	str	r3, [sp, #16]
 8008234:	9307      	str	r3, [sp, #28]
 8008236:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800823a:	931a      	str	r3, [sp, #104]	; 0x68
 800823c:	4654      	mov	r4, sl
 800823e:	2205      	movs	r2, #5
 8008240:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008244:	4851      	ldr	r0, [pc, #324]	; (800838c <_svfiprintf_r+0x1ec>)
 8008246:	f7f7 ffd3 	bl	80001f0 <memchr>
 800824a:	9a04      	ldr	r2, [sp, #16]
 800824c:	b9d8      	cbnz	r0, 8008286 <_svfiprintf_r+0xe6>
 800824e:	06d0      	lsls	r0, r2, #27
 8008250:	bf44      	itt	mi
 8008252:	2320      	movmi	r3, #32
 8008254:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008258:	0711      	lsls	r1, r2, #28
 800825a:	bf44      	itt	mi
 800825c:	232b      	movmi	r3, #43	; 0x2b
 800825e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008262:	f89a 3000 	ldrb.w	r3, [sl]
 8008266:	2b2a      	cmp	r3, #42	; 0x2a
 8008268:	d015      	beq.n	8008296 <_svfiprintf_r+0xf6>
 800826a:	9a07      	ldr	r2, [sp, #28]
 800826c:	4654      	mov	r4, sl
 800826e:	2000      	movs	r0, #0
 8008270:	f04f 0c0a 	mov.w	ip, #10
 8008274:	4621      	mov	r1, r4
 8008276:	f811 3b01 	ldrb.w	r3, [r1], #1
 800827a:	3b30      	subs	r3, #48	; 0x30
 800827c:	2b09      	cmp	r3, #9
 800827e:	d94e      	bls.n	800831e <_svfiprintf_r+0x17e>
 8008280:	b1b0      	cbz	r0, 80082b0 <_svfiprintf_r+0x110>
 8008282:	9207      	str	r2, [sp, #28]
 8008284:	e014      	b.n	80082b0 <_svfiprintf_r+0x110>
 8008286:	eba0 0308 	sub.w	r3, r0, r8
 800828a:	fa09 f303 	lsl.w	r3, r9, r3
 800828e:	4313      	orrs	r3, r2
 8008290:	9304      	str	r3, [sp, #16]
 8008292:	46a2      	mov	sl, r4
 8008294:	e7d2      	b.n	800823c <_svfiprintf_r+0x9c>
 8008296:	9b03      	ldr	r3, [sp, #12]
 8008298:	1d19      	adds	r1, r3, #4
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	9103      	str	r1, [sp, #12]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	bfbb      	ittet	lt
 80082a2:	425b      	neglt	r3, r3
 80082a4:	f042 0202 	orrlt.w	r2, r2, #2
 80082a8:	9307      	strge	r3, [sp, #28]
 80082aa:	9307      	strlt	r3, [sp, #28]
 80082ac:	bfb8      	it	lt
 80082ae:	9204      	strlt	r2, [sp, #16]
 80082b0:	7823      	ldrb	r3, [r4, #0]
 80082b2:	2b2e      	cmp	r3, #46	; 0x2e
 80082b4:	d10c      	bne.n	80082d0 <_svfiprintf_r+0x130>
 80082b6:	7863      	ldrb	r3, [r4, #1]
 80082b8:	2b2a      	cmp	r3, #42	; 0x2a
 80082ba:	d135      	bne.n	8008328 <_svfiprintf_r+0x188>
 80082bc:	9b03      	ldr	r3, [sp, #12]
 80082be:	1d1a      	adds	r2, r3, #4
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	9203      	str	r2, [sp, #12]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	bfb8      	it	lt
 80082c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80082cc:	3402      	adds	r4, #2
 80082ce:	9305      	str	r3, [sp, #20]
 80082d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800839c <_svfiprintf_r+0x1fc>
 80082d4:	7821      	ldrb	r1, [r4, #0]
 80082d6:	2203      	movs	r2, #3
 80082d8:	4650      	mov	r0, sl
 80082da:	f7f7 ff89 	bl	80001f0 <memchr>
 80082de:	b140      	cbz	r0, 80082f2 <_svfiprintf_r+0x152>
 80082e0:	2340      	movs	r3, #64	; 0x40
 80082e2:	eba0 000a 	sub.w	r0, r0, sl
 80082e6:	fa03 f000 	lsl.w	r0, r3, r0
 80082ea:	9b04      	ldr	r3, [sp, #16]
 80082ec:	4303      	orrs	r3, r0
 80082ee:	3401      	adds	r4, #1
 80082f0:	9304      	str	r3, [sp, #16]
 80082f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082f6:	4826      	ldr	r0, [pc, #152]	; (8008390 <_svfiprintf_r+0x1f0>)
 80082f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082fc:	2206      	movs	r2, #6
 80082fe:	f7f7 ff77 	bl	80001f0 <memchr>
 8008302:	2800      	cmp	r0, #0
 8008304:	d038      	beq.n	8008378 <_svfiprintf_r+0x1d8>
 8008306:	4b23      	ldr	r3, [pc, #140]	; (8008394 <_svfiprintf_r+0x1f4>)
 8008308:	bb1b      	cbnz	r3, 8008352 <_svfiprintf_r+0x1b2>
 800830a:	9b03      	ldr	r3, [sp, #12]
 800830c:	3307      	adds	r3, #7
 800830e:	f023 0307 	bic.w	r3, r3, #7
 8008312:	3308      	adds	r3, #8
 8008314:	9303      	str	r3, [sp, #12]
 8008316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008318:	4433      	add	r3, r6
 800831a:	9309      	str	r3, [sp, #36]	; 0x24
 800831c:	e767      	b.n	80081ee <_svfiprintf_r+0x4e>
 800831e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008322:	460c      	mov	r4, r1
 8008324:	2001      	movs	r0, #1
 8008326:	e7a5      	b.n	8008274 <_svfiprintf_r+0xd4>
 8008328:	2300      	movs	r3, #0
 800832a:	3401      	adds	r4, #1
 800832c:	9305      	str	r3, [sp, #20]
 800832e:	4619      	mov	r1, r3
 8008330:	f04f 0c0a 	mov.w	ip, #10
 8008334:	4620      	mov	r0, r4
 8008336:	f810 2b01 	ldrb.w	r2, [r0], #1
 800833a:	3a30      	subs	r2, #48	; 0x30
 800833c:	2a09      	cmp	r2, #9
 800833e:	d903      	bls.n	8008348 <_svfiprintf_r+0x1a8>
 8008340:	2b00      	cmp	r3, #0
 8008342:	d0c5      	beq.n	80082d0 <_svfiprintf_r+0x130>
 8008344:	9105      	str	r1, [sp, #20]
 8008346:	e7c3      	b.n	80082d0 <_svfiprintf_r+0x130>
 8008348:	fb0c 2101 	mla	r1, ip, r1, r2
 800834c:	4604      	mov	r4, r0
 800834e:	2301      	movs	r3, #1
 8008350:	e7f0      	b.n	8008334 <_svfiprintf_r+0x194>
 8008352:	ab03      	add	r3, sp, #12
 8008354:	9300      	str	r3, [sp, #0]
 8008356:	462a      	mov	r2, r5
 8008358:	4b0f      	ldr	r3, [pc, #60]	; (8008398 <_svfiprintf_r+0x1f8>)
 800835a:	a904      	add	r1, sp, #16
 800835c:	4638      	mov	r0, r7
 800835e:	f3af 8000 	nop.w
 8008362:	1c42      	adds	r2, r0, #1
 8008364:	4606      	mov	r6, r0
 8008366:	d1d6      	bne.n	8008316 <_svfiprintf_r+0x176>
 8008368:	89ab      	ldrh	r3, [r5, #12]
 800836a:	065b      	lsls	r3, r3, #25
 800836c:	f53f af2c 	bmi.w	80081c8 <_svfiprintf_r+0x28>
 8008370:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008372:	b01d      	add	sp, #116	; 0x74
 8008374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008378:	ab03      	add	r3, sp, #12
 800837a:	9300      	str	r3, [sp, #0]
 800837c:	462a      	mov	r2, r5
 800837e:	4b06      	ldr	r3, [pc, #24]	; (8008398 <_svfiprintf_r+0x1f8>)
 8008380:	a904      	add	r1, sp, #16
 8008382:	4638      	mov	r0, r7
 8008384:	f000 f87a 	bl	800847c <_printf_i>
 8008388:	e7eb      	b.n	8008362 <_svfiprintf_r+0x1c2>
 800838a:	bf00      	nop
 800838c:	080089c0 	.word	0x080089c0
 8008390:	080089ca 	.word	0x080089ca
 8008394:	00000000 	.word	0x00000000
 8008398:	080080e9 	.word	0x080080e9
 800839c:	080089c6 	.word	0x080089c6

080083a0 <_printf_common>:
 80083a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083a4:	4616      	mov	r6, r2
 80083a6:	4699      	mov	r9, r3
 80083a8:	688a      	ldr	r2, [r1, #8]
 80083aa:	690b      	ldr	r3, [r1, #16]
 80083ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083b0:	4293      	cmp	r3, r2
 80083b2:	bfb8      	it	lt
 80083b4:	4613      	movlt	r3, r2
 80083b6:	6033      	str	r3, [r6, #0]
 80083b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083bc:	4607      	mov	r7, r0
 80083be:	460c      	mov	r4, r1
 80083c0:	b10a      	cbz	r2, 80083c6 <_printf_common+0x26>
 80083c2:	3301      	adds	r3, #1
 80083c4:	6033      	str	r3, [r6, #0]
 80083c6:	6823      	ldr	r3, [r4, #0]
 80083c8:	0699      	lsls	r1, r3, #26
 80083ca:	bf42      	ittt	mi
 80083cc:	6833      	ldrmi	r3, [r6, #0]
 80083ce:	3302      	addmi	r3, #2
 80083d0:	6033      	strmi	r3, [r6, #0]
 80083d2:	6825      	ldr	r5, [r4, #0]
 80083d4:	f015 0506 	ands.w	r5, r5, #6
 80083d8:	d106      	bne.n	80083e8 <_printf_common+0x48>
 80083da:	f104 0a19 	add.w	sl, r4, #25
 80083de:	68e3      	ldr	r3, [r4, #12]
 80083e0:	6832      	ldr	r2, [r6, #0]
 80083e2:	1a9b      	subs	r3, r3, r2
 80083e4:	42ab      	cmp	r3, r5
 80083e6:	dc26      	bgt.n	8008436 <_printf_common+0x96>
 80083e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083ec:	1e13      	subs	r3, r2, #0
 80083ee:	6822      	ldr	r2, [r4, #0]
 80083f0:	bf18      	it	ne
 80083f2:	2301      	movne	r3, #1
 80083f4:	0692      	lsls	r2, r2, #26
 80083f6:	d42b      	bmi.n	8008450 <_printf_common+0xb0>
 80083f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083fc:	4649      	mov	r1, r9
 80083fe:	4638      	mov	r0, r7
 8008400:	47c0      	blx	r8
 8008402:	3001      	adds	r0, #1
 8008404:	d01e      	beq.n	8008444 <_printf_common+0xa4>
 8008406:	6823      	ldr	r3, [r4, #0]
 8008408:	68e5      	ldr	r5, [r4, #12]
 800840a:	6832      	ldr	r2, [r6, #0]
 800840c:	f003 0306 	and.w	r3, r3, #6
 8008410:	2b04      	cmp	r3, #4
 8008412:	bf08      	it	eq
 8008414:	1aad      	subeq	r5, r5, r2
 8008416:	68a3      	ldr	r3, [r4, #8]
 8008418:	6922      	ldr	r2, [r4, #16]
 800841a:	bf0c      	ite	eq
 800841c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008420:	2500      	movne	r5, #0
 8008422:	4293      	cmp	r3, r2
 8008424:	bfc4      	itt	gt
 8008426:	1a9b      	subgt	r3, r3, r2
 8008428:	18ed      	addgt	r5, r5, r3
 800842a:	2600      	movs	r6, #0
 800842c:	341a      	adds	r4, #26
 800842e:	42b5      	cmp	r5, r6
 8008430:	d11a      	bne.n	8008468 <_printf_common+0xc8>
 8008432:	2000      	movs	r0, #0
 8008434:	e008      	b.n	8008448 <_printf_common+0xa8>
 8008436:	2301      	movs	r3, #1
 8008438:	4652      	mov	r2, sl
 800843a:	4649      	mov	r1, r9
 800843c:	4638      	mov	r0, r7
 800843e:	47c0      	blx	r8
 8008440:	3001      	adds	r0, #1
 8008442:	d103      	bne.n	800844c <_printf_common+0xac>
 8008444:	f04f 30ff 	mov.w	r0, #4294967295
 8008448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800844c:	3501      	adds	r5, #1
 800844e:	e7c6      	b.n	80083de <_printf_common+0x3e>
 8008450:	18e1      	adds	r1, r4, r3
 8008452:	1c5a      	adds	r2, r3, #1
 8008454:	2030      	movs	r0, #48	; 0x30
 8008456:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800845a:	4422      	add	r2, r4
 800845c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008460:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008464:	3302      	adds	r3, #2
 8008466:	e7c7      	b.n	80083f8 <_printf_common+0x58>
 8008468:	2301      	movs	r3, #1
 800846a:	4622      	mov	r2, r4
 800846c:	4649      	mov	r1, r9
 800846e:	4638      	mov	r0, r7
 8008470:	47c0      	blx	r8
 8008472:	3001      	adds	r0, #1
 8008474:	d0e6      	beq.n	8008444 <_printf_common+0xa4>
 8008476:	3601      	adds	r6, #1
 8008478:	e7d9      	b.n	800842e <_printf_common+0x8e>
	...

0800847c <_printf_i>:
 800847c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008480:	460c      	mov	r4, r1
 8008482:	4691      	mov	r9, r2
 8008484:	7e27      	ldrb	r7, [r4, #24]
 8008486:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008488:	2f78      	cmp	r7, #120	; 0x78
 800848a:	4680      	mov	r8, r0
 800848c:	469a      	mov	sl, r3
 800848e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008492:	d807      	bhi.n	80084a4 <_printf_i+0x28>
 8008494:	2f62      	cmp	r7, #98	; 0x62
 8008496:	d80a      	bhi.n	80084ae <_printf_i+0x32>
 8008498:	2f00      	cmp	r7, #0
 800849a:	f000 80d8 	beq.w	800864e <_printf_i+0x1d2>
 800849e:	2f58      	cmp	r7, #88	; 0x58
 80084a0:	f000 80a3 	beq.w	80085ea <_printf_i+0x16e>
 80084a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80084a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084ac:	e03a      	b.n	8008524 <_printf_i+0xa8>
 80084ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80084b2:	2b15      	cmp	r3, #21
 80084b4:	d8f6      	bhi.n	80084a4 <_printf_i+0x28>
 80084b6:	a001      	add	r0, pc, #4	; (adr r0, 80084bc <_printf_i+0x40>)
 80084b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80084bc:	08008515 	.word	0x08008515
 80084c0:	08008529 	.word	0x08008529
 80084c4:	080084a5 	.word	0x080084a5
 80084c8:	080084a5 	.word	0x080084a5
 80084cc:	080084a5 	.word	0x080084a5
 80084d0:	080084a5 	.word	0x080084a5
 80084d4:	08008529 	.word	0x08008529
 80084d8:	080084a5 	.word	0x080084a5
 80084dc:	080084a5 	.word	0x080084a5
 80084e0:	080084a5 	.word	0x080084a5
 80084e4:	080084a5 	.word	0x080084a5
 80084e8:	08008635 	.word	0x08008635
 80084ec:	08008559 	.word	0x08008559
 80084f0:	08008617 	.word	0x08008617
 80084f4:	080084a5 	.word	0x080084a5
 80084f8:	080084a5 	.word	0x080084a5
 80084fc:	08008657 	.word	0x08008657
 8008500:	080084a5 	.word	0x080084a5
 8008504:	08008559 	.word	0x08008559
 8008508:	080084a5 	.word	0x080084a5
 800850c:	080084a5 	.word	0x080084a5
 8008510:	0800861f 	.word	0x0800861f
 8008514:	680b      	ldr	r3, [r1, #0]
 8008516:	1d1a      	adds	r2, r3, #4
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	600a      	str	r2, [r1, #0]
 800851c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008520:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008524:	2301      	movs	r3, #1
 8008526:	e0a3      	b.n	8008670 <_printf_i+0x1f4>
 8008528:	6825      	ldr	r5, [r4, #0]
 800852a:	6808      	ldr	r0, [r1, #0]
 800852c:	062e      	lsls	r6, r5, #24
 800852e:	f100 0304 	add.w	r3, r0, #4
 8008532:	d50a      	bpl.n	800854a <_printf_i+0xce>
 8008534:	6805      	ldr	r5, [r0, #0]
 8008536:	600b      	str	r3, [r1, #0]
 8008538:	2d00      	cmp	r5, #0
 800853a:	da03      	bge.n	8008544 <_printf_i+0xc8>
 800853c:	232d      	movs	r3, #45	; 0x2d
 800853e:	426d      	negs	r5, r5
 8008540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008544:	485e      	ldr	r0, [pc, #376]	; (80086c0 <_printf_i+0x244>)
 8008546:	230a      	movs	r3, #10
 8008548:	e019      	b.n	800857e <_printf_i+0x102>
 800854a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800854e:	6805      	ldr	r5, [r0, #0]
 8008550:	600b      	str	r3, [r1, #0]
 8008552:	bf18      	it	ne
 8008554:	b22d      	sxthne	r5, r5
 8008556:	e7ef      	b.n	8008538 <_printf_i+0xbc>
 8008558:	680b      	ldr	r3, [r1, #0]
 800855a:	6825      	ldr	r5, [r4, #0]
 800855c:	1d18      	adds	r0, r3, #4
 800855e:	6008      	str	r0, [r1, #0]
 8008560:	0628      	lsls	r0, r5, #24
 8008562:	d501      	bpl.n	8008568 <_printf_i+0xec>
 8008564:	681d      	ldr	r5, [r3, #0]
 8008566:	e002      	b.n	800856e <_printf_i+0xf2>
 8008568:	0669      	lsls	r1, r5, #25
 800856a:	d5fb      	bpl.n	8008564 <_printf_i+0xe8>
 800856c:	881d      	ldrh	r5, [r3, #0]
 800856e:	4854      	ldr	r0, [pc, #336]	; (80086c0 <_printf_i+0x244>)
 8008570:	2f6f      	cmp	r7, #111	; 0x6f
 8008572:	bf0c      	ite	eq
 8008574:	2308      	moveq	r3, #8
 8008576:	230a      	movne	r3, #10
 8008578:	2100      	movs	r1, #0
 800857a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800857e:	6866      	ldr	r6, [r4, #4]
 8008580:	60a6      	str	r6, [r4, #8]
 8008582:	2e00      	cmp	r6, #0
 8008584:	bfa2      	ittt	ge
 8008586:	6821      	ldrge	r1, [r4, #0]
 8008588:	f021 0104 	bicge.w	r1, r1, #4
 800858c:	6021      	strge	r1, [r4, #0]
 800858e:	b90d      	cbnz	r5, 8008594 <_printf_i+0x118>
 8008590:	2e00      	cmp	r6, #0
 8008592:	d04d      	beq.n	8008630 <_printf_i+0x1b4>
 8008594:	4616      	mov	r6, r2
 8008596:	fbb5 f1f3 	udiv	r1, r5, r3
 800859a:	fb03 5711 	mls	r7, r3, r1, r5
 800859e:	5dc7      	ldrb	r7, [r0, r7]
 80085a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80085a4:	462f      	mov	r7, r5
 80085a6:	42bb      	cmp	r3, r7
 80085a8:	460d      	mov	r5, r1
 80085aa:	d9f4      	bls.n	8008596 <_printf_i+0x11a>
 80085ac:	2b08      	cmp	r3, #8
 80085ae:	d10b      	bne.n	80085c8 <_printf_i+0x14c>
 80085b0:	6823      	ldr	r3, [r4, #0]
 80085b2:	07df      	lsls	r7, r3, #31
 80085b4:	d508      	bpl.n	80085c8 <_printf_i+0x14c>
 80085b6:	6923      	ldr	r3, [r4, #16]
 80085b8:	6861      	ldr	r1, [r4, #4]
 80085ba:	4299      	cmp	r1, r3
 80085bc:	bfde      	ittt	le
 80085be:	2330      	movle	r3, #48	; 0x30
 80085c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80085c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80085c8:	1b92      	subs	r2, r2, r6
 80085ca:	6122      	str	r2, [r4, #16]
 80085cc:	f8cd a000 	str.w	sl, [sp]
 80085d0:	464b      	mov	r3, r9
 80085d2:	aa03      	add	r2, sp, #12
 80085d4:	4621      	mov	r1, r4
 80085d6:	4640      	mov	r0, r8
 80085d8:	f7ff fee2 	bl	80083a0 <_printf_common>
 80085dc:	3001      	adds	r0, #1
 80085de:	d14c      	bne.n	800867a <_printf_i+0x1fe>
 80085e0:	f04f 30ff 	mov.w	r0, #4294967295
 80085e4:	b004      	add	sp, #16
 80085e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085ea:	4835      	ldr	r0, [pc, #212]	; (80086c0 <_printf_i+0x244>)
 80085ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80085f0:	6823      	ldr	r3, [r4, #0]
 80085f2:	680e      	ldr	r6, [r1, #0]
 80085f4:	061f      	lsls	r7, r3, #24
 80085f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80085fa:	600e      	str	r6, [r1, #0]
 80085fc:	d514      	bpl.n	8008628 <_printf_i+0x1ac>
 80085fe:	07d9      	lsls	r1, r3, #31
 8008600:	bf44      	itt	mi
 8008602:	f043 0320 	orrmi.w	r3, r3, #32
 8008606:	6023      	strmi	r3, [r4, #0]
 8008608:	b91d      	cbnz	r5, 8008612 <_printf_i+0x196>
 800860a:	6823      	ldr	r3, [r4, #0]
 800860c:	f023 0320 	bic.w	r3, r3, #32
 8008610:	6023      	str	r3, [r4, #0]
 8008612:	2310      	movs	r3, #16
 8008614:	e7b0      	b.n	8008578 <_printf_i+0xfc>
 8008616:	6823      	ldr	r3, [r4, #0]
 8008618:	f043 0320 	orr.w	r3, r3, #32
 800861c:	6023      	str	r3, [r4, #0]
 800861e:	2378      	movs	r3, #120	; 0x78
 8008620:	4828      	ldr	r0, [pc, #160]	; (80086c4 <_printf_i+0x248>)
 8008622:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008626:	e7e3      	b.n	80085f0 <_printf_i+0x174>
 8008628:	065e      	lsls	r6, r3, #25
 800862a:	bf48      	it	mi
 800862c:	b2ad      	uxthmi	r5, r5
 800862e:	e7e6      	b.n	80085fe <_printf_i+0x182>
 8008630:	4616      	mov	r6, r2
 8008632:	e7bb      	b.n	80085ac <_printf_i+0x130>
 8008634:	680b      	ldr	r3, [r1, #0]
 8008636:	6826      	ldr	r6, [r4, #0]
 8008638:	6960      	ldr	r0, [r4, #20]
 800863a:	1d1d      	adds	r5, r3, #4
 800863c:	600d      	str	r5, [r1, #0]
 800863e:	0635      	lsls	r5, r6, #24
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	d501      	bpl.n	8008648 <_printf_i+0x1cc>
 8008644:	6018      	str	r0, [r3, #0]
 8008646:	e002      	b.n	800864e <_printf_i+0x1d2>
 8008648:	0671      	lsls	r1, r6, #25
 800864a:	d5fb      	bpl.n	8008644 <_printf_i+0x1c8>
 800864c:	8018      	strh	r0, [r3, #0]
 800864e:	2300      	movs	r3, #0
 8008650:	6123      	str	r3, [r4, #16]
 8008652:	4616      	mov	r6, r2
 8008654:	e7ba      	b.n	80085cc <_printf_i+0x150>
 8008656:	680b      	ldr	r3, [r1, #0]
 8008658:	1d1a      	adds	r2, r3, #4
 800865a:	600a      	str	r2, [r1, #0]
 800865c:	681e      	ldr	r6, [r3, #0]
 800865e:	6862      	ldr	r2, [r4, #4]
 8008660:	2100      	movs	r1, #0
 8008662:	4630      	mov	r0, r6
 8008664:	f7f7 fdc4 	bl	80001f0 <memchr>
 8008668:	b108      	cbz	r0, 800866e <_printf_i+0x1f2>
 800866a:	1b80      	subs	r0, r0, r6
 800866c:	6060      	str	r0, [r4, #4]
 800866e:	6863      	ldr	r3, [r4, #4]
 8008670:	6123      	str	r3, [r4, #16]
 8008672:	2300      	movs	r3, #0
 8008674:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008678:	e7a8      	b.n	80085cc <_printf_i+0x150>
 800867a:	6923      	ldr	r3, [r4, #16]
 800867c:	4632      	mov	r2, r6
 800867e:	4649      	mov	r1, r9
 8008680:	4640      	mov	r0, r8
 8008682:	47d0      	blx	sl
 8008684:	3001      	adds	r0, #1
 8008686:	d0ab      	beq.n	80085e0 <_printf_i+0x164>
 8008688:	6823      	ldr	r3, [r4, #0]
 800868a:	079b      	lsls	r3, r3, #30
 800868c:	d413      	bmi.n	80086b6 <_printf_i+0x23a>
 800868e:	68e0      	ldr	r0, [r4, #12]
 8008690:	9b03      	ldr	r3, [sp, #12]
 8008692:	4298      	cmp	r0, r3
 8008694:	bfb8      	it	lt
 8008696:	4618      	movlt	r0, r3
 8008698:	e7a4      	b.n	80085e4 <_printf_i+0x168>
 800869a:	2301      	movs	r3, #1
 800869c:	4632      	mov	r2, r6
 800869e:	4649      	mov	r1, r9
 80086a0:	4640      	mov	r0, r8
 80086a2:	47d0      	blx	sl
 80086a4:	3001      	adds	r0, #1
 80086a6:	d09b      	beq.n	80085e0 <_printf_i+0x164>
 80086a8:	3501      	adds	r5, #1
 80086aa:	68e3      	ldr	r3, [r4, #12]
 80086ac:	9903      	ldr	r1, [sp, #12]
 80086ae:	1a5b      	subs	r3, r3, r1
 80086b0:	42ab      	cmp	r3, r5
 80086b2:	dcf2      	bgt.n	800869a <_printf_i+0x21e>
 80086b4:	e7eb      	b.n	800868e <_printf_i+0x212>
 80086b6:	2500      	movs	r5, #0
 80086b8:	f104 0619 	add.w	r6, r4, #25
 80086bc:	e7f5      	b.n	80086aa <_printf_i+0x22e>
 80086be:	bf00      	nop
 80086c0:	080089d1 	.word	0x080089d1
 80086c4:	080089e2 	.word	0x080089e2

080086c8 <memcpy>:
 80086c8:	440a      	add	r2, r1
 80086ca:	4291      	cmp	r1, r2
 80086cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80086d0:	d100      	bne.n	80086d4 <memcpy+0xc>
 80086d2:	4770      	bx	lr
 80086d4:	b510      	push	{r4, lr}
 80086d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086de:	4291      	cmp	r1, r2
 80086e0:	d1f9      	bne.n	80086d6 <memcpy+0xe>
 80086e2:	bd10      	pop	{r4, pc}

080086e4 <memmove>:
 80086e4:	4288      	cmp	r0, r1
 80086e6:	b510      	push	{r4, lr}
 80086e8:	eb01 0402 	add.w	r4, r1, r2
 80086ec:	d902      	bls.n	80086f4 <memmove+0x10>
 80086ee:	4284      	cmp	r4, r0
 80086f0:	4623      	mov	r3, r4
 80086f2:	d807      	bhi.n	8008704 <memmove+0x20>
 80086f4:	1e43      	subs	r3, r0, #1
 80086f6:	42a1      	cmp	r1, r4
 80086f8:	d008      	beq.n	800870c <memmove+0x28>
 80086fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008702:	e7f8      	b.n	80086f6 <memmove+0x12>
 8008704:	4402      	add	r2, r0
 8008706:	4601      	mov	r1, r0
 8008708:	428a      	cmp	r2, r1
 800870a:	d100      	bne.n	800870e <memmove+0x2a>
 800870c:	bd10      	pop	{r4, pc}
 800870e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008712:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008716:	e7f7      	b.n	8008708 <memmove+0x24>

08008718 <_free_r>:
 8008718:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800871a:	2900      	cmp	r1, #0
 800871c:	d048      	beq.n	80087b0 <_free_r+0x98>
 800871e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008722:	9001      	str	r0, [sp, #4]
 8008724:	2b00      	cmp	r3, #0
 8008726:	f1a1 0404 	sub.w	r4, r1, #4
 800872a:	bfb8      	it	lt
 800872c:	18e4      	addlt	r4, r4, r3
 800872e:	f000 f8d3 	bl	80088d8 <__malloc_lock>
 8008732:	4a20      	ldr	r2, [pc, #128]	; (80087b4 <_free_r+0x9c>)
 8008734:	9801      	ldr	r0, [sp, #4]
 8008736:	6813      	ldr	r3, [r2, #0]
 8008738:	4615      	mov	r5, r2
 800873a:	b933      	cbnz	r3, 800874a <_free_r+0x32>
 800873c:	6063      	str	r3, [r4, #4]
 800873e:	6014      	str	r4, [r2, #0]
 8008740:	b003      	add	sp, #12
 8008742:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008746:	f000 b8cd 	b.w	80088e4 <__malloc_unlock>
 800874a:	42a3      	cmp	r3, r4
 800874c:	d90b      	bls.n	8008766 <_free_r+0x4e>
 800874e:	6821      	ldr	r1, [r4, #0]
 8008750:	1862      	adds	r2, r4, r1
 8008752:	4293      	cmp	r3, r2
 8008754:	bf04      	itt	eq
 8008756:	681a      	ldreq	r2, [r3, #0]
 8008758:	685b      	ldreq	r3, [r3, #4]
 800875a:	6063      	str	r3, [r4, #4]
 800875c:	bf04      	itt	eq
 800875e:	1852      	addeq	r2, r2, r1
 8008760:	6022      	streq	r2, [r4, #0]
 8008762:	602c      	str	r4, [r5, #0]
 8008764:	e7ec      	b.n	8008740 <_free_r+0x28>
 8008766:	461a      	mov	r2, r3
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	b10b      	cbz	r3, 8008770 <_free_r+0x58>
 800876c:	42a3      	cmp	r3, r4
 800876e:	d9fa      	bls.n	8008766 <_free_r+0x4e>
 8008770:	6811      	ldr	r1, [r2, #0]
 8008772:	1855      	adds	r5, r2, r1
 8008774:	42a5      	cmp	r5, r4
 8008776:	d10b      	bne.n	8008790 <_free_r+0x78>
 8008778:	6824      	ldr	r4, [r4, #0]
 800877a:	4421      	add	r1, r4
 800877c:	1854      	adds	r4, r2, r1
 800877e:	42a3      	cmp	r3, r4
 8008780:	6011      	str	r1, [r2, #0]
 8008782:	d1dd      	bne.n	8008740 <_free_r+0x28>
 8008784:	681c      	ldr	r4, [r3, #0]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	6053      	str	r3, [r2, #4]
 800878a:	4421      	add	r1, r4
 800878c:	6011      	str	r1, [r2, #0]
 800878e:	e7d7      	b.n	8008740 <_free_r+0x28>
 8008790:	d902      	bls.n	8008798 <_free_r+0x80>
 8008792:	230c      	movs	r3, #12
 8008794:	6003      	str	r3, [r0, #0]
 8008796:	e7d3      	b.n	8008740 <_free_r+0x28>
 8008798:	6825      	ldr	r5, [r4, #0]
 800879a:	1961      	adds	r1, r4, r5
 800879c:	428b      	cmp	r3, r1
 800879e:	bf04      	itt	eq
 80087a0:	6819      	ldreq	r1, [r3, #0]
 80087a2:	685b      	ldreq	r3, [r3, #4]
 80087a4:	6063      	str	r3, [r4, #4]
 80087a6:	bf04      	itt	eq
 80087a8:	1949      	addeq	r1, r1, r5
 80087aa:	6021      	streq	r1, [r4, #0]
 80087ac:	6054      	str	r4, [r2, #4]
 80087ae:	e7c7      	b.n	8008740 <_free_r+0x28>
 80087b0:	b003      	add	sp, #12
 80087b2:	bd30      	pop	{r4, r5, pc}
 80087b4:	20000320 	.word	0x20000320

080087b8 <_malloc_r>:
 80087b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ba:	1ccd      	adds	r5, r1, #3
 80087bc:	f025 0503 	bic.w	r5, r5, #3
 80087c0:	3508      	adds	r5, #8
 80087c2:	2d0c      	cmp	r5, #12
 80087c4:	bf38      	it	cc
 80087c6:	250c      	movcc	r5, #12
 80087c8:	2d00      	cmp	r5, #0
 80087ca:	4606      	mov	r6, r0
 80087cc:	db01      	blt.n	80087d2 <_malloc_r+0x1a>
 80087ce:	42a9      	cmp	r1, r5
 80087d0:	d903      	bls.n	80087da <_malloc_r+0x22>
 80087d2:	230c      	movs	r3, #12
 80087d4:	6033      	str	r3, [r6, #0]
 80087d6:	2000      	movs	r0, #0
 80087d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087da:	f000 f87d 	bl	80088d8 <__malloc_lock>
 80087de:	4921      	ldr	r1, [pc, #132]	; (8008864 <_malloc_r+0xac>)
 80087e0:	680a      	ldr	r2, [r1, #0]
 80087e2:	4614      	mov	r4, r2
 80087e4:	b99c      	cbnz	r4, 800880e <_malloc_r+0x56>
 80087e6:	4f20      	ldr	r7, [pc, #128]	; (8008868 <_malloc_r+0xb0>)
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	b923      	cbnz	r3, 80087f6 <_malloc_r+0x3e>
 80087ec:	4621      	mov	r1, r4
 80087ee:	4630      	mov	r0, r6
 80087f0:	f000 f862 	bl	80088b8 <_sbrk_r>
 80087f4:	6038      	str	r0, [r7, #0]
 80087f6:	4629      	mov	r1, r5
 80087f8:	4630      	mov	r0, r6
 80087fa:	f000 f85d 	bl	80088b8 <_sbrk_r>
 80087fe:	1c43      	adds	r3, r0, #1
 8008800:	d123      	bne.n	800884a <_malloc_r+0x92>
 8008802:	230c      	movs	r3, #12
 8008804:	6033      	str	r3, [r6, #0]
 8008806:	4630      	mov	r0, r6
 8008808:	f000 f86c 	bl	80088e4 <__malloc_unlock>
 800880c:	e7e3      	b.n	80087d6 <_malloc_r+0x1e>
 800880e:	6823      	ldr	r3, [r4, #0]
 8008810:	1b5b      	subs	r3, r3, r5
 8008812:	d417      	bmi.n	8008844 <_malloc_r+0x8c>
 8008814:	2b0b      	cmp	r3, #11
 8008816:	d903      	bls.n	8008820 <_malloc_r+0x68>
 8008818:	6023      	str	r3, [r4, #0]
 800881a:	441c      	add	r4, r3
 800881c:	6025      	str	r5, [r4, #0]
 800881e:	e004      	b.n	800882a <_malloc_r+0x72>
 8008820:	6863      	ldr	r3, [r4, #4]
 8008822:	42a2      	cmp	r2, r4
 8008824:	bf0c      	ite	eq
 8008826:	600b      	streq	r3, [r1, #0]
 8008828:	6053      	strne	r3, [r2, #4]
 800882a:	4630      	mov	r0, r6
 800882c:	f000 f85a 	bl	80088e4 <__malloc_unlock>
 8008830:	f104 000b 	add.w	r0, r4, #11
 8008834:	1d23      	adds	r3, r4, #4
 8008836:	f020 0007 	bic.w	r0, r0, #7
 800883a:	1ac2      	subs	r2, r0, r3
 800883c:	d0cc      	beq.n	80087d8 <_malloc_r+0x20>
 800883e:	1a1b      	subs	r3, r3, r0
 8008840:	50a3      	str	r3, [r4, r2]
 8008842:	e7c9      	b.n	80087d8 <_malloc_r+0x20>
 8008844:	4622      	mov	r2, r4
 8008846:	6864      	ldr	r4, [r4, #4]
 8008848:	e7cc      	b.n	80087e4 <_malloc_r+0x2c>
 800884a:	1cc4      	adds	r4, r0, #3
 800884c:	f024 0403 	bic.w	r4, r4, #3
 8008850:	42a0      	cmp	r0, r4
 8008852:	d0e3      	beq.n	800881c <_malloc_r+0x64>
 8008854:	1a21      	subs	r1, r4, r0
 8008856:	4630      	mov	r0, r6
 8008858:	f000 f82e 	bl	80088b8 <_sbrk_r>
 800885c:	3001      	adds	r0, #1
 800885e:	d1dd      	bne.n	800881c <_malloc_r+0x64>
 8008860:	e7cf      	b.n	8008802 <_malloc_r+0x4a>
 8008862:	bf00      	nop
 8008864:	20000320 	.word	0x20000320
 8008868:	20000324 	.word	0x20000324

0800886c <_realloc_r>:
 800886c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800886e:	4607      	mov	r7, r0
 8008870:	4614      	mov	r4, r2
 8008872:	460e      	mov	r6, r1
 8008874:	b921      	cbnz	r1, 8008880 <_realloc_r+0x14>
 8008876:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800887a:	4611      	mov	r1, r2
 800887c:	f7ff bf9c 	b.w	80087b8 <_malloc_r>
 8008880:	b922      	cbnz	r2, 800888c <_realloc_r+0x20>
 8008882:	f7ff ff49 	bl	8008718 <_free_r>
 8008886:	4625      	mov	r5, r4
 8008888:	4628      	mov	r0, r5
 800888a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800888c:	f000 f830 	bl	80088f0 <_malloc_usable_size_r>
 8008890:	42a0      	cmp	r0, r4
 8008892:	d20f      	bcs.n	80088b4 <_realloc_r+0x48>
 8008894:	4621      	mov	r1, r4
 8008896:	4638      	mov	r0, r7
 8008898:	f7ff ff8e 	bl	80087b8 <_malloc_r>
 800889c:	4605      	mov	r5, r0
 800889e:	2800      	cmp	r0, #0
 80088a0:	d0f2      	beq.n	8008888 <_realloc_r+0x1c>
 80088a2:	4631      	mov	r1, r6
 80088a4:	4622      	mov	r2, r4
 80088a6:	f7ff ff0f 	bl	80086c8 <memcpy>
 80088aa:	4631      	mov	r1, r6
 80088ac:	4638      	mov	r0, r7
 80088ae:	f7ff ff33 	bl	8008718 <_free_r>
 80088b2:	e7e9      	b.n	8008888 <_realloc_r+0x1c>
 80088b4:	4635      	mov	r5, r6
 80088b6:	e7e7      	b.n	8008888 <_realloc_r+0x1c>

080088b8 <_sbrk_r>:
 80088b8:	b538      	push	{r3, r4, r5, lr}
 80088ba:	4d06      	ldr	r5, [pc, #24]	; (80088d4 <_sbrk_r+0x1c>)
 80088bc:	2300      	movs	r3, #0
 80088be:	4604      	mov	r4, r0
 80088c0:	4608      	mov	r0, r1
 80088c2:	602b      	str	r3, [r5, #0]
 80088c4:	f7f9 fa74 	bl	8001db0 <_sbrk>
 80088c8:	1c43      	adds	r3, r0, #1
 80088ca:	d102      	bne.n	80088d2 <_sbrk_r+0x1a>
 80088cc:	682b      	ldr	r3, [r5, #0]
 80088ce:	b103      	cbz	r3, 80088d2 <_sbrk_r+0x1a>
 80088d0:	6023      	str	r3, [r4, #0]
 80088d2:	bd38      	pop	{r3, r4, r5, pc}
 80088d4:	20000558 	.word	0x20000558

080088d8 <__malloc_lock>:
 80088d8:	4801      	ldr	r0, [pc, #4]	; (80088e0 <__malloc_lock+0x8>)
 80088da:	f000 b811 	b.w	8008900 <__retarget_lock_acquire_recursive>
 80088de:	bf00      	nop
 80088e0:	20000560 	.word	0x20000560

080088e4 <__malloc_unlock>:
 80088e4:	4801      	ldr	r0, [pc, #4]	; (80088ec <__malloc_unlock+0x8>)
 80088e6:	f000 b80c 	b.w	8008902 <__retarget_lock_release_recursive>
 80088ea:	bf00      	nop
 80088ec:	20000560 	.word	0x20000560

080088f0 <_malloc_usable_size_r>:
 80088f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088f4:	1f18      	subs	r0, r3, #4
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	bfbc      	itt	lt
 80088fa:	580b      	ldrlt	r3, [r1, r0]
 80088fc:	18c0      	addlt	r0, r0, r3
 80088fe:	4770      	bx	lr

08008900 <__retarget_lock_acquire_recursive>:
 8008900:	4770      	bx	lr

08008902 <__retarget_lock_release_recursive>:
 8008902:	4770      	bx	lr

08008904 <_init>:
 8008904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008906:	bf00      	nop
 8008908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800890a:	bc08      	pop	{r3}
 800890c:	469e      	mov	lr, r3
 800890e:	4770      	bx	lr

08008910 <_fini>:
 8008910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008912:	bf00      	nop
 8008914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008916:	bc08      	pop	{r3}
 8008918:	469e      	mov	lr, r3
 800891a:	4770      	bx	lr
